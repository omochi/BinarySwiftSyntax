// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-macos10.12 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftSyntax
import Foundation
import Swift
public protocol DiagnosticConsumer {
  var needsLineColumn: Swift.Bool { get }
  func handle(_ diagnostic: SwiftSyntax.Diagnostic)
  func finalize()
}
extension SwiftSyntax.DiagnosticConsumer {
  public var needsLineColumn: Swift.Bool {
    get
  }
}
@_inheritsConvenienceInitializers open class SyntaxAnyVisitor : SwiftSyntax.SyntaxVisitor {
  open func visitAny(_ node: SwiftSyntax.Syntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitAnyPost(_ node: SwiftSyntax.Syntax)
  override open func visit(_ token: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TokenSyntax)
  override open func visit(_ node: SwiftSyntax.UnknownSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnknownSyntax)
  override open func visit(_ node: SwiftSyntax.UnknownDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnknownDeclSyntax)
  override open func visit(_ node: SwiftSyntax.UnknownExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnknownExprSyntax)
  override open func visit(_ node: SwiftSyntax.UnknownStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnknownStmtSyntax)
  override open func visit(_ node: SwiftSyntax.UnknownTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnknownTypeSyntax)
  override open func visit(_ node: SwiftSyntax.UnknownPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnknownPatternSyntax)
  override open func visit(_ node: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CodeBlockItemSyntax)
  override open func visit(_ node: SwiftSyntax.CodeBlockItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CodeBlockItemListSyntax)
  override open func visit(_ node: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CodeBlockSyntax)
  override open func visit(_ node: SwiftSyntax.InOutExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InOutExprSyntax)
  override open func visit(_ node: SwiftSyntax.PoundColumnExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundColumnExprSyntax)
  override open func visit(_ node: SwiftSyntax.TupleExprElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleExprElementListSyntax)
  override open func visit(_ node: SwiftSyntax.ArrayElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrayElementListSyntax)
  override open func visit(_ node: SwiftSyntax.DictionaryElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DictionaryElementListSyntax)
  override open func visit(_ node: SwiftSyntax.StringLiteralSegmentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.StringLiteralSegmentsSyntax)
  override open func visit(_ node: SwiftSyntax.TryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TryExprSyntax)
  override open func visit(_ node: SwiftSyntax.AwaitExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AwaitExprSyntax)
  override open func visit(_ node: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclNameArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.DeclNameArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclNameArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.DeclNameArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.IdentifierExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IdentifierExprSyntax)
  override open func visit(_ node: SwiftSyntax.SuperRefExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SuperRefExprSyntax)
  override open func visit(_ node: SwiftSyntax.NilLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.NilLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.DiscardAssignmentExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DiscardAssignmentExprSyntax)
  override open func visit(_ node: SwiftSyntax.AssignmentExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AssignmentExprSyntax)
  override open func visit(_ node: SwiftSyntax.SequenceExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SequenceExprSyntax)
  override open func visit(_ node: SwiftSyntax.ExprListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExprListSyntax)
  override open func visit(_ node: SwiftSyntax.PoundLineExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundLineExprSyntax)
  override open func visit(_ node: SwiftSyntax.PoundFileExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundFileExprSyntax)
  override open func visit(_ node: SwiftSyntax.PoundFileIDExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundFileIDExprSyntax)
  override open func visit(_ node: SwiftSyntax.PoundFilePathExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundFilePathExprSyntax)
  override open func visit(_ node: SwiftSyntax.PoundFunctionExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundFunctionExprSyntax)
  override open func visit(_ node: SwiftSyntax.PoundDsohandleExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundDsohandleExprSyntax)
  override open func visit(_ node: SwiftSyntax.SymbolicReferenceExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SymbolicReferenceExprSyntax)
  override open func visit(_ node: SwiftSyntax.PrefixOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrefixOperatorExprSyntax)
  override open func visit(_ node: SwiftSyntax.BinaryOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.BinaryOperatorExprSyntax)
  override open func visit(_ node: SwiftSyntax.ArrowExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrowExprSyntax)
  override open func visit(_ node: SwiftSyntax.FloatLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FloatLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.TupleExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleExprSyntax)
  override open func visit(_ node: SwiftSyntax.ArrayExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrayExprSyntax)
  override open func visit(_ node: SwiftSyntax.DictionaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DictionaryExprSyntax)
  override open func visit(_ node: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleExprElementSyntax)
  override open func visit(_ node: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrayElementSyntax)
  override open func visit(_ node: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DictionaryElementSyntax)
  override open func visit(_ node: SwiftSyntax.IntegerLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IntegerLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.BooleanLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.BooleanLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.TernaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TernaryExprSyntax)
  override open func visit(_ node: SwiftSyntax.MemberAccessExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberAccessExprSyntax)
  override open func visit(_ node: SwiftSyntax.IsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IsExprSyntax)
  override open func visit(_ node: SwiftSyntax.AsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AsExprSyntax)
  override open func visit(_ node: SwiftSyntax.TypeExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeExprSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureCaptureItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureCaptureItemSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureCaptureItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureCaptureItemListSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureCaptureSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureCaptureSignatureSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureParamSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureParamSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureParamListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureParamListSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureSignatureSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureExprSyntax)
  override open func visit(_ node: SwiftSyntax.UnresolvedPatternExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnresolvedPatternExprSyntax)
  override open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax)
  override open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionCallExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionCallExprSyntax)
  override open func visit(_ node: SwiftSyntax.SubscriptExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SubscriptExprSyntax)
  override open func visit(_ node: SwiftSyntax.OptionalChainingExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OptionalChainingExprSyntax)
  override open func visit(_ node: SwiftSyntax.ForcedValueExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ForcedValueExprSyntax)
  override open func visit(_ node: SwiftSyntax.PostfixUnaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PostfixUnaryExprSyntax)
  override open func visit(_ node: SwiftSyntax.SpecializeExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SpecializeExprSyntax)
  override open func visit(_ node: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.StringSegmentSyntax)
  override open func visit(_ node: SwiftSyntax.ExpressionSegmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExpressionSegmentSyntax)
  override open func visit(_ node: SwiftSyntax.StringLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.StringLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.KeyPathExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.KeyPathExprSyntax)
  override open func visit(_ node: SwiftSyntax.KeyPathBaseExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.KeyPathBaseExprSyntax)
  override open func visit(_ node: SwiftSyntax.ObjcNamePieceSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjcNamePieceSyntax)
  override open func visit(_ node: SwiftSyntax.ObjcNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjcNameSyntax)
  override open func visit(_ node: SwiftSyntax.ObjcKeyPathExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjcKeyPathExprSyntax)
  override open func visit(_ node: SwiftSyntax.ObjcSelectorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjcSelectorExprSyntax)
  override open func visit(_ node: SwiftSyntax.PostfixIfConfigExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PostfixIfConfigExprSyntax)
  override open func visit(_ node: SwiftSyntax.EditorPlaceholderExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EditorPlaceholderExprSyntax)
  override open func visit(_ node: SwiftSyntax.ObjectLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjectLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.TypeInitializerClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeInitializerClauseSyntax)
  override open func visit(_ node: SwiftSyntax.TypealiasDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypealiasDeclSyntax)
  override open func visit(_ node: SwiftSyntax.AssociatedtypeDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AssociatedtypeDeclSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionParameterListSyntax)
  override open func visit(_ node: SwiftSyntax.ParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ParameterClauseSyntax)
  override open func visit(_ node: SwiftSyntax.ReturnClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ReturnClauseSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionSignatureSyntax)
  override open func visit(_ node: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IfConfigClauseSyntax)
  override open func visit(_ node: SwiftSyntax.IfConfigClauseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IfConfigClauseListSyntax)
  override open func visit(_ node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IfConfigDeclSyntax)
  override open func visit(_ node: SwiftSyntax.PoundErrorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundErrorDeclSyntax)
  override open func visit(_ node: SwiftSyntax.PoundWarningDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundWarningDeclSyntax)
  override open func visit(_ node: SwiftSyntax.PoundSourceLocationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundSourceLocationSyntax)
  override open func visit(_ node: SwiftSyntax.PoundSourceLocationArgsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundSourceLocationArgsSyntax)
  override open func visit(_ node: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclModifierSyntax)
  override open func visit(_ node: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InheritedTypeSyntax)
  override open func visit(_ node: SwiftSyntax.InheritedTypeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InheritedTypeListSyntax)
  override open func visit(_ node: SwiftSyntax.TypeInheritanceClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeInheritanceClauseSyntax)
  override open func visit(_ node: SwiftSyntax.ClassDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClassDeclSyntax)
  override open func visit(_ node: SwiftSyntax.StructDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.StructDeclSyntax)
  override open func visit(_ node: SwiftSyntax.ProtocolDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ProtocolDeclSyntax)
  override open func visit(_ node: SwiftSyntax.ExtensionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExtensionDeclSyntax)
  override open func visit(_ node: SwiftSyntax.MemberDeclBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberDeclBlockSyntax)
  override open func visit(_ node: SwiftSyntax.MemberDeclListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberDeclListSyntax)
  override open func visit(_ node: SwiftSyntax.MemberDeclListItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberDeclListItemSyntax)
  override open func visit(_ node: SwiftSyntax.SourceFileSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SourceFileSyntax)
  override open func visit(_ node: SwiftSyntax.InitializerClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InitializerClauseSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionParameterSyntax)
  override open func visit(_ node: SwiftSyntax.ModifierListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ModifierListSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionDeclSyntax)
  override open func visit(_ node: SwiftSyntax.InitializerDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InitializerDeclSyntax)
  override open func visit(_ node: SwiftSyntax.DeinitializerDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeinitializerDeclSyntax)
  override open func visit(_ node: SwiftSyntax.SubscriptDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SubscriptDeclSyntax)
  override open func visit(_ node: SwiftSyntax.AccessLevelModifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessLevelModifierSyntax)
  override open func visit(_ node: SwiftSyntax.AccessPathComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessPathComponentSyntax)
  override open func visit(_ node: SwiftSyntax.AccessPathSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessPathSyntax)
  override open func visit(_ node: SwiftSyntax.ImportDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ImportDeclSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorParameterSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorDeclSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorListSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorBlockSyntax)
  override open func visit(_ node: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PatternBindingSyntax)
  override open func visit(_ node: SwiftSyntax.PatternBindingListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PatternBindingListSyntax)
  override open func visit(_ node: SwiftSyntax.VariableDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.VariableDeclSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseElementSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseElementListSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseDeclSyntax)
  override open func visit(_ node: SwiftSyntax.EnumDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumDeclSyntax)
  override open func visit(_ node: SwiftSyntax.OperatorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OperatorDeclSyntax)
  override open func visit(_ node: SwiftSyntax.IdentifierListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IdentifierListSyntax)
  override open func visit(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupNameElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupNameElementSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax)
  override open func visit(_ node: SwiftSyntax.TokenListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TokenListSyntax)
  override open func visit(_ node: SwiftSyntax.NonEmptyTokenListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.NonEmptyTokenListSyntax)
  override open func visit(_ node: SwiftSyntax.CustomAttributeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CustomAttributeSyntax)
  override open func visit(_ node: SwiftSyntax.AttributeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AttributeSyntax)
  override open func visit(_ node: SwiftSyntax.AttributeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AttributeListSyntax)
  override open func visit(_ node: SwiftSyntax.SpecializeAttributeSpecListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SpecializeAttributeSpecListSyntax)
  override open func visit(_ node: SwiftSyntax.LabeledSpecializeEntrySyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.LabeledSpecializeEntrySyntax)
  override open func visit(_ node: SwiftSyntax.TargetFunctionEntrySyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TargetFunctionEntrySyntax)
  override open func visit(_ node: SwiftSyntax.NamedAttributeStringArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.NamedAttributeStringArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.DeclNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclNameSyntax)
  override open func visit(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjCSelectorPieceSyntax)
  override open func visit(_ node: SwiftSyntax.ObjCSelectorSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjCSelectorSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiabilityParamsClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiabilityParamsClauseSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiabilityParamsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiabilityParamsSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiabilityParamListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiabilityParamListSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiabilityParamSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiabilityParamSyntax)
  override open func visit(_ node: SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.QualifiedDeclNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.QualifiedDeclNameSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionDeclNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionDeclNameSyntax)
  override open func visit(_ node: SwiftSyntax.ContinueStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ContinueStmtSyntax)
  override open func visit(_ node: SwiftSyntax.WhileStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.WhileStmtSyntax)
  override open func visit(_ node: SwiftSyntax.DeferStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeferStmtSyntax)
  override open func visit(_ node: SwiftSyntax.ExpressionStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExpressionStmtSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchCaseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchCaseListSyntax)
  override open func visit(_ node: SwiftSyntax.RepeatWhileStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.RepeatWhileStmtSyntax)
  override open func visit(_ node: SwiftSyntax.GuardStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GuardStmtSyntax)
  override open func visit(_ node: SwiftSyntax.WhereClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.WhereClauseSyntax)
  override open func visit(_ node: SwiftSyntax.ForInStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ForInStmtSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchStmtSyntax)
  override open func visit(_ node: SwiftSyntax.CatchClauseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CatchClauseListSyntax)
  override open func visit(_ node: SwiftSyntax.DoStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DoStmtSyntax)
  override open func visit(_ node: SwiftSyntax.ReturnStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ReturnStmtSyntax)
  override open func visit(_ node: SwiftSyntax.YieldStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.YieldStmtSyntax)
  override open func visit(_ node: SwiftSyntax.YieldListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.YieldListSyntax)
  override open func visit(_ node: SwiftSyntax.FallthroughStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FallthroughStmtSyntax)
  override open func visit(_ node: SwiftSyntax.BreakStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.BreakStmtSyntax)
  override open func visit(_ node: SwiftSyntax.CaseItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CaseItemListSyntax)
  override open func visit(_ node: SwiftSyntax.CatchItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CatchItemListSyntax)
  override open func visit(_ node: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConditionElementSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilityConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilityConditionSyntax)
  override open func visit(_ node: SwiftSyntax.MatchingPatternConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MatchingPatternConditionSyntax)
  override open func visit(_ node: SwiftSyntax.OptionalBindingConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OptionalBindingConditionSyntax)
  override open func visit(_ node: SwiftSyntax.ConditionElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConditionElementListSyntax)
  override open func visit(_ node: SwiftSyntax.DeclarationStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclarationStmtSyntax)
  override open func visit(_ node: SwiftSyntax.ThrowStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ThrowStmtSyntax)
  override open func visit(_ node: SwiftSyntax.IfStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IfStmtSyntax)
  override open func visit(_ node: SwiftSyntax.ElseIfContinuationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ElseIfContinuationSyntax)
  override open func visit(_ node: SwiftSyntax.ElseBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ElseBlockSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchCaseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchCaseSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchDefaultLabelSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchDefaultLabelSyntax)
  override open func visit(_ node: SwiftSyntax.CaseItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CaseItemSyntax)
  override open func visit(_ node: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CatchItemSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchCaseLabelSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchCaseLabelSyntax)
  override open func visit(_ node: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CatchClauseSyntax)
  override open func visit(_ node: SwiftSyntax.PoundAssertStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundAssertStmtSyntax)
  override open func visit(_ node: SwiftSyntax.GenericWhereClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  override open func visit(_ node: SwiftSyntax.GenericRequirementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericRequirementListSyntax)
  override open func visit(_ node: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericRequirementSyntax)
  override open func visit(_ node: SwiftSyntax.SameTypeRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SameTypeRequirementSyntax)
  override open func visit(_ node: SwiftSyntax.GenericParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericParameterListSyntax)
  override open func visit(_ node: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericParameterSyntax)
  override open func visit(_ node: SwiftSyntax.GenericParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  override open func visit(_ node: SwiftSyntax.ConformanceRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConformanceRequirementSyntax)
  override open func visit(_ node: SwiftSyntax.SimpleTypeIdentifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SimpleTypeIdentifierSyntax)
  override open func visit(_ node: SwiftSyntax.MemberTypeIdentifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberTypeIdentifierSyntax)
  override open func visit(_ node: SwiftSyntax.ClassRestrictionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClassRestrictionTypeSyntax)
  override open func visit(_ node: SwiftSyntax.ArrayTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrayTypeSyntax)
  override open func visit(_ node: SwiftSyntax.DictionaryTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DictionaryTypeSyntax)
  override open func visit(_ node: SwiftSyntax.MetatypeTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MetatypeTypeSyntax)
  override open func visit(_ node: SwiftSyntax.OptionalTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OptionalTypeSyntax)
  override open func visit(_ node: SwiftSyntax.SomeTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SomeTypeSyntax)
  override open func visit(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax)
  override open func visit(_ node: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CompositionTypeElementSyntax)
  override open func visit(_ node: SwiftSyntax.CompositionTypeElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CompositionTypeElementListSyntax)
  override open func visit(_ node: SwiftSyntax.CompositionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CompositionTypeSyntax)
  override open func visit(_ node: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleTypeElementSyntax)
  override open func visit(_ node: SwiftSyntax.TupleTypeElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleTypeElementListSyntax)
  override open func visit(_ node: SwiftSyntax.TupleTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleTypeSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionTypeSyntax)
  override open func visit(_ node: SwiftSyntax.AttributedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AttributedTypeSyntax)
  override open func visit(_ node: SwiftSyntax.GenericArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.GenericArgumentClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericArgumentClauseSyntax)
  override open func visit(_ node: SwiftSyntax.TypeAnnotationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeAnnotationSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCasePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCasePatternSyntax)
  override open func visit(_ node: SwiftSyntax.IsTypePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IsTypePatternSyntax)
  override open func visit(_ node: SwiftSyntax.OptionalPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OptionalPatternSyntax)
  override open func visit(_ node: SwiftSyntax.IdentifierPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IdentifierPatternSyntax)
  override open func visit(_ node: SwiftSyntax.AsTypePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AsTypePatternSyntax)
  override open func visit(_ node: SwiftSyntax.TuplePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TuplePatternSyntax)
  override open func visit(_ node: SwiftSyntax.WildcardPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.WildcardPatternSyntax)
  override open func visit(_ node: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TuplePatternElementSyntax)
  override open func visit(_ node: SwiftSyntax.ExpressionPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExpressionPatternSyntax)
  override open func visit(_ node: SwiftSyntax.TuplePatternElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TuplePatternElementListSyntax)
  override open func visit(_ node: SwiftSyntax.ValueBindingPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ValueBindingPatternSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilitySpecListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilitySpecListSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilityArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilityVersionRestrictionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilityVersionRestrictionSyntax)
  override open func visit(_ node: SwiftSyntax.VersionTupleSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.VersionTupleSyntax)
  override public init()
  @objc deinit
}
public struct UnknownSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.UnknownSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TokenSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public var presence: SwiftSyntax.SourcePresence {
    get
  }
  public var text: Swift.String {
    get
  }
  public func withKind(_ tokenKind: SwiftSyntax.TokenKind) -> SwiftSyntax.TokenSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TokenSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TokenSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.TokenSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.TokenSyntax
  public func withoutTrivia() -> SwiftSyntax.TokenSyntax
  public var leadingTrivia: SwiftSyntax.Trivia {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia {
    get
    set
  }
  public var tokenKind: SwiftSyntax.TokenKind {
    get
    set
  }
  public var contentLength: SwiftSyntax.SourceLength {
    get
  }
  public var leadingTriviaLength: SwiftSyntax.SourceLength {
    get
  }
  public var trailingTriviaLength: SwiftSyntax.SourceLength {
    get
  }
  public var totalLength: SwiftSyntax.SourceLength {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TokenSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct UnknownExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.UnknownExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct InOutExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var ampersand: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAmpersand(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.InOutExprSyntax
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.InOutExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.InOutExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundColumnExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundColumn: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundColumn(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundColumnExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundColumnExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TryExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var tryKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withTryKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TryExprSyntax
  public var questionOrExclamationMark: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withQuestionOrExclamationMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TryExprSyntax
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.TryExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TryExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AwaitExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var awaitKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAwaitKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AwaitExprSyntax
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.AwaitExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AwaitExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct IdentifierExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IdentifierExprSyntax
  public var declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set(value)
  }
  public func withDeclNameArguments(_ newChild: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.IdentifierExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IdentifierExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SuperRefExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var superKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withSuperKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SuperRefExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SuperRefExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct NilLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var nilKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withNilKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.NilLiteralExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.NilLiteralExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DiscardAssignmentExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var wildcard: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withWildcard(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DiscardAssignmentExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DiscardAssignmentExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AssignmentExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var assignToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAssignToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AssignmentExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AssignmentExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SequenceExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var elements: SwiftSyntax.ExprListSyntax {
    get
    set(value)
  }
  public func addElement(_ element: SwiftSyntax.ExprSyntax) -> SwiftSyntax.SequenceExprSyntax
  public func withElements(_ newChild: SwiftSyntax.ExprListSyntax?) -> SwiftSyntax.SequenceExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SequenceExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundLineExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundLine: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundLine(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundLineExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundLineExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundFileExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundFile: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundFile(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundFileExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundFileExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundFileIDExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundFileID: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundFileID(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundFileIDExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundFileIDExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundFilePathExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundFilePath: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundFilePath(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundFilePathExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundFilePathExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundFunctionExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundFunction: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundFunction(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundFunctionExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundFunctionExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundDsohandleExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundDsohandle: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundDsohandle(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundDsohandleExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundDsohandleExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SymbolicReferenceExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SymbolicReferenceExprSyntax
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set(value)
  }
  public func withGenericArgumentClause(_ newChild: SwiftSyntax.GenericArgumentClauseSyntax?) -> SwiftSyntax.SymbolicReferenceExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SymbolicReferenceExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PrefixOperatorExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var operatorToken: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withOperatorToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrefixOperatorExprSyntax
  public var postfixExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withPostfixExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.PrefixOperatorExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PrefixOperatorExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct BinaryOperatorExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var operatorToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withOperatorToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.BinaryOperatorExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.BinaryOperatorExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ArrowExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var asyncKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAsyncKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrowExprSyntax
  public var throwsToken: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withThrowsToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrowExprSyntax
  public var arrowToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withArrowToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrowExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ArrowExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct FloatLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var floatingDigits: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withFloatingDigits(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FloatLiteralExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FloatLiteralExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TupleExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleExprSyntax
  public var elementList: SwiftSyntax.TupleExprElementListSyntax {
    get
    set(value)
  }
  public func addElement(_ element: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.TupleExprSyntax
  public func withElementList(_ newChild: SwiftSyntax.TupleExprElementListSyntax?) -> SwiftSyntax.TupleExprSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TupleExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ArrayExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftSquare(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrayExprSyntax
  public var elements: SwiftSyntax.ArrayElementListSyntax {
    get
    set(value)
  }
  public func addElement(_ element: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.ArrayExprSyntax
  public func withElements(_ newChild: SwiftSyntax.ArrayElementListSyntax?) -> SwiftSyntax.ArrayExprSyntax
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightSquare(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrayExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ArrayExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DictionaryExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftSquare(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DictionaryExprSyntax
  public var content: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withContent(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.DictionaryExprSyntax
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightSquare(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DictionaryExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DictionaryExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct IntegerLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var digits: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withDigits(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IntegerLiteralExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IntegerLiteralExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct BooleanLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var booleanLiteral: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withBooleanLiteral(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.BooleanLiteralExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.BooleanLiteralExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TernaryExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var conditionExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withConditionExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.TernaryExprSyntax
  public var questionMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withQuestionMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TernaryExprSyntax
  public var firstChoice: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withFirstChoice(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.TernaryExprSyntax
  public var colonMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColonMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TernaryExprSyntax
  public var secondChoice: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withSecondChoice(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.TernaryExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TernaryExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct MemberAccessExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var base: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public func withBase(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.MemberAccessExprSyntax
  public var dot: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withDot(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MemberAccessExprSyntax
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MemberAccessExprSyntax
  public var declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set(value)
  }
  public func withDeclNameArguments(_ newChild: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.MemberAccessExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MemberAccessExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct IsExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var isTok: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIsTok(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IsExprSyntax
  public var typeName: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withTypeName(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.IsExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IsExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AsExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var asTok: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAsTok(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AsExprSyntax
  public var questionOrExclamationMark: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withQuestionOrExclamationMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AsExprSyntax
  public var typeName: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withTypeName(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.AsExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AsExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TypeExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.TypeExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TypeExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ClosureExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureExprSyntax
  public var signature: SwiftSyntax.ClosureSignatureSyntax? {
    get
    set(value)
  }
  public func withSignature(_ newChild: SwiftSyntax.ClosureSignatureSyntax?) -> SwiftSyntax.ClosureExprSyntax
  public var statements: SwiftSyntax.CodeBlockItemListSyntax {
    get
    set(value)
  }
  public func addStatement(_ element: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.ClosureExprSyntax
  public func withStatements(_ newChild: SwiftSyntax.CodeBlockItemListSyntax?) -> SwiftSyntax.ClosureExprSyntax
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClosureExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct UnresolvedPatternExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.UnresolvedPatternExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.UnresolvedPatternExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct FunctionCallExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var calledExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withCalledExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.FunctionCallExprSyntax
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionCallExprSyntax
  public var argumentList: SwiftSyntax.TupleExprElementListSyntax {
    get
    set(value)
  }
  public func addArgument(_ element: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.FunctionCallExprSyntax
  public func withArgumentList(_ newChild: SwiftSyntax.TupleExprElementListSyntax?) -> SwiftSyntax.FunctionCallExprSyntax
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionCallExprSyntax
  public var trailingClosure: SwiftSyntax.ClosureExprSyntax? {
    get
    set(value)
  }
  public func withTrailingClosure(_ newChild: SwiftSyntax.ClosureExprSyntax?) -> SwiftSyntax.FunctionCallExprSyntax
  public var additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax? {
    get
    set(value)
  }
  public func addAdditionalTrailingClosure(_ element: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.FunctionCallExprSyntax
  public func withAdditionalTrailingClosures(_ newChild: SwiftSyntax.MultipleTrailingClosureElementListSyntax?) -> SwiftSyntax.FunctionCallExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FunctionCallExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SubscriptExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var calledExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withCalledExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.SubscriptExprSyntax
  public var leftBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SubscriptExprSyntax
  public var argumentList: SwiftSyntax.TupleExprElementListSyntax {
    get
    set(value)
  }
  public func addArgument(_ element: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.SubscriptExprSyntax
  public func withArgumentList(_ newChild: SwiftSyntax.TupleExprElementListSyntax?) -> SwiftSyntax.SubscriptExprSyntax
  public var rightBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SubscriptExprSyntax
  public var trailingClosure: SwiftSyntax.ClosureExprSyntax? {
    get
    set(value)
  }
  public func withTrailingClosure(_ newChild: SwiftSyntax.ClosureExprSyntax?) -> SwiftSyntax.SubscriptExprSyntax
  public var additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax? {
    get
    set(value)
  }
  public func addAdditionalTrailingClosure(_ element: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.SubscriptExprSyntax
  public func withAdditionalTrailingClosures(_ newChild: SwiftSyntax.MultipleTrailingClosureElementListSyntax?) -> SwiftSyntax.SubscriptExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SubscriptExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct OptionalChainingExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.OptionalChainingExprSyntax
  public var questionMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withQuestionMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.OptionalChainingExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.OptionalChainingExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ForcedValueExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ForcedValueExprSyntax
  public var exclamationMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withExclamationMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ForcedValueExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ForcedValueExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PostfixUnaryExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.PostfixUnaryExprSyntax
  public var operatorToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withOperatorToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PostfixUnaryExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PostfixUnaryExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SpecializeExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.SpecializeExprSyntax
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax {
    get
    set(value)
  }
  public func withGenericArgumentClause(_ newChild: SwiftSyntax.GenericArgumentClauseSyntax?) -> SwiftSyntax.SpecializeExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SpecializeExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct StringLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var openDelimiter: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withOpenDelimiter(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.StringLiteralExprSyntax
  public var openQuote: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withOpenQuote(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.StringLiteralExprSyntax
  public var segments: SwiftSyntax.StringLiteralSegmentsSyntax {
    get
    set(value)
  }
  public func addSegment(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.StringLiteralExprSyntax
  public func withSegments(_ newChild: SwiftSyntax.StringLiteralSegmentsSyntax?) -> SwiftSyntax.StringLiteralExprSyntax
  public var closeQuote: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withCloseQuote(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.StringLiteralExprSyntax
  public var closeDelimiter: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withCloseDelimiter(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.StringLiteralExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.StringLiteralExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct KeyPathExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var backslash: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withBackslash(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.KeyPathExprSyntax
  public var rootExpr: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public func withRootExpr(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.KeyPathExprSyntax
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.KeyPathExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.KeyPathExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct KeyPathBaseExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var period: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPeriod(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.KeyPathBaseExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.KeyPathBaseExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ObjcKeyPathExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var keyPath: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withKeyPath(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcKeyPathExprSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcKeyPathExprSyntax
  public var name: SwiftSyntax.ObjcNameSyntax {
    get
    set(value)
  }
  public func addNamePiece(_ element: SwiftSyntax.ObjcNamePieceSyntax) -> SwiftSyntax.ObjcKeyPathExprSyntax
  public func withName(_ newChild: SwiftSyntax.ObjcNameSyntax?) -> SwiftSyntax.ObjcKeyPathExprSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcKeyPathExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ObjcKeyPathExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ObjcSelectorExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundSelector: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundSelector(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcSelectorExprSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcSelectorExprSyntax
  public var kind: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withKind(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcSelectorExprSyntax
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcSelectorExprSyntax
  public var name: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ObjcSelectorExprSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcSelectorExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ObjcSelectorExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PostfixIfConfigExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var base: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public func withBase(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.PostfixIfConfigExprSyntax
  public var config: SwiftSyntax.IfConfigDeclSyntax {
    get
    set(value)
  }
  public func withConfig(_ newChild: SwiftSyntax.IfConfigDeclSyntax?) -> SwiftSyntax.PostfixIfConfigExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PostfixIfConfigExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct EditorPlaceholderExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EditorPlaceholderExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.EditorPlaceholderExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ObjectLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjectLiteralExprSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjectLiteralExprSyntax
  public var arguments: SwiftSyntax.TupleExprElementListSyntax {
    get
    set(value)
  }
  public func addArgument(_ element: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.ObjectLiteralExprSyntax
  public func withArguments(_ newChild: SwiftSyntax.TupleExprElementListSyntax?) -> SwiftSyntax.ObjectLiteralExprSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjectLiteralExprSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ObjectLiteralExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public protocol IncrementalParseReusedNodeDelegate {
  func parserReusedNode(range: SwiftSyntax.ByteSourceRange, previousNode: SwiftSyntax.SyntaxNode)
}
final public class IncrementalParseReusedNodeCollector : SwiftSyntax.IncrementalParseReusedNodeDelegate {
  final public var rangeAndNodes: [(SwiftSyntax.ByteSourceRange, SwiftSyntax.SyntaxNode)]
  public init()
  final public func parserReusedNode(range: SwiftSyntax.ByteSourceRange, previousNode: SwiftSyntax.SyntaxNode)
  @objc deinit
}
final public class IncrementalParseTransition {
  @available(*, deprecated, message: "Use the initializer taking 'ConcurrentEdits' instead")
  convenience public init(previousTree: SwiftSyntax.SourceFileSyntax, edits: [SwiftSyntax.SourceEdit], reusedNodeDelegate: SwiftSyntax.IncrementalParseReusedNodeDelegate? = nil)
  public init(previousTree: SwiftSyntax.SourceFileSyntax, edits: SwiftSyntax.ConcurrentEdits, reusedNodeDelegate: SwiftSyntax.IncrementalParseReusedNodeDelegate? = nil)
  @objc deinit
}
public struct ConcurrentEdits {
  public let edits: [SwiftSyntax.SourceEdit]
  public init(concurrent: [SwiftSyntax.SourceEdit]) throws
  public init(fromSequential sequentialEdits: [SwiftSyntax.SourceEdit])
  public init(_ single: SwiftSyntax.SourceEdit)
  public static func _isValidConcurrentEditArray(_ edits: [SwiftSyntax.SourceEdit]) -> Swift.Bool
}
public struct SourceLocation : Swift.Hashable, Swift.Codable, Swift.CustomDebugStringConvertible {
  public let offset: Swift.Int
  public var line: Swift.Int? {
    get
  }
  public var column: Swift.Int? {
    get
  }
  public var file: Swift.String? {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public init(line: Swift.Int, column: Swift.Int, offset: Swift.Int, file: Swift.String)
  public init(offset: Swift.Int, converter: SwiftSyntax.SourceLocationConverter? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.SourceLocation, b: SwiftSyntax.SourceLocation) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct SourceRange : Swift.Hashable, Swift.Codable, Swift.CustomDebugStringConvertible {
  public let start: SwiftSyntax.SourceLocation
  public let end: SwiftSyntax.SourceLocation
  public var debugDescription: Swift.String {
    get
  }
  public init(start: SwiftSyntax.SourceLocation, end: SwiftSyntax.SourceLocation)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.SourceRange, b: SwiftSyntax.SourceRange) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
final public class SourceLocationConverter {
  public init(file: Swift.String, tree: SwiftSyntax.SourceFileSyntax)
  public init(file: Swift.String, source: Swift.String)
  final public func location(for origpos: SwiftSyntax.AbsolutePosition) -> SwiftSyntax.SourceLocation
  final public func position(ofLine line: Swift.Int, column: Swift.Int) -> SwiftSyntax.AbsolutePosition
  final public func isValid(position pos: SwiftSyntax.AbsolutePosition) -> Swift.Bool
  final public func isValid(line: Swift.Int, column: Swift.Int) -> Swift.Bool
  @objc deinit
}
extension SwiftSyntax.Syntax {
  public func startLocation(converter: SwiftSyntax.SourceLocationConverter, afterLeadingTrivia: Swift.Bool = true) -> SwiftSyntax.SourceLocation
  public func endLocation(converter: SwiftSyntax.SourceLocationConverter, afterTrailingTrivia: Swift.Bool = false) -> SwiftSyntax.SourceLocation
  public func sourceRange(converter: SwiftSyntax.SourceLocationConverter, afterLeadingTrivia: Swift.Bool = true, afterTrailingTrivia: Swift.Bool = false) -> SwiftSyntax.SourceRange
}
extension SwiftSyntax.SyntaxProtocol {
  public func startLocation(converter: SwiftSyntax.SourceLocationConverter, afterLeadingTrivia: Swift.Bool = true) -> SwiftSyntax.SourceLocation
  public func endLocation(converter: SwiftSyntax.SourceLocationConverter, afterTrailingTrivia: Swift.Bool = false) -> SwiftSyntax.SourceLocation
  public func sourceRange(converter: SwiftSyntax.SourceLocationConverter, afterLeadingTrivia: Swift.Bool = true, afterTrailingTrivia: Swift.Bool = false) -> SwiftSyntax.SourceRange
}
public struct CodeBlockItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var item: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withItem(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.CodeBlockItemSyntax
  public var semicolon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withSemicolon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CodeBlockItemSyntax
  public var errorTokens: SwiftSyntax.Syntax? {
    get
    set(value)
  }
  public func withErrorTokens(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.CodeBlockItemSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CodeBlockItemSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct CodeBlockSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CodeBlockSyntax
  public var statements: SwiftSyntax.CodeBlockItemListSyntax {
    get
    set(value)
  }
  public func addStatement(_ element: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.CodeBlockSyntax
  public func withStatements(_ newChild: SwiftSyntax.CodeBlockItemListSyntax?) -> SwiftSyntax.CodeBlockSyntax
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CodeBlockSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CodeBlockSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DeclNameArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclNameArgumentSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclNameArgumentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeclNameArgumentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DeclNameArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclNameArgumentsSyntax
  public var arguments: SwiftSyntax.DeclNameArgumentListSyntax {
    get
    set(value)
  }
  public func addArgument(_ element: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.DeclNameArgumentsSyntax
  public func withArguments(_ newChild: SwiftSyntax.DeclNameArgumentListSyntax?) -> SwiftSyntax.DeclNameArgumentsSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclNameArgumentsSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeclNameArgumentsSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TupleExprElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var label: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleExprElementSyntax
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleExprElementSyntax
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.TupleExprElementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleExprElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TupleExprElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ArrayElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ArrayElementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrayElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ArrayElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DictionaryElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var keyExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withKeyExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.DictionaryElementSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DictionaryElementSyntax
  public var valueExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withValueExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.DictionaryElementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DictionaryElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DictionaryElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ClosureCaptureItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var specifier: SwiftSyntax.TokenListSyntax? {
    get
    set(value)
  }
  public func addSpecifierToken(_ element: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ClosureCaptureItemSyntax
  public func withSpecifier(_ newChild: SwiftSyntax.TokenListSyntax?) -> SwiftSyntax.ClosureCaptureItemSyntax
  public var name: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureCaptureItemSyntax
  public var assignToken: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAssignToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureCaptureItemSyntax
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ClosureCaptureItemSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureCaptureItemSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClosureCaptureItemSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ClosureCaptureSignatureSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftSquare(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureCaptureSignatureSyntax
  public var items: SwiftSyntax.ClosureCaptureItemListSyntax? {
    get
    set(value)
  }
  public func addItem(_ element: SwiftSyntax.ClosureCaptureItemSyntax) -> SwiftSyntax.ClosureCaptureSignatureSyntax
  public func withItems(_ newChild: SwiftSyntax.ClosureCaptureItemListSyntax?) -> SwiftSyntax.ClosureCaptureSignatureSyntax
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightSquare(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureCaptureSignatureSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClosureCaptureSignatureSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ClosureParamSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureParamSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureParamSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClosureParamSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ClosureSignatureSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ClosureSignatureSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.ClosureSignatureSyntax
  public var capture: SwiftSyntax.ClosureCaptureSignatureSyntax? {
    get
    set(value)
  }
  public func withCapture(_ newChild: SwiftSyntax.ClosureCaptureSignatureSyntax?) -> SwiftSyntax.ClosureSignatureSyntax
  public var input: SwiftSyntax.Syntax? {
    get
    set(value)
  }
  public func withInput(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.ClosureSignatureSyntax
  public var asyncKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAsyncKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureSignatureSyntax
  public var throwsTok: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withThrowsTok(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureSignatureSyntax
  public var output: SwiftSyntax.ReturnClauseSyntax? {
    get
    set(value)
  }
  public func withOutput(_ newChild: SwiftSyntax.ReturnClauseSyntax?) -> SwiftSyntax.ClosureSignatureSyntax
  public var inTok: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withInTok(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureSignatureSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClosureSignatureSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct MultipleTrailingClosureElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MultipleTrailingClosureElementSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MultipleTrailingClosureElementSyntax
  public var closure: SwiftSyntax.ClosureExprSyntax {
    get
    set(value)
  }
  public func withClosure(_ newChild: SwiftSyntax.ClosureExprSyntax?) -> SwiftSyntax.MultipleTrailingClosureElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MultipleTrailingClosureElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct StringSegmentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var content: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withContent(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.StringSegmentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.StringSegmentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ExpressionSegmentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var backslash: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withBackslash(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ExpressionSegmentSyntax
  public var delimiter: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDelimiter(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ExpressionSegmentSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ExpressionSegmentSyntax
  public var expressions: SwiftSyntax.TupleExprElementListSyntax {
    get
    set(value)
  }
  public func addExpression(_ element: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.ExpressionSegmentSyntax
  public func withExpressions(_ newChild: SwiftSyntax.TupleExprElementListSyntax?) -> SwiftSyntax.ExpressionSegmentSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ExpressionSegmentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ExpressionSegmentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ObjcNamePieceSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcNamePieceSyntax
  public var dot: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDot(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcNamePieceSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ObjcNamePieceSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TypeInitializerClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var equal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withEqual(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TypeInitializerClauseSyntax
  public var value: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withValue(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.TypeInitializerClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TypeInitializerClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ParameterClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ParameterClauseSyntax
  public var parameterList: SwiftSyntax.FunctionParameterListSyntax {
    get
    set(value)
  }
  public func addParameter(_ element: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.ParameterClauseSyntax
  public func withParameterList(_ newChild: SwiftSyntax.FunctionParameterListSyntax?) -> SwiftSyntax.ParameterClauseSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ParameterClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ParameterClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ReturnClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var arrow: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withArrow(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ReturnClauseSyntax
  public var returnType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withReturnType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.ReturnClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ReturnClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct FunctionSignatureSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var input: SwiftSyntax.ParameterClauseSyntax {
    get
    set(value)
  }
  public func withInput(_ newChild: SwiftSyntax.ParameterClauseSyntax?) -> SwiftSyntax.FunctionSignatureSyntax
  public var asyncOrReasyncKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAsyncOrReasyncKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionSignatureSyntax
  public var throwsOrRethrowsKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withThrowsOrRethrowsKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionSignatureSyntax
  public var output: SwiftSyntax.ReturnClauseSyntax? {
    get
    set(value)
  }
  public func withOutput(_ newChild: SwiftSyntax.ReturnClauseSyntax?) -> SwiftSyntax.FunctionSignatureSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FunctionSignatureSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct IfConfigClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IfConfigClauseSyntax
  public var condition: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public func withCondition(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.IfConfigClauseSyntax
  public var elements: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withElements(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.IfConfigClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IfConfigClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundSourceLocationArgsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var fileArgLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withFileArgLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public var fileArgColon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withFileArgColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public var fileName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withFileName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public var comma: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public var lineArgLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLineArgLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public var lineArgColon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLineArgColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public var lineNumber: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLineNumber(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundSourceLocationArgsSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DeclModifierSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclModifierSyntax
  public var detailLeftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDetailLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclModifierSyntax
  public var detail: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDetail(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclModifierSyntax
  public var detailRightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDetailRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclModifierSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeclModifierSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct InheritedTypeSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var typeName: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withTypeName(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.InheritedTypeSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.InheritedTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.InheritedTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TypeInheritanceClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TypeInheritanceClauseSyntax
  public var inheritedTypeCollection: SwiftSyntax.InheritedTypeListSyntax {
    get
    set(value)
  }
  public func addInheritedType(_ element: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.TypeInheritanceClauseSyntax
  public func withInheritedTypeCollection(_ newChild: SwiftSyntax.InheritedTypeListSyntax?) -> SwiftSyntax.TypeInheritanceClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TypeInheritanceClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct MemberDeclBlockSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MemberDeclBlockSyntax
  public var members: SwiftSyntax.MemberDeclListSyntax {
    get
    set(value)
  }
  public func addMember(_ element: SwiftSyntax.MemberDeclListItemSyntax) -> SwiftSyntax.MemberDeclBlockSyntax
  public func withMembers(_ newChild: SwiftSyntax.MemberDeclListSyntax?) -> SwiftSyntax.MemberDeclBlockSyntax
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MemberDeclBlockSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MemberDeclBlockSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct MemberDeclListItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var decl: SwiftSyntax.DeclSyntax {
    get
    set(value)
  }
  public func withDecl(_ newChild: SwiftSyntax.DeclSyntax?) -> SwiftSyntax.MemberDeclListItemSyntax
  public var semicolon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withSemicolon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MemberDeclListItemSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MemberDeclListItemSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SourceFileSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var statements: SwiftSyntax.CodeBlockItemListSyntax {
    get
    set(value)
  }
  public func addStatement(_ element: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.SourceFileSyntax
  public func withStatements(_ newChild: SwiftSyntax.CodeBlockItemListSyntax?) -> SwiftSyntax.SourceFileSyntax
  public var eofToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withEOFToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SourceFileSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SourceFileSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct InitializerClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var equal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withEqual(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.InitializerClauseSyntax
  public var value: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withValue(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.InitializerClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.InitializerClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct FunctionParameterSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.FunctionParameterSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public var firstName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withFirstName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public var secondName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withSecondName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public var type: SwiftSyntax.TypeSyntax? {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public var ellipsis: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withEllipsis(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public var defaultArgument: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public func withDefaultArgument(_ newChild: SwiftSyntax.InitializerClauseSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FunctionParameterSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AccessLevelModifierSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessLevelModifierSyntax
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessLevelModifierSyntax
  public var modifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withModifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessLevelModifierSyntax
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessLevelModifierSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AccessLevelModifierSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AccessPathComponentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessPathComponentSyntax
  public var trailingDot: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingDot(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessPathComponentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AccessPathComponentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AccessorParameterSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessorParameterSyntax
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessorParameterSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessorParameterSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AccessorParameterSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AccessorBlockSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessorBlockSyntax
  public var accessors: SwiftSyntax.AccessorListSyntax {
    get
    set(value)
  }
  public func addAccessor(_ element: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.AccessorBlockSyntax
  public func withAccessors(_ newChild: SwiftSyntax.AccessorListSyntax?) -> SwiftSyntax.AccessorBlockSyntax
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessorBlockSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AccessorBlockSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PatternBindingSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.PatternBindingSyntax
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public func withTypeAnnotation(_ newChild: SwiftSyntax.TypeAnnotationSyntax?) -> SwiftSyntax.PatternBindingSyntax
  public var initializer: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public func withInitializer(_ newChild: SwiftSyntax.InitializerClauseSyntax?) -> SwiftSyntax.PatternBindingSyntax
  public var accessor: SwiftSyntax.Syntax? {
    get
    set(value)
  }
  public func withAccessor(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.PatternBindingSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PatternBindingSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PatternBindingSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct EnumCaseElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EnumCaseElementSyntax
  public var associatedValue: SwiftSyntax.ParameterClauseSyntax? {
    get
    set(value)
  }
  public func withAssociatedValue(_ newChild: SwiftSyntax.ParameterClauseSyntax?) -> SwiftSyntax.EnumCaseElementSyntax
  public var rawValue: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public func withRawValue(_ newChild: SwiftSyntax.InitializerClauseSyntax?) -> SwiftSyntax.EnumCaseElementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EnumCaseElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.EnumCaseElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct OperatorPrecedenceAndTypesSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.OperatorPrecedenceAndTypesSyntax
  public var precedenceGroupAndDesignatedTypes: SwiftSyntax.IdentifierListSyntax {
    get
    set(value)
  }
  public func addPrecedenceGroupAndDesignatedType(_ element: SwiftSyntax.TokenSyntax) -> SwiftSyntax.OperatorPrecedenceAndTypesSyntax
  public func withPrecedenceGroupAndDesignatedTypes(_ newChild: SwiftSyntax.IdentifierListSyntax?) -> SwiftSyntax.OperatorPrecedenceAndTypesSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.OperatorPrecedenceAndTypesSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PrecedenceGroupRelationSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var higherThanOrLowerThan: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withHigherThanOrLowerThan(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupRelationSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupRelationSyntax
  public var otherNames: SwiftSyntax.PrecedenceGroupNameListSyntax {
    get
    set(value)
  }
  public func addOtherName(_ element: SwiftSyntax.PrecedenceGroupNameElementSyntax) -> SwiftSyntax.PrecedenceGroupRelationSyntax
  public func withOtherNames(_ newChild: SwiftSyntax.PrecedenceGroupNameListSyntax?) -> SwiftSyntax.PrecedenceGroupRelationSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupRelationSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PrecedenceGroupNameElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupNameElementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupNameElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupNameElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PrecedenceGroupAssignmentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var assignmentKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAssignmentKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupAssignmentSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupAssignmentSyntax
  public var flag: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withFlag(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupAssignmentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupAssignmentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PrecedenceGroupAssociativitySyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var associativityKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAssociativityKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupAssociativitySyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupAssociativitySyntax
  public var value: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withValue(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupAssociativitySyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupAssociativitySyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct CustomAttributeSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var atSignToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAtSignToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CustomAttributeSyntax
  public var attributeName: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withAttributeName(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.CustomAttributeSyntax
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CustomAttributeSyntax
  public var argumentList: SwiftSyntax.TupleExprElementListSyntax? {
    get
    set(value)
  }
  public func addArgument(_ element: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.CustomAttributeSyntax
  public func withArgumentList(_ newChild: SwiftSyntax.TupleExprElementListSyntax?) -> SwiftSyntax.CustomAttributeSyntax
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CustomAttributeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CustomAttributeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AttributeSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var atSignToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAtSignToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AttributeSyntax
  public var attributeName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAttributeName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AttributeSyntax
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AttributeSyntax
  public var argument: SwiftSyntax.Syntax? {
    get
    set(value)
  }
  public func withArgument(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.AttributeSyntax
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AttributeSyntax
  public var tokenList: SwiftSyntax.TokenListSyntax? {
    get
    set(value)
  }
  public func addToken(_ element: SwiftSyntax.TokenSyntax) -> SwiftSyntax.AttributeSyntax
  public func withTokenList(_ newChild: SwiftSyntax.TokenListSyntax?) -> SwiftSyntax.AttributeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AttributeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct LabeledSpecializeEntrySyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.LabeledSpecializeEntrySyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.LabeledSpecializeEntrySyntax
  public var value: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withValue(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.LabeledSpecializeEntrySyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.LabeledSpecializeEntrySyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.LabeledSpecializeEntrySyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TargetFunctionEntrySyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TargetFunctionEntrySyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TargetFunctionEntrySyntax
  public var delcname: SwiftSyntax.DeclNameSyntax {
    get
    set(value)
  }
  public func withDelcname(_ newChild: SwiftSyntax.DeclNameSyntax?) -> SwiftSyntax.TargetFunctionEntrySyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TargetFunctionEntrySyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TargetFunctionEntrySyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct NamedAttributeStringArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var nameTok: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withNameTok(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.NamedAttributeStringArgumentSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.NamedAttributeStringArgumentSyntax
  public var stringOrDeclname: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withStringOrDeclname(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.NamedAttributeStringArgumentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.NamedAttributeStringArgumentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DeclNameSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var declBaseName: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withDeclBaseName(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.DeclNameSyntax
  public var declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set(value)
  }
  public func withDeclNameArguments(_ newChild: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.DeclNameSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeclNameSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ImplementsAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var type: SwiftSyntax.SimpleTypeIdentifierSyntax {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.SimpleTypeIdentifierSyntax?) -> SwiftSyntax.ImplementsAttributeArgumentsSyntax
  public var comma: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ImplementsAttributeArgumentsSyntax
  public var declBaseName: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withDeclBaseName(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.ImplementsAttributeArgumentsSyntax
  public var declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set(value)
  }
  public func withDeclNameArguments(_ newChild: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.ImplementsAttributeArgumentsSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ImplementsAttributeArgumentsSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ObjCSelectorPieceSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjCSelectorPieceSyntax
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjCSelectorPieceSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ObjCSelectorPieceSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DifferentiableAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var diffKind: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDiffKind(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiableAttributeArgumentsSyntax
  public var diffKindComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDiffKindComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiableAttributeArgumentsSyntax
  public var diffParams: SwiftSyntax.DifferentiabilityParamsClauseSyntax? {
    get
    set(value)
  }
  public func withDiffParams(_ newChild: SwiftSyntax.DifferentiabilityParamsClauseSyntax?) -> SwiftSyntax.DifferentiableAttributeArgumentsSyntax
  public var diffParamsComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDiffParamsComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiableAttributeArgumentsSyntax
  public var whereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.DifferentiableAttributeArgumentsSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DifferentiableAttributeArgumentsSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DifferentiabilityParamsClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var wrtLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withWrtLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiabilityParamsClauseSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiabilityParamsClauseSyntax
  public var parameters: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withParameters(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.DifferentiabilityParamsClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DifferentiabilityParamsClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DifferentiabilityParamsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiabilityParamsSyntax
  public var diffParams: SwiftSyntax.DifferentiabilityParamListSyntax {
    get
    set(value)
  }
  public func addDifferentiabilityParam(_ element: SwiftSyntax.DifferentiabilityParamSyntax) -> SwiftSyntax.DifferentiabilityParamsSyntax
  public func withDiffParams(_ newChild: SwiftSyntax.DifferentiabilityParamListSyntax?) -> SwiftSyntax.DifferentiabilityParamsSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiabilityParamsSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DifferentiabilityParamsSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DifferentiabilityParamSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var parameter: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withParameter(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.DifferentiabilityParamSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiabilityParamSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DifferentiabilityParamSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DerivativeRegistrationAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var ofLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withOfLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public var originalDeclName: SwiftSyntax.QualifiedDeclNameSyntax {
    get
    set(value)
  }
  public func withOriginalDeclName(_ newChild: SwiftSyntax.QualifiedDeclNameSyntax?) -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public var period: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withPeriod(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public var accessorKind: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAccessorKind(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public var comma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public var diffParams: SwiftSyntax.DifferentiabilityParamsClauseSyntax? {
    get
    set(value)
  }
  public func withDiffParams(_ newChild: SwiftSyntax.DifferentiabilityParamsClauseSyntax?) -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct QualifiedDeclNameSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var baseType: SwiftSyntax.TypeSyntax? {
    get
    set(value)
  }
  public func withBaseType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.QualifiedDeclNameSyntax
  public var dot: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withDot(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.QualifiedDeclNameSyntax
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.QualifiedDeclNameSyntax
  public var arguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set(value)
  }
  public func withArguments(_ newChild: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.QualifiedDeclNameSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.QualifiedDeclNameSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct FunctionDeclNameSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.FunctionDeclNameSyntax
  public var arguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set(value)
  }
  public func withArguments(_ newChild: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.FunctionDeclNameSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FunctionDeclNameSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct WhereClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var whereKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withWhereKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.WhereClauseSyntax
  public var guardResult: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withGuardResult(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.WhereClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.WhereClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct YieldListSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.YieldListSyntax
  public var elementList: SwiftSyntax.ExprListSyntax {
    get
    set(value)
  }
  public func addElement(_ element: SwiftSyntax.ExprSyntax) -> SwiftSyntax.YieldListSyntax
  public func withElementList(_ newChild: SwiftSyntax.ExprListSyntax?) -> SwiftSyntax.YieldListSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.YieldListSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.YieldListSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.YieldListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ConditionElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var condition: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withCondition(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.ConditionElementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ConditionElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ConditionElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AvailabilityConditionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundAvailableKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundAvailableKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AvailabilityConditionSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AvailabilityConditionSyntax
  public var availabilitySpec: SwiftSyntax.AvailabilitySpecListSyntax {
    get
    set(value)
  }
  public func addAvailabilityArgument(_ element: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.AvailabilityConditionSyntax
  public func withAvailabilitySpec(_ newChild: SwiftSyntax.AvailabilitySpecListSyntax?) -> SwiftSyntax.AvailabilityConditionSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AvailabilityConditionSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AvailabilityConditionSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct MatchingPatternConditionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var caseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withCaseKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MatchingPatternConditionSyntax
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.MatchingPatternConditionSyntax
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public func withTypeAnnotation(_ newChild: SwiftSyntax.TypeAnnotationSyntax?) -> SwiftSyntax.MatchingPatternConditionSyntax
  public var initializer: SwiftSyntax.InitializerClauseSyntax {
    get
    set(value)
  }
  public func withInitializer(_ newChild: SwiftSyntax.InitializerClauseSyntax?) -> SwiftSyntax.MatchingPatternConditionSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MatchingPatternConditionSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct OptionalBindingConditionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var letOrVarKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLetOrVarKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.OptionalBindingConditionSyntax
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.OptionalBindingConditionSyntax
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public func withTypeAnnotation(_ newChild: SwiftSyntax.TypeAnnotationSyntax?) -> SwiftSyntax.OptionalBindingConditionSyntax
  public var initializer: SwiftSyntax.InitializerClauseSyntax {
    get
    set(value)
  }
  public func withInitializer(_ newChild: SwiftSyntax.InitializerClauseSyntax?) -> SwiftSyntax.OptionalBindingConditionSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.OptionalBindingConditionSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ElseIfContinuationSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var ifStatement: SwiftSyntax.IfStmtSyntax {
    get
    set(value)
  }
  public func withIfStatement(_ newChild: SwiftSyntax.IfStmtSyntax?) -> SwiftSyntax.ElseIfContinuationSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ElseIfContinuationSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ElseBlockSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var elseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withElseKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ElseBlockSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.ElseBlockSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ElseBlockSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SwitchCaseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var unknownAttr: SwiftSyntax.AttributeSyntax? {
    get
    set(value)
  }
  public func withUnknownAttr(_ newChild: SwiftSyntax.AttributeSyntax?) -> SwiftSyntax.SwitchCaseSyntax
  public var label: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withLabel(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.SwitchCaseSyntax
  public var statements: SwiftSyntax.CodeBlockItemListSyntax {
    get
    set(value)
  }
  public func addStatement(_ element: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.SwitchCaseSyntax
  public func withStatements(_ newChild: SwiftSyntax.CodeBlockItemListSyntax?) -> SwiftSyntax.SwitchCaseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SwitchCaseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SwitchDefaultLabelSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var defaultKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withDefaultKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchDefaultLabelSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchDefaultLabelSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SwitchDefaultLabelSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct CaseItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.CaseItemSyntax
  public var whereClause: SwiftSyntax.WhereClauseSyntax? {
    get
    set(value)
  }
  public func withWhereClause(_ newChild: SwiftSyntax.WhereClauseSyntax?) -> SwiftSyntax.CaseItemSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CaseItemSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CaseItemSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct CatchItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var pattern: SwiftSyntax.PatternSyntax? {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.CatchItemSyntax
  public var whereClause: SwiftSyntax.WhereClauseSyntax? {
    get
    set(value)
  }
  public func withWhereClause(_ newChild: SwiftSyntax.WhereClauseSyntax?) -> SwiftSyntax.CatchItemSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CatchItemSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CatchItemSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SwitchCaseLabelSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var caseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withCaseKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchCaseLabelSyntax
  public var caseItems: SwiftSyntax.CaseItemListSyntax {
    get
    set(value)
  }
  public func addCaseItem(_ element: SwiftSyntax.CaseItemSyntax) -> SwiftSyntax.SwitchCaseLabelSyntax
  public func withCaseItems(_ newChild: SwiftSyntax.CaseItemListSyntax?) -> SwiftSyntax.SwitchCaseLabelSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchCaseLabelSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SwitchCaseLabelSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct CatchClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var catchKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withCatchKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CatchClauseSyntax
  public var catchItems: SwiftSyntax.CatchItemListSyntax? {
    get
    set(value)
  }
  public func addCatchItem(_ element: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.CatchClauseSyntax
  public func withCatchItems(_ newChild: SwiftSyntax.CatchItemListSyntax?) -> SwiftSyntax.CatchClauseSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.CatchClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CatchClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct GenericWhereClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var whereKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withWhereKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericWhereClauseSyntax
  public var requirementList: SwiftSyntax.GenericRequirementListSyntax {
    get
    set(value)
  }
  public func addRequirement(_ element: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.GenericWhereClauseSyntax
  public func withRequirementList(_ newChild: SwiftSyntax.GenericRequirementListSyntax?) -> SwiftSyntax.GenericWhereClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericWhereClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct GenericRequirementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var body: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.GenericRequirementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericRequirementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericRequirementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SameTypeRequirementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftTypeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withLeftTypeIdentifier(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.SameTypeRequirementSyntax
  public var equalityToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withEqualityToken(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SameTypeRequirementSyntax
  public var rightTypeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withRightTypeIdentifier(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.SameTypeRequirementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SameTypeRequirementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct GenericParameterSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.GenericParameterSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.GenericParameterSyntax
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericParameterSyntax
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericParameterSyntax
  public var inheritedType: SwiftSyntax.TypeSyntax? {
    get
    set(value)
  }
  public func withInheritedType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.GenericParameterSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericParameterSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericParameterSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct GenericParameterClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftAngleBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericParameterClauseSyntax
  public var genericParameterList: SwiftSyntax.GenericParameterListSyntax {
    get
    set(value)
  }
  public func addGenericParameter(_ element: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.GenericParameterClauseSyntax
  public func withGenericParameterList(_ newChild: SwiftSyntax.GenericParameterListSyntax?) -> SwiftSyntax.GenericParameterClauseSyntax
  public var rightAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightAngleBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericParameterClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericParameterClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ConformanceRequirementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftTypeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withLeftTypeIdentifier(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.ConformanceRequirementSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ConformanceRequirementSyntax
  public var rightTypeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withRightTypeIdentifier(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.ConformanceRequirementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ConformanceRequirementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct CompositionTypeElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.CompositionTypeElementSyntax
  public var ampersand: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAmpersand(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CompositionTypeElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CompositionTypeElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TupleTypeElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var inOut: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withInOut(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public var name: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public var secondName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withSecondName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public var ellipsis: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withEllipsis(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public var initializer: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public func withInitializer(_ newChild: SwiftSyntax.InitializerClauseSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TupleTypeElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct GenericArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var argumentType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withArgumentType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.GenericArgumentSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericArgumentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericArgumentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct GenericArgumentClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftAngleBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericArgumentClauseSyntax
  public var arguments: SwiftSyntax.GenericArgumentListSyntax {
    get
    set(value)
  }
  public func addArgument(_ element: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.GenericArgumentClauseSyntax
  public func withArguments(_ newChild: SwiftSyntax.GenericArgumentListSyntax?) -> SwiftSyntax.GenericArgumentClauseSyntax
  public var rightAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightAngleBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericArgumentClauseSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericArgumentClauseSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TypeAnnotationSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TypeAnnotationSyntax
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.TypeAnnotationSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TypeAnnotationSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TuplePatternElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var labelName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TuplePatternElementSyntax
  public var labelColon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TuplePatternElementSyntax
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.TuplePatternElementSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TuplePatternElementSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TuplePatternElementSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AvailabilityArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var entry: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withEntry(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.AvailabilityArgumentSyntax
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AvailabilityArgumentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AvailabilityArgumentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AvailabilityLabeledArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AvailabilityLabeledArgumentSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AvailabilityLabeledArgumentSyntax
  public var value: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withValue(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.AvailabilityLabeledArgumentSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AvailabilityLabeledArgumentSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AvailabilityVersionRestrictionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var platform: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPlatform(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AvailabilityVersionRestrictionSyntax
  public var version: SwiftSyntax.VersionTupleSyntax? {
    get
    set(value)
  }
  public func withVersion(_ newChild: SwiftSyntax.VersionTupleSyntax?) -> SwiftSyntax.AvailabilityVersionRestrictionSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AvailabilityVersionRestrictionSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct VersionTupleSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var majorMinor: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withMajorMinor(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.VersionTupleSyntax
  public var patchPeriod: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withPatchPeriod(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.VersionTupleSyntax
  public var patchVersion: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withPatchVersion(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.VersionTupleSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.VersionTupleSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SyntaxChildrenIndexData : Swift.Comparable {
  public static func < (lhs: SwiftSyntax.SyntaxChildrenIndexData, rhs: SwiftSyntax.SyntaxChildrenIndexData) -> Swift.Bool
  public static func == (a: SwiftSyntax.SyntaxChildrenIndexData, b: SwiftSyntax.SyntaxChildrenIndexData) -> Swift.Bool
}
public struct SyntaxChildrenIndex : Swift.Comparable, Swift.ExpressibleByNilLiteral {
  public init(nilLiteral: ())
  public static func < (lhs: SwiftSyntax.SyntaxChildrenIndex, rhs: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Bool
  public static func == (a: SwiftSyntax.SyntaxChildrenIndex, b: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Bool
}
public struct SyntaxChildren : Swift.BidirectionalCollection {
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Element = SwiftSyntax.Syntax
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.Syntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.SyntaxChildren>
  public typealias Iterator = Swift.IndexingIterator<SwiftSyntax.SyntaxChildren>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.SyntaxChildren>
}
public enum TokenKind {
  case eof
  case associatedtypeKeyword
  case classKeyword
  case deinitKeyword
  case enumKeyword
  case extensionKeyword
  case funcKeyword
  case importKeyword
  case initKeyword
  case inoutKeyword
  case letKeyword
  case operatorKeyword
  case precedencegroupKeyword
  case protocolKeyword
  case structKeyword
  case subscriptKeyword
  case typealiasKeyword
  case varKeyword
  case fileprivateKeyword
  case internalKeyword
  case privateKeyword
  case publicKeyword
  case staticKeyword
  case deferKeyword
  case ifKeyword
  case guardKeyword
  case doKeyword
  case repeatKeyword
  case elseKeyword
  case forKeyword
  case inKeyword
  case whileKeyword
  case returnKeyword
  case breakKeyword
  case continueKeyword
  case fallthroughKeyword
  case switchKeyword
  case caseKeyword
  case defaultKeyword
  case whereKeyword
  case catchKeyword
  case throwKeyword
  case asKeyword
  case anyKeyword
  case falseKeyword
  case isKeyword
  case nilKeyword
  case rethrowsKeyword
  case superKeyword
  case selfKeyword
  case capitalSelfKeyword
  case trueKeyword
  case tryKeyword
  case throwsKeyword
  case __file__Keyword
  case __line__Keyword
  case __column__Keyword
  case __function__Keyword
  case __dso_handle__Keyword
  case wildcardKeyword
  case leftParen
  case rightParen
  case leftBrace
  case rightBrace
  case leftSquareBracket
  case rightSquareBracket
  case leftAngle
  case rightAngle
  case period
  case prefixPeriod
  case comma
  case ellipsis
  case colon
  case semicolon
  case equal
  case atSign
  case pound
  case prefixAmpersand
  case arrow
  case backtick
  case backslash
  case exclamationMark
  case postfixQuestionMark
  case infixQuestionMark
  case stringQuote
  case singleQuote
  case multilineStringQuote
  case poundKeyPathKeyword
  case poundLineKeyword
  case poundSelectorKeyword
  case poundFileKeyword
  case poundFileIDKeyword
  case poundFilePathKeyword
  case poundColumnKeyword
  case poundFunctionKeyword
  case poundDsohandleKeyword
  case poundAssertKeyword
  case poundSourceLocationKeyword
  case poundWarningKeyword
  case poundErrorKeyword
  case poundIfKeyword
  case poundElseKeyword
  case poundElseifKeyword
  case poundEndifKeyword
  case poundAvailableKeyword
  case poundFileLiteralKeyword
  case poundImageLiteralKeyword
  case poundColorLiteralKeyword
  case integerLiteral(Swift.String)
  case floatingLiteral(Swift.String)
  case stringLiteral(Swift.String)
  case unknown(Swift.String)
  case identifier(Swift.String)
  case unspacedBinaryOperator(Swift.String)
  case spacedBinaryOperator(Swift.String)
  case postfixOperator(Swift.String)
  case prefixOperator(Swift.String)
  case dollarIdentifier(Swift.String)
  case contextualKeyword(Swift.String)
  case rawStringDelimiter(Swift.String)
  case stringSegment(Swift.String)
  case stringInterpolationAnchor
  case yield
  public var isKeyword: Swift.Bool {
    get
  }
}
extension SwiftSyntax.TokenKind : Swift.Equatable {
  public static func == (lhs: SwiftSyntax.TokenKind, rhs: SwiftSyntax.TokenKind) -> Swift.Bool
}
public protocol DeclGroupSyntax : SwiftSyntax.SyntaxProtocol {
  var attributes: SwiftSyntax.AttributeListSyntax? { get }
  func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> Self
  var modifiers: SwiftSyntax.ModifierListSyntax? { get }
  func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> Self
  var members: SwiftSyntax.MemberDeclBlockSyntax { get }
  func withMembers(_ newChild: SwiftSyntax.MemberDeclBlockSyntax?) -> Self
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: SwiftSyntax.DeclGroupSyntax.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.DeclGroupSyntax.Protocol) -> SwiftSyntax.DeclGroupSyntax?
}
public protocol BracedSyntax : SwiftSyntax.SyntaxProtocol {
  var leftBrace: SwiftSyntax.TokenSyntax { get }
  func withLeftBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> Self
  var rightBrace: SwiftSyntax.TokenSyntax { get }
  func withRightBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> Self
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: SwiftSyntax.BracedSyntax.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.BracedSyntax.Protocol) -> SwiftSyntax.BracedSyntax?
}
public protocol IdentifiedDeclSyntax : SwiftSyntax.SyntaxProtocol {
  var identifier: SwiftSyntax.TokenSyntax { get }
  func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> Self
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: SwiftSyntax.IdentifiedDeclSyntax.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.IdentifiedDeclSyntax.Protocol) -> SwiftSyntax.IdentifiedDeclSyntax?
}
public protocol WithCodeBlockSyntax : SwiftSyntax.SyntaxProtocol {
  var body: SwiftSyntax.CodeBlockSyntax { get }
  func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> Self
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: SwiftSyntax.WithCodeBlockSyntax.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.WithCodeBlockSyntax.Protocol) -> SwiftSyntax.WithCodeBlockSyntax?
}
public protocol ParenthesizedSyntax : SwiftSyntax.SyntaxProtocol {
  var leftParen: SwiftSyntax.TokenSyntax { get }
  func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> Self
  var rightParen: SwiftSyntax.TokenSyntax { get }
  func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> Self
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: SwiftSyntax.ParenthesizedSyntax.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.ParenthesizedSyntax.Protocol) -> SwiftSyntax.ParenthesizedSyntax?
}
public protocol WithTrailingCommaSyntax : SwiftSyntax.SyntaxProtocol {
  var trailingComma: SwiftSyntax.TokenSyntax? { get }
  func withTrailingComma(_ newChild: SwiftSyntax.TokenSyntax?) -> Self
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: SwiftSyntax.WithTrailingCommaSyntax.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.WithTrailingCommaSyntax.Protocol) -> SwiftSyntax.WithTrailingCommaSyntax?
}
public protocol LabeledSyntax : SwiftSyntax.SyntaxProtocol {
  var labelName: SwiftSyntax.TokenSyntax? { get }
  func withLabelName(_ newChild: SwiftSyntax.TokenSyntax?) -> Self
  var labelColon: SwiftSyntax.TokenSyntax? { get }
  func withLabelColon(_ newChild: SwiftSyntax.TokenSyntax?) -> Self
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: SwiftSyntax.LabeledSyntax.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.LabeledSyntax.Protocol) -> SwiftSyntax.LabeledSyntax?
}
public protocol WithStatementsSyntax : SwiftSyntax.SyntaxProtocol {
  var statements: SwiftSyntax.CodeBlockItemListSyntax { get }
  func withStatements(_ newChild: SwiftSyntax.CodeBlockItemListSyntax?) -> Self
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: SwiftSyntax.WithStatementsSyntax.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.WithStatementsSyntax.Protocol) -> SwiftSyntax.WithStatementsSyntax?
}
extension SwiftSyntax.CodeBlockSyntax : SwiftSyntax.BracedSyntax, SwiftSyntax.WithStatementsSyntax {
}
extension SwiftSyntax.DeclNameArgumentsSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.TupleExprSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.TupleExprElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ArrayElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.DictionaryElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ClosureCaptureItemSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ClosureParamSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ClosureExprSyntax : SwiftSyntax.BracedSyntax, SwiftSyntax.WithStatementsSyntax {
}
extension SwiftSyntax.ExpressionSegmentSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.ObjcKeyPathExprSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.ObjcSelectorExprSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.ObjectLiteralExprSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.TypealiasDeclSyntax : SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.AssociatedtypeDeclSyntax : SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.ParameterClauseSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.PoundErrorDeclSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.PoundWarningDeclSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.PoundSourceLocationSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.InheritedTypeSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ClassDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.StructDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.ProtocolDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.ExtensionDeclSyntax : SwiftSyntax.DeclGroupSyntax {
}
extension SwiftSyntax.MemberDeclBlockSyntax : SwiftSyntax.BracedSyntax {
}
extension SwiftSyntax.SourceFileSyntax : SwiftSyntax.WithStatementsSyntax {
}
extension SwiftSyntax.FunctionParameterSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.FunctionDeclSyntax : SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.AccessorParameterSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.AccessorBlockSyntax : SwiftSyntax.BracedSyntax {
}
extension SwiftSyntax.PatternBindingSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.EnumCaseElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.EnumDeclSyntax : SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.OperatorDeclSyntax : SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.PrecedenceGroupDeclSyntax : SwiftSyntax.IdentifiedDeclSyntax {
}
extension SwiftSyntax.LabeledSpecializeEntrySyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.TargetFunctionEntrySyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.DifferentiabilityParamSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.WhileStmtSyntax : SwiftSyntax.WithCodeBlockSyntax, SwiftSyntax.LabeledSyntax {
}
extension SwiftSyntax.DeferStmtSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.RepeatWhileStmtSyntax : SwiftSyntax.WithCodeBlockSyntax, SwiftSyntax.LabeledSyntax {
}
extension SwiftSyntax.GuardStmtSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.ForInStmtSyntax : SwiftSyntax.WithCodeBlockSyntax, SwiftSyntax.LabeledSyntax {
}
extension SwiftSyntax.SwitchStmtSyntax : SwiftSyntax.BracedSyntax, SwiftSyntax.LabeledSyntax {
}
extension SwiftSyntax.DoStmtSyntax : SwiftSyntax.WithCodeBlockSyntax, SwiftSyntax.LabeledSyntax {
}
extension SwiftSyntax.ConditionElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.IfStmtSyntax : SwiftSyntax.WithCodeBlockSyntax, SwiftSyntax.LabeledSyntax {
}
extension SwiftSyntax.ElseBlockSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.SwitchCaseSyntax : SwiftSyntax.WithStatementsSyntax {
}
extension SwiftSyntax.CaseItemSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.CatchItemSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.CatchClauseSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.GenericRequirementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.GenericParameterSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.TupleTypeElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.TupleTypeSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.FunctionTypeSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.GenericArgumentSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.TuplePatternSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.TuplePatternElementSyntax : SwiftSyntax.WithTrailingCommaSyntax, SwiftSyntax.LabeledSyntax {
}
public enum SyntaxEnum {
  case unknown(SwiftSyntax.UnknownSyntax)
  case token(SwiftSyntax.TokenSyntax)
  case decl(SwiftSyntax.UnknownDeclSyntax)
  case expr(SwiftSyntax.UnknownExprSyntax)
  case stmt(SwiftSyntax.UnknownStmtSyntax)
  case type(SwiftSyntax.UnknownTypeSyntax)
  case pattern(SwiftSyntax.UnknownPatternSyntax)
  case unknownDecl(SwiftSyntax.UnknownDeclSyntax)
  case unknownExpr(SwiftSyntax.UnknownExprSyntax)
  case unknownStmt(SwiftSyntax.UnknownStmtSyntax)
  case unknownType(SwiftSyntax.UnknownTypeSyntax)
  case unknownPattern(SwiftSyntax.UnknownPatternSyntax)
  case codeBlockItem(SwiftSyntax.CodeBlockItemSyntax)
  case codeBlockItemList(SwiftSyntax.CodeBlockItemListSyntax)
  case codeBlock(SwiftSyntax.CodeBlockSyntax)
  case inOutExpr(SwiftSyntax.InOutExprSyntax)
  case poundColumnExpr(SwiftSyntax.PoundColumnExprSyntax)
  case tupleExprElementList(SwiftSyntax.TupleExprElementListSyntax)
  case arrayElementList(SwiftSyntax.ArrayElementListSyntax)
  case dictionaryElementList(SwiftSyntax.DictionaryElementListSyntax)
  case stringLiteralSegments(SwiftSyntax.StringLiteralSegmentsSyntax)
  case tryExpr(SwiftSyntax.TryExprSyntax)
  case awaitExpr(SwiftSyntax.AwaitExprSyntax)
  case declNameArgument(SwiftSyntax.DeclNameArgumentSyntax)
  case declNameArgumentList(SwiftSyntax.DeclNameArgumentListSyntax)
  case declNameArguments(SwiftSyntax.DeclNameArgumentsSyntax)
  case identifierExpr(SwiftSyntax.IdentifierExprSyntax)
  case superRefExpr(SwiftSyntax.SuperRefExprSyntax)
  case nilLiteralExpr(SwiftSyntax.NilLiteralExprSyntax)
  case discardAssignmentExpr(SwiftSyntax.DiscardAssignmentExprSyntax)
  case assignmentExpr(SwiftSyntax.AssignmentExprSyntax)
  case sequenceExpr(SwiftSyntax.SequenceExprSyntax)
  case exprList(SwiftSyntax.ExprListSyntax)
  case poundLineExpr(SwiftSyntax.PoundLineExprSyntax)
  case poundFileExpr(SwiftSyntax.PoundFileExprSyntax)
  case poundFileIDExpr(SwiftSyntax.PoundFileIDExprSyntax)
  case poundFilePathExpr(SwiftSyntax.PoundFilePathExprSyntax)
  case poundFunctionExpr(SwiftSyntax.PoundFunctionExprSyntax)
  case poundDsohandleExpr(SwiftSyntax.PoundDsohandleExprSyntax)
  case symbolicReferenceExpr(SwiftSyntax.SymbolicReferenceExprSyntax)
  case prefixOperatorExpr(SwiftSyntax.PrefixOperatorExprSyntax)
  case binaryOperatorExpr(SwiftSyntax.BinaryOperatorExprSyntax)
  case arrowExpr(SwiftSyntax.ArrowExprSyntax)
  case floatLiteralExpr(SwiftSyntax.FloatLiteralExprSyntax)
  case tupleExpr(SwiftSyntax.TupleExprSyntax)
  case arrayExpr(SwiftSyntax.ArrayExprSyntax)
  case dictionaryExpr(SwiftSyntax.DictionaryExprSyntax)
  case tupleExprElement(SwiftSyntax.TupleExprElementSyntax)
  case arrayElement(SwiftSyntax.ArrayElementSyntax)
  case dictionaryElement(SwiftSyntax.DictionaryElementSyntax)
  case integerLiteralExpr(SwiftSyntax.IntegerLiteralExprSyntax)
  case booleanLiteralExpr(SwiftSyntax.BooleanLiteralExprSyntax)
  case ternaryExpr(SwiftSyntax.TernaryExprSyntax)
  case memberAccessExpr(SwiftSyntax.MemberAccessExprSyntax)
  case isExpr(SwiftSyntax.IsExprSyntax)
  case asExpr(SwiftSyntax.AsExprSyntax)
  case typeExpr(SwiftSyntax.TypeExprSyntax)
  case closureCaptureItem(SwiftSyntax.ClosureCaptureItemSyntax)
  case closureCaptureItemList(SwiftSyntax.ClosureCaptureItemListSyntax)
  case closureCaptureSignature(SwiftSyntax.ClosureCaptureSignatureSyntax)
  case closureParam(SwiftSyntax.ClosureParamSyntax)
  case closureParamList(SwiftSyntax.ClosureParamListSyntax)
  case closureSignature(SwiftSyntax.ClosureSignatureSyntax)
  case closureExpr(SwiftSyntax.ClosureExprSyntax)
  case unresolvedPatternExpr(SwiftSyntax.UnresolvedPatternExprSyntax)
  case multipleTrailingClosureElement(SwiftSyntax.MultipleTrailingClosureElementSyntax)
  case multipleTrailingClosureElementList(SwiftSyntax.MultipleTrailingClosureElementListSyntax)
  case functionCallExpr(SwiftSyntax.FunctionCallExprSyntax)
  case subscriptExpr(SwiftSyntax.SubscriptExprSyntax)
  case optionalChainingExpr(SwiftSyntax.OptionalChainingExprSyntax)
  case forcedValueExpr(SwiftSyntax.ForcedValueExprSyntax)
  case postfixUnaryExpr(SwiftSyntax.PostfixUnaryExprSyntax)
  case specializeExpr(SwiftSyntax.SpecializeExprSyntax)
  case stringSegment(SwiftSyntax.StringSegmentSyntax)
  case expressionSegment(SwiftSyntax.ExpressionSegmentSyntax)
  case stringLiteralExpr(SwiftSyntax.StringLiteralExprSyntax)
  case keyPathExpr(SwiftSyntax.KeyPathExprSyntax)
  case keyPathBaseExpr(SwiftSyntax.KeyPathBaseExprSyntax)
  case objcNamePiece(SwiftSyntax.ObjcNamePieceSyntax)
  case objcName(SwiftSyntax.ObjcNameSyntax)
  case objcKeyPathExpr(SwiftSyntax.ObjcKeyPathExprSyntax)
  case objcSelectorExpr(SwiftSyntax.ObjcSelectorExprSyntax)
  case postfixIfConfigExpr(SwiftSyntax.PostfixIfConfigExprSyntax)
  case editorPlaceholderExpr(SwiftSyntax.EditorPlaceholderExprSyntax)
  case objectLiteralExpr(SwiftSyntax.ObjectLiteralExprSyntax)
  case typeInitializerClause(SwiftSyntax.TypeInitializerClauseSyntax)
  case typealiasDecl(SwiftSyntax.TypealiasDeclSyntax)
  case associatedtypeDecl(SwiftSyntax.AssociatedtypeDeclSyntax)
  case functionParameterList(SwiftSyntax.FunctionParameterListSyntax)
  case parameterClause(SwiftSyntax.ParameterClauseSyntax)
  case returnClause(SwiftSyntax.ReturnClauseSyntax)
  case functionSignature(SwiftSyntax.FunctionSignatureSyntax)
  case ifConfigClause(SwiftSyntax.IfConfigClauseSyntax)
  case ifConfigClauseList(SwiftSyntax.IfConfigClauseListSyntax)
  case ifConfigDecl(SwiftSyntax.IfConfigDeclSyntax)
  case poundErrorDecl(SwiftSyntax.PoundErrorDeclSyntax)
  case poundWarningDecl(SwiftSyntax.PoundWarningDeclSyntax)
  case poundSourceLocation(SwiftSyntax.PoundSourceLocationSyntax)
  case poundSourceLocationArgs(SwiftSyntax.PoundSourceLocationArgsSyntax)
  case declModifier(SwiftSyntax.DeclModifierSyntax)
  case inheritedType(SwiftSyntax.InheritedTypeSyntax)
  case inheritedTypeList(SwiftSyntax.InheritedTypeListSyntax)
  case typeInheritanceClause(SwiftSyntax.TypeInheritanceClauseSyntax)
  case classDecl(SwiftSyntax.ClassDeclSyntax)
  case structDecl(SwiftSyntax.StructDeclSyntax)
  case protocolDecl(SwiftSyntax.ProtocolDeclSyntax)
  case extensionDecl(SwiftSyntax.ExtensionDeclSyntax)
  case memberDeclBlock(SwiftSyntax.MemberDeclBlockSyntax)
  case memberDeclList(SwiftSyntax.MemberDeclListSyntax)
  case memberDeclListItem(SwiftSyntax.MemberDeclListItemSyntax)
  case sourceFile(SwiftSyntax.SourceFileSyntax)
  case initializerClause(SwiftSyntax.InitializerClauseSyntax)
  case functionParameter(SwiftSyntax.FunctionParameterSyntax)
  case modifierList(SwiftSyntax.ModifierListSyntax)
  case functionDecl(SwiftSyntax.FunctionDeclSyntax)
  case initializerDecl(SwiftSyntax.InitializerDeclSyntax)
  case deinitializerDecl(SwiftSyntax.DeinitializerDeclSyntax)
  case subscriptDecl(SwiftSyntax.SubscriptDeclSyntax)
  case accessLevelModifier(SwiftSyntax.AccessLevelModifierSyntax)
  case accessPathComponent(SwiftSyntax.AccessPathComponentSyntax)
  case accessPath(SwiftSyntax.AccessPathSyntax)
  case importDecl(SwiftSyntax.ImportDeclSyntax)
  case accessorParameter(SwiftSyntax.AccessorParameterSyntax)
  case accessorDecl(SwiftSyntax.AccessorDeclSyntax)
  case accessorList(SwiftSyntax.AccessorListSyntax)
  case accessorBlock(SwiftSyntax.AccessorBlockSyntax)
  case patternBinding(SwiftSyntax.PatternBindingSyntax)
  case patternBindingList(SwiftSyntax.PatternBindingListSyntax)
  case variableDecl(SwiftSyntax.VariableDeclSyntax)
  case enumCaseElement(SwiftSyntax.EnumCaseElementSyntax)
  case enumCaseElementList(SwiftSyntax.EnumCaseElementListSyntax)
  case enumCaseDecl(SwiftSyntax.EnumCaseDeclSyntax)
  case enumDecl(SwiftSyntax.EnumDeclSyntax)
  case operatorDecl(SwiftSyntax.OperatorDeclSyntax)
  case identifierList(SwiftSyntax.IdentifierListSyntax)
  case operatorPrecedenceAndTypes(SwiftSyntax.OperatorPrecedenceAndTypesSyntax)
  case precedenceGroupDecl(SwiftSyntax.PrecedenceGroupDeclSyntax)
  case precedenceGroupAttributeList(SwiftSyntax.PrecedenceGroupAttributeListSyntax)
  case precedenceGroupRelation(SwiftSyntax.PrecedenceGroupRelationSyntax)
  case precedenceGroupNameList(SwiftSyntax.PrecedenceGroupNameListSyntax)
  case precedenceGroupNameElement(SwiftSyntax.PrecedenceGroupNameElementSyntax)
  case precedenceGroupAssignment(SwiftSyntax.PrecedenceGroupAssignmentSyntax)
  case precedenceGroupAssociativity(SwiftSyntax.PrecedenceGroupAssociativitySyntax)
  case tokenList(SwiftSyntax.TokenListSyntax)
  case nonEmptyTokenList(SwiftSyntax.NonEmptyTokenListSyntax)
  case customAttribute(SwiftSyntax.CustomAttributeSyntax)
  case attribute(SwiftSyntax.AttributeSyntax)
  case attributeList(SwiftSyntax.AttributeListSyntax)
  case specializeAttributeSpecList(SwiftSyntax.SpecializeAttributeSpecListSyntax)
  case labeledSpecializeEntry(SwiftSyntax.LabeledSpecializeEntrySyntax)
  case targetFunctionEntry(SwiftSyntax.TargetFunctionEntrySyntax)
  case namedAttributeStringArgument(SwiftSyntax.NamedAttributeStringArgumentSyntax)
  case declName(SwiftSyntax.DeclNameSyntax)
  case implementsAttributeArguments(SwiftSyntax.ImplementsAttributeArgumentsSyntax)
  case objCSelectorPiece(SwiftSyntax.ObjCSelectorPieceSyntax)
  case objCSelector(SwiftSyntax.ObjCSelectorSyntax)
  case differentiableAttributeArguments(SwiftSyntax.DifferentiableAttributeArgumentsSyntax)
  case differentiabilityParamsClause(SwiftSyntax.DifferentiabilityParamsClauseSyntax)
  case differentiabilityParams(SwiftSyntax.DifferentiabilityParamsSyntax)
  case differentiabilityParamList(SwiftSyntax.DifferentiabilityParamListSyntax)
  case differentiabilityParam(SwiftSyntax.DifferentiabilityParamSyntax)
  case derivativeRegistrationAttributeArguments(SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax)
  case qualifiedDeclName(SwiftSyntax.QualifiedDeclNameSyntax)
  case functionDeclName(SwiftSyntax.FunctionDeclNameSyntax)
  case continueStmt(SwiftSyntax.ContinueStmtSyntax)
  case whileStmt(SwiftSyntax.WhileStmtSyntax)
  case deferStmt(SwiftSyntax.DeferStmtSyntax)
  case expressionStmt(SwiftSyntax.ExpressionStmtSyntax)
  case switchCaseList(SwiftSyntax.SwitchCaseListSyntax)
  case repeatWhileStmt(SwiftSyntax.RepeatWhileStmtSyntax)
  case guardStmt(SwiftSyntax.GuardStmtSyntax)
  case whereClause(SwiftSyntax.WhereClauseSyntax)
  case forInStmt(SwiftSyntax.ForInStmtSyntax)
  case switchStmt(SwiftSyntax.SwitchStmtSyntax)
  case catchClauseList(SwiftSyntax.CatchClauseListSyntax)
  case doStmt(SwiftSyntax.DoStmtSyntax)
  case returnStmt(SwiftSyntax.ReturnStmtSyntax)
  case yieldStmt(SwiftSyntax.YieldStmtSyntax)
  case yieldList(SwiftSyntax.YieldListSyntax)
  case fallthroughStmt(SwiftSyntax.FallthroughStmtSyntax)
  case breakStmt(SwiftSyntax.BreakStmtSyntax)
  case caseItemList(SwiftSyntax.CaseItemListSyntax)
  case catchItemList(SwiftSyntax.CatchItemListSyntax)
  case conditionElement(SwiftSyntax.ConditionElementSyntax)
  case availabilityCondition(SwiftSyntax.AvailabilityConditionSyntax)
  case matchingPatternCondition(SwiftSyntax.MatchingPatternConditionSyntax)
  case optionalBindingCondition(SwiftSyntax.OptionalBindingConditionSyntax)
  case conditionElementList(SwiftSyntax.ConditionElementListSyntax)
  case declarationStmt(SwiftSyntax.DeclarationStmtSyntax)
  case throwStmt(SwiftSyntax.ThrowStmtSyntax)
  case ifStmt(SwiftSyntax.IfStmtSyntax)
  case elseIfContinuation(SwiftSyntax.ElseIfContinuationSyntax)
  case elseBlock(SwiftSyntax.ElseBlockSyntax)
  case switchCase(SwiftSyntax.SwitchCaseSyntax)
  case switchDefaultLabel(SwiftSyntax.SwitchDefaultLabelSyntax)
  case caseItem(SwiftSyntax.CaseItemSyntax)
  case catchItem(SwiftSyntax.CatchItemSyntax)
  case switchCaseLabel(SwiftSyntax.SwitchCaseLabelSyntax)
  case catchClause(SwiftSyntax.CatchClauseSyntax)
  case poundAssertStmt(SwiftSyntax.PoundAssertStmtSyntax)
  case genericWhereClause(SwiftSyntax.GenericWhereClauseSyntax)
  case genericRequirementList(SwiftSyntax.GenericRequirementListSyntax)
  case genericRequirement(SwiftSyntax.GenericRequirementSyntax)
  case sameTypeRequirement(SwiftSyntax.SameTypeRequirementSyntax)
  case genericParameterList(SwiftSyntax.GenericParameterListSyntax)
  case genericParameter(SwiftSyntax.GenericParameterSyntax)
  case genericParameterClause(SwiftSyntax.GenericParameterClauseSyntax)
  case conformanceRequirement(SwiftSyntax.ConformanceRequirementSyntax)
  case simpleTypeIdentifier(SwiftSyntax.SimpleTypeIdentifierSyntax)
  case memberTypeIdentifier(SwiftSyntax.MemberTypeIdentifierSyntax)
  case classRestrictionType(SwiftSyntax.ClassRestrictionTypeSyntax)
  case arrayType(SwiftSyntax.ArrayTypeSyntax)
  case dictionaryType(SwiftSyntax.DictionaryTypeSyntax)
  case metatypeType(SwiftSyntax.MetatypeTypeSyntax)
  case optionalType(SwiftSyntax.OptionalTypeSyntax)
  case someType(SwiftSyntax.SomeTypeSyntax)
  case implicitlyUnwrappedOptionalType(SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax)
  case compositionTypeElement(SwiftSyntax.CompositionTypeElementSyntax)
  case compositionTypeElementList(SwiftSyntax.CompositionTypeElementListSyntax)
  case compositionType(SwiftSyntax.CompositionTypeSyntax)
  case tupleTypeElement(SwiftSyntax.TupleTypeElementSyntax)
  case tupleTypeElementList(SwiftSyntax.TupleTypeElementListSyntax)
  case tupleType(SwiftSyntax.TupleTypeSyntax)
  case functionType(SwiftSyntax.FunctionTypeSyntax)
  case attributedType(SwiftSyntax.AttributedTypeSyntax)
  case genericArgumentList(SwiftSyntax.GenericArgumentListSyntax)
  case genericArgument(SwiftSyntax.GenericArgumentSyntax)
  case genericArgumentClause(SwiftSyntax.GenericArgumentClauseSyntax)
  case typeAnnotation(SwiftSyntax.TypeAnnotationSyntax)
  case enumCasePattern(SwiftSyntax.EnumCasePatternSyntax)
  case isTypePattern(SwiftSyntax.IsTypePatternSyntax)
  case optionalPattern(SwiftSyntax.OptionalPatternSyntax)
  case identifierPattern(SwiftSyntax.IdentifierPatternSyntax)
  case asTypePattern(SwiftSyntax.AsTypePatternSyntax)
  case tuplePattern(SwiftSyntax.TuplePatternSyntax)
  case wildcardPattern(SwiftSyntax.WildcardPatternSyntax)
  case tuplePatternElement(SwiftSyntax.TuplePatternElementSyntax)
  case expressionPattern(SwiftSyntax.ExpressionPatternSyntax)
  case tuplePatternElementList(SwiftSyntax.TuplePatternElementListSyntax)
  case valueBindingPattern(SwiftSyntax.ValueBindingPatternSyntax)
  case availabilitySpecList(SwiftSyntax.AvailabilitySpecListSyntax)
  case availabilityArgument(SwiftSyntax.AvailabilityArgumentSyntax)
  case availabilityLabeledArgument(SwiftSyntax.AvailabilityLabeledArgumentSyntax)
  case availabilityVersionRestriction(SwiftSyntax.AvailabilityVersionRestrictionSyntax)
  case versionTuple(SwiftSyntax.VersionTupleSyntax)
}
extension SwiftSyntax.Syntax {
  public func `as`(_: SwiftSyntax.SyntaxEnum.Type) -> SwiftSyntax.SyntaxEnum
}
public enum SyntaxVerifierError : Swift.Error, Swift.CustomStringConvertible {
  case unknownSyntaxFound(node: SwiftSyntax.Syntax)
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class SyntaxVerifier : SwiftSyntax.SyntaxAnyVisitor {
  override public func visitAny(_ node: SwiftSyntax.Syntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  public static func verify(_ node: SwiftSyntax.Syntax) throws
  override public init()
  @objc deinit
}
public struct UnknownStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.UnknownStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ContinueStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var continueKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withContinueKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ContinueStmtSyntax
  public var label: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ContinueStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ContinueStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct WhileStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var labelName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.WhileStmtSyntax
  public var labelColon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.WhileStmtSyntax
  public var whileKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withWhileKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.WhileStmtSyntax
  public var conditions: SwiftSyntax.ConditionElementListSyntax {
    get
    set(value)
  }
  public func addCondition(_ element: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.WhileStmtSyntax
  public func withConditions(_ newChild: SwiftSyntax.ConditionElementListSyntax?) -> SwiftSyntax.WhileStmtSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.WhileStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.WhileStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DeferStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var deferKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withDeferKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeferStmtSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.DeferStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeferStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ExpressionStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ExpressionStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ExpressionStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct RepeatWhileStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var labelName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.RepeatWhileStmtSyntax
  public var labelColon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.RepeatWhileStmtSyntax
  public var repeatKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRepeatKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.RepeatWhileStmtSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.RepeatWhileStmtSyntax
  public var whileKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withWhileKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.RepeatWhileStmtSyntax
  public var condition: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withCondition(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.RepeatWhileStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.RepeatWhileStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct GuardStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var guardKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withGuardKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GuardStmtSyntax
  public var conditions: SwiftSyntax.ConditionElementListSyntax {
    get
    set(value)
  }
  public func addCondition(_ element: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.GuardStmtSyntax
  public func withConditions(_ newChild: SwiftSyntax.ConditionElementListSyntax?) -> SwiftSyntax.GuardStmtSyntax
  public var elseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withElseKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GuardStmtSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.GuardStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GuardStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ForInStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var labelName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var labelColon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var forKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withForKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var tryKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withTryKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var awaitKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAwaitKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var caseKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withCaseKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public func withTypeAnnotation(_ newChild: SwiftSyntax.TypeAnnotationSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var inKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withInKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var sequenceExpr: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withSequenceExpr(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var whereClause: SwiftSyntax.WhereClauseSyntax? {
    get
    set(value)
  }
  public func withWhereClause(_ newChild: SwiftSyntax.WhereClauseSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.ForInStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ForInStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SwitchStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var labelName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchStmtSyntax
  public var labelColon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchStmtSyntax
  public var switchKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withSwitchKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchStmtSyntax
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.SwitchStmtSyntax
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchStmtSyntax
  public var cases: SwiftSyntax.SwitchCaseListSyntax {
    get
    set(value)
  }
  public func addCase(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.SwitchStmtSyntax
  public func withCases(_ newChild: SwiftSyntax.SwitchCaseListSyntax?) -> SwiftSyntax.SwitchStmtSyntax
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SwitchStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SwitchStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DoStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var labelName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DoStmtSyntax
  public var labelColon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DoStmtSyntax
  public var doKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withDoKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DoStmtSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.DoStmtSyntax
  public var catchClauses: SwiftSyntax.CatchClauseListSyntax? {
    get
    set(value)
  }
  public func addCatchClause(_ element: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.DoStmtSyntax
  public func withCatchClauses(_ newChild: SwiftSyntax.CatchClauseListSyntax?) -> SwiftSyntax.DoStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DoStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ReturnStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var returnKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withReturnKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ReturnStmtSyntax
  public var expression: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ReturnStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ReturnStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct YieldStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var yieldKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withYieldKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.YieldStmtSyntax
  public var yields: SwiftSyntax.Syntax {
    get
    set(value)
  }
  public func withYields(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.YieldStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.YieldStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct FallthroughStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var fallthroughKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withFallthroughKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FallthroughStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FallthroughStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct BreakStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var breakKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withBreakKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.BreakStmtSyntax
  public var label: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabel(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.BreakStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.BreakStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DeclarationStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var declaration: SwiftSyntax.DeclSyntax {
    get
    set(value)
  }
  public func withDeclaration(_ newChild: SwiftSyntax.DeclSyntax?) -> SwiftSyntax.DeclarationStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeclarationStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ThrowStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var throwKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withThrowKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ThrowStmtSyntax
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ThrowStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ThrowStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct IfStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var labelName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IfStmtSyntax
  public var labelColon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withLabelColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IfStmtSyntax
  public var ifKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIfKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IfStmtSyntax
  public var conditions: SwiftSyntax.ConditionElementListSyntax {
    get
    set(value)
  }
  public func addCondition(_ element: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.IfStmtSyntax
  public func withConditions(_ newChild: SwiftSyntax.ConditionElementListSyntax?) -> SwiftSyntax.IfStmtSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.IfStmtSyntax
  public var elseKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withElseKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IfStmtSyntax
  public var elseBody: SwiftSyntax.Syntax? {
    get
    set(value)
  }
  public func withElseBody(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.IfStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IfStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundAssertStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundAssert: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundAssert(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundAssertStmtSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundAssertStmtSyntax
  public var condition: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withCondition(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.PoundAssertStmtSyntax
  public var comma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withComma(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundAssertStmtSyntax
  public var message: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withMessage(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundAssertStmtSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundAssertStmtSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundAssertStmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ByteSourceRange : Swift.Equatable {
  public var offset: Swift.Int
  public var length: Swift.Int
  public init(offset: Swift.Int, length: Swift.Int)
  public var endOffset: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public func intersectsOrTouches(_ other: SwiftSyntax.ByteSourceRange) -> Swift.Bool
  public func intersects(_ other: SwiftSyntax.ByteSourceRange) -> Swift.Bool
  public func intersected(_ other: SwiftSyntax.ByteSourceRange) -> SwiftSyntax.ByteSourceRange
  public static func == (a: SwiftSyntax.ByteSourceRange, b: SwiftSyntax.ByteSourceRange) -> Swift.Bool
}
public struct SourceEdit : Swift.Equatable {
  public let range: SwiftSyntax.ByteSourceRange
  public let replacementLength: Swift.Int
  public var offset: Swift.Int {
    get
  }
  public var length: Swift.Int {
    get
  }
  public var endOffset: Swift.Int {
    get
  }
  public var replacementRange: SwiftSyntax.ByteSourceRange {
    get
  }
  public init(range: SwiftSyntax.ByteSourceRange, replacementLength: Swift.Int)
  public init(offset: Swift.Int, length: Swift.Int, replacementLength: Swift.Int)
  public func intersectsOrTouchesRange(_ other: SwiftSyntax.ByteSourceRange) -> Swift.Bool
  public func intersectsRange(_ other: SwiftSyntax.ByteSourceRange) -> Swift.Bool
  public static func == (a: SwiftSyntax.SourceEdit, b: SwiftSyntax.SourceEdit) -> Swift.Bool
}
public enum SyntaxVisitorContinueKind {
  case visitChildren
  case skipChildren
  public static func == (a: SwiftSyntax.SyntaxVisitorContinueKind, b: SwiftSyntax.SyntaxVisitorContinueKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class SyntaxVisitor {
  public init()
  public func walk<SyntaxType>(_ node: SyntaxType) where SyntaxType : SwiftSyntax.SyntaxProtocol
  open func visit(_ node: SwiftSyntax.UnknownDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnknownDeclSyntax)
  open func visit(_ node: SwiftSyntax.UnknownExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnknownExprSyntax)
  open func visit(_ node: SwiftSyntax.UnknownStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnknownStmtSyntax)
  open func visit(_ node: SwiftSyntax.UnknownTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnknownTypeSyntax)
  open func visit(_ node: SwiftSyntax.UnknownPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnknownPatternSyntax)
  open func visit(_ node: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CodeBlockItemSyntax)
  open func visit(_ node: SwiftSyntax.CodeBlockItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CodeBlockItemListSyntax)
  open func visit(_ node: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CodeBlockSyntax)
  open func visit(_ node: SwiftSyntax.InOutExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InOutExprSyntax)
  open func visit(_ node: SwiftSyntax.PoundColumnExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundColumnExprSyntax)
  open func visit(_ node: SwiftSyntax.TupleExprElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleExprElementListSyntax)
  open func visit(_ node: SwiftSyntax.ArrayElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrayElementListSyntax)
  open func visit(_ node: SwiftSyntax.DictionaryElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DictionaryElementListSyntax)
  open func visit(_ node: SwiftSyntax.StringLiteralSegmentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.StringLiteralSegmentsSyntax)
  open func visit(_ node: SwiftSyntax.TryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TryExprSyntax)
  open func visit(_ node: SwiftSyntax.AwaitExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AwaitExprSyntax)
  open func visit(_ node: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclNameArgumentSyntax)
  open func visit(_ node: SwiftSyntax.DeclNameArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclNameArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.DeclNameArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.IdentifierExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IdentifierExprSyntax)
  open func visit(_ node: SwiftSyntax.SuperRefExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SuperRefExprSyntax)
  open func visit(_ node: SwiftSyntax.NilLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.NilLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.DiscardAssignmentExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DiscardAssignmentExprSyntax)
  open func visit(_ node: SwiftSyntax.AssignmentExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AssignmentExprSyntax)
  open func visit(_ node: SwiftSyntax.SequenceExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SequenceExprSyntax)
  open func visit(_ node: SwiftSyntax.ExprListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExprListSyntax)
  open func visit(_ node: SwiftSyntax.PoundLineExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundLineExprSyntax)
  open func visit(_ node: SwiftSyntax.PoundFileExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundFileExprSyntax)
  open func visit(_ node: SwiftSyntax.PoundFileIDExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundFileIDExprSyntax)
  open func visit(_ node: SwiftSyntax.PoundFilePathExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundFilePathExprSyntax)
  open func visit(_ node: SwiftSyntax.PoundFunctionExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundFunctionExprSyntax)
  open func visit(_ node: SwiftSyntax.PoundDsohandleExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundDsohandleExprSyntax)
  open func visit(_ node: SwiftSyntax.SymbolicReferenceExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SymbolicReferenceExprSyntax)
  open func visit(_ node: SwiftSyntax.PrefixOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrefixOperatorExprSyntax)
  open func visit(_ node: SwiftSyntax.BinaryOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.BinaryOperatorExprSyntax)
  open func visit(_ node: SwiftSyntax.ArrowExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrowExprSyntax)
  open func visit(_ node: SwiftSyntax.FloatLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FloatLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.TupleExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleExprSyntax)
  open func visit(_ node: SwiftSyntax.ArrayExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrayExprSyntax)
  open func visit(_ node: SwiftSyntax.DictionaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DictionaryExprSyntax)
  open func visit(_ node: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleExprElementSyntax)
  open func visit(_ node: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrayElementSyntax)
  open func visit(_ node: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DictionaryElementSyntax)
  open func visit(_ node: SwiftSyntax.IntegerLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IntegerLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.BooleanLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.BooleanLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.TernaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TernaryExprSyntax)
  open func visit(_ node: SwiftSyntax.MemberAccessExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberAccessExprSyntax)
  open func visit(_ node: SwiftSyntax.IsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IsExprSyntax)
  open func visit(_ node: SwiftSyntax.AsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AsExprSyntax)
  open func visit(_ node: SwiftSyntax.TypeExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeExprSyntax)
  open func visit(_ node: SwiftSyntax.ClosureCaptureItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureCaptureItemSyntax)
  open func visit(_ node: SwiftSyntax.ClosureCaptureItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureCaptureItemListSyntax)
  open func visit(_ node: SwiftSyntax.ClosureCaptureSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureCaptureSignatureSyntax)
  open func visit(_ node: SwiftSyntax.ClosureParamSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureParamSyntax)
  open func visit(_ node: SwiftSyntax.ClosureParamListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureParamListSyntax)
  open func visit(_ node: SwiftSyntax.ClosureSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureSignatureSyntax)
  open func visit(_ node: SwiftSyntax.ClosureExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureExprSyntax)
  open func visit(_ node: SwiftSyntax.UnresolvedPatternExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnresolvedPatternExprSyntax)
  open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax)
  open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax)
  open func visit(_ node: SwiftSyntax.FunctionCallExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionCallExprSyntax)
  open func visit(_ node: SwiftSyntax.SubscriptExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SubscriptExprSyntax)
  open func visit(_ node: SwiftSyntax.OptionalChainingExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OptionalChainingExprSyntax)
  open func visit(_ node: SwiftSyntax.ForcedValueExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ForcedValueExprSyntax)
  open func visit(_ node: SwiftSyntax.PostfixUnaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PostfixUnaryExprSyntax)
  open func visit(_ node: SwiftSyntax.SpecializeExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SpecializeExprSyntax)
  open func visit(_ node: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.StringSegmentSyntax)
  open func visit(_ node: SwiftSyntax.ExpressionSegmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExpressionSegmentSyntax)
  open func visit(_ node: SwiftSyntax.StringLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.StringLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.KeyPathExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.KeyPathExprSyntax)
  open func visit(_ node: SwiftSyntax.KeyPathBaseExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.KeyPathBaseExprSyntax)
  open func visit(_ node: SwiftSyntax.ObjcNamePieceSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjcNamePieceSyntax)
  open func visit(_ node: SwiftSyntax.ObjcNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjcNameSyntax)
  open func visit(_ node: SwiftSyntax.ObjcKeyPathExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjcKeyPathExprSyntax)
  open func visit(_ node: SwiftSyntax.ObjcSelectorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjcSelectorExprSyntax)
  open func visit(_ node: SwiftSyntax.PostfixIfConfigExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PostfixIfConfigExprSyntax)
  open func visit(_ node: SwiftSyntax.EditorPlaceholderExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EditorPlaceholderExprSyntax)
  open func visit(_ node: SwiftSyntax.ObjectLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjectLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.TypeInitializerClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeInitializerClauseSyntax)
  open func visit(_ node: SwiftSyntax.TypealiasDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypealiasDeclSyntax)
  open func visit(_ node: SwiftSyntax.AssociatedtypeDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AssociatedtypeDeclSyntax)
  open func visit(_ node: SwiftSyntax.FunctionParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionParameterListSyntax)
  open func visit(_ node: SwiftSyntax.ParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ParameterClauseSyntax)
  open func visit(_ node: SwiftSyntax.ReturnClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ReturnClauseSyntax)
  open func visit(_ node: SwiftSyntax.FunctionSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionSignatureSyntax)
  open func visit(_ node: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IfConfigClauseSyntax)
  open func visit(_ node: SwiftSyntax.IfConfigClauseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IfConfigClauseListSyntax)
  open func visit(_ node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IfConfigDeclSyntax)
  open func visit(_ node: SwiftSyntax.PoundErrorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundErrorDeclSyntax)
  open func visit(_ node: SwiftSyntax.PoundWarningDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundWarningDeclSyntax)
  open func visit(_ node: SwiftSyntax.PoundSourceLocationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundSourceLocationSyntax)
  open func visit(_ node: SwiftSyntax.PoundSourceLocationArgsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundSourceLocationArgsSyntax)
  open func visit(_ node: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclModifierSyntax)
  open func visit(_ node: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InheritedTypeSyntax)
  open func visit(_ node: SwiftSyntax.InheritedTypeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InheritedTypeListSyntax)
  open func visit(_ node: SwiftSyntax.TypeInheritanceClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeInheritanceClauseSyntax)
  open func visit(_ node: SwiftSyntax.ClassDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClassDeclSyntax)
  open func visit(_ node: SwiftSyntax.StructDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.StructDeclSyntax)
  open func visit(_ node: SwiftSyntax.ProtocolDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ProtocolDeclSyntax)
  open func visit(_ node: SwiftSyntax.ExtensionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExtensionDeclSyntax)
  open func visit(_ node: SwiftSyntax.MemberDeclBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberDeclBlockSyntax)
  open func visit(_ node: SwiftSyntax.MemberDeclListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberDeclListSyntax)
  open func visit(_ node: SwiftSyntax.MemberDeclListItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberDeclListItemSyntax)
  open func visit(_ node: SwiftSyntax.SourceFileSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SourceFileSyntax)
  open func visit(_ node: SwiftSyntax.InitializerClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InitializerClauseSyntax)
  open func visit(_ node: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionParameterSyntax)
  open func visit(_ node: SwiftSyntax.ModifierListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ModifierListSyntax)
  open func visit(_ node: SwiftSyntax.FunctionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionDeclSyntax)
  open func visit(_ node: SwiftSyntax.InitializerDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InitializerDeclSyntax)
  open func visit(_ node: SwiftSyntax.DeinitializerDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeinitializerDeclSyntax)
  open func visit(_ node: SwiftSyntax.SubscriptDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SubscriptDeclSyntax)
  open func visit(_ node: SwiftSyntax.AccessLevelModifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessLevelModifierSyntax)
  open func visit(_ node: SwiftSyntax.AccessPathComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessPathComponentSyntax)
  open func visit(_ node: SwiftSyntax.AccessPathSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessPathSyntax)
  open func visit(_ node: SwiftSyntax.ImportDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ImportDeclSyntax)
  open func visit(_ node: SwiftSyntax.AccessorParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorParameterSyntax)
  open func visit(_ node: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorDeclSyntax)
  open func visit(_ node: SwiftSyntax.AccessorListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorListSyntax)
  open func visit(_ node: SwiftSyntax.AccessorBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorBlockSyntax)
  open func visit(_ node: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PatternBindingSyntax)
  open func visit(_ node: SwiftSyntax.PatternBindingListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PatternBindingListSyntax)
  open func visit(_ node: SwiftSyntax.VariableDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.VariableDeclSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseElementSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseElementListSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseDeclSyntax)
  open func visit(_ node: SwiftSyntax.EnumDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumDeclSyntax)
  open func visit(_ node: SwiftSyntax.OperatorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OperatorDeclSyntax)
  open func visit(_ node: SwiftSyntax.IdentifierListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IdentifierListSyntax)
  open func visit(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupNameElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupNameElementSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax)
  open func visit(_ node: SwiftSyntax.TokenListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TokenListSyntax)
  open func visit(_ node: SwiftSyntax.NonEmptyTokenListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.NonEmptyTokenListSyntax)
  open func visit(_ node: SwiftSyntax.CustomAttributeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CustomAttributeSyntax)
  open func visit(_ node: SwiftSyntax.AttributeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AttributeSyntax)
  open func visit(_ node: SwiftSyntax.AttributeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AttributeListSyntax)
  open func visit(_ node: SwiftSyntax.SpecializeAttributeSpecListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SpecializeAttributeSpecListSyntax)
  open func visit(_ node: SwiftSyntax.LabeledSpecializeEntrySyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.LabeledSpecializeEntrySyntax)
  open func visit(_ node: SwiftSyntax.TargetFunctionEntrySyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TargetFunctionEntrySyntax)
  open func visit(_ node: SwiftSyntax.NamedAttributeStringArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.NamedAttributeStringArgumentSyntax)
  open func visit(_ node: SwiftSyntax.DeclNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclNameSyntax)
  open func visit(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjCSelectorPieceSyntax)
  open func visit(_ node: SwiftSyntax.ObjCSelectorSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjCSelectorSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiabilityParamsClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiabilityParamsClauseSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiabilityParamsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiabilityParamsSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiabilityParamListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiabilityParamListSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiabilityParamSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiabilityParamSyntax)
  open func visit(_ node: SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.QualifiedDeclNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.QualifiedDeclNameSyntax)
  open func visit(_ node: SwiftSyntax.FunctionDeclNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionDeclNameSyntax)
  open func visit(_ node: SwiftSyntax.ContinueStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ContinueStmtSyntax)
  open func visit(_ node: SwiftSyntax.WhileStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.WhileStmtSyntax)
  open func visit(_ node: SwiftSyntax.DeferStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeferStmtSyntax)
  open func visit(_ node: SwiftSyntax.ExpressionStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExpressionStmtSyntax)
  open func visit(_ node: SwiftSyntax.SwitchCaseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchCaseListSyntax)
  open func visit(_ node: SwiftSyntax.RepeatWhileStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.RepeatWhileStmtSyntax)
  open func visit(_ node: SwiftSyntax.GuardStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GuardStmtSyntax)
  open func visit(_ node: SwiftSyntax.WhereClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.WhereClauseSyntax)
  open func visit(_ node: SwiftSyntax.ForInStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ForInStmtSyntax)
  open func visit(_ node: SwiftSyntax.SwitchStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchStmtSyntax)
  open func visit(_ node: SwiftSyntax.CatchClauseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CatchClauseListSyntax)
  open func visit(_ node: SwiftSyntax.DoStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DoStmtSyntax)
  open func visit(_ node: SwiftSyntax.ReturnStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ReturnStmtSyntax)
  open func visit(_ node: SwiftSyntax.YieldStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.YieldStmtSyntax)
  open func visit(_ node: SwiftSyntax.YieldListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.YieldListSyntax)
  open func visit(_ node: SwiftSyntax.FallthroughStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FallthroughStmtSyntax)
  open func visit(_ node: SwiftSyntax.BreakStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.BreakStmtSyntax)
  open func visit(_ node: SwiftSyntax.CaseItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CaseItemListSyntax)
  open func visit(_ node: SwiftSyntax.CatchItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CatchItemListSyntax)
  open func visit(_ node: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConditionElementSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilityConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilityConditionSyntax)
  open func visit(_ node: SwiftSyntax.MatchingPatternConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MatchingPatternConditionSyntax)
  open func visit(_ node: SwiftSyntax.OptionalBindingConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OptionalBindingConditionSyntax)
  open func visit(_ node: SwiftSyntax.ConditionElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConditionElementListSyntax)
  open func visit(_ node: SwiftSyntax.DeclarationStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclarationStmtSyntax)
  open func visit(_ node: SwiftSyntax.ThrowStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ThrowStmtSyntax)
  open func visit(_ node: SwiftSyntax.IfStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IfStmtSyntax)
  open func visit(_ node: SwiftSyntax.ElseIfContinuationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ElseIfContinuationSyntax)
  open func visit(_ node: SwiftSyntax.ElseBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ElseBlockSyntax)
  open func visit(_ node: SwiftSyntax.SwitchCaseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchCaseSyntax)
  open func visit(_ node: SwiftSyntax.SwitchDefaultLabelSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchDefaultLabelSyntax)
  open func visit(_ node: SwiftSyntax.CaseItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CaseItemSyntax)
  open func visit(_ node: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CatchItemSyntax)
  open func visit(_ node: SwiftSyntax.SwitchCaseLabelSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchCaseLabelSyntax)
  open func visit(_ node: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CatchClauseSyntax)
  open func visit(_ node: SwiftSyntax.PoundAssertStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundAssertStmtSyntax)
  open func visit(_ node: SwiftSyntax.GenericWhereClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  open func visit(_ node: SwiftSyntax.GenericRequirementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericRequirementListSyntax)
  open func visit(_ node: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericRequirementSyntax)
  open func visit(_ node: SwiftSyntax.SameTypeRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SameTypeRequirementSyntax)
  open func visit(_ node: SwiftSyntax.GenericParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericParameterListSyntax)
  open func visit(_ node: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericParameterSyntax)
  open func visit(_ node: SwiftSyntax.GenericParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  open func visit(_ node: SwiftSyntax.ConformanceRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConformanceRequirementSyntax)
  open func visit(_ node: SwiftSyntax.SimpleTypeIdentifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SimpleTypeIdentifierSyntax)
  open func visit(_ node: SwiftSyntax.MemberTypeIdentifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberTypeIdentifierSyntax)
  open func visit(_ node: SwiftSyntax.ClassRestrictionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClassRestrictionTypeSyntax)
  open func visit(_ node: SwiftSyntax.ArrayTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrayTypeSyntax)
  open func visit(_ node: SwiftSyntax.DictionaryTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DictionaryTypeSyntax)
  open func visit(_ node: SwiftSyntax.MetatypeTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MetatypeTypeSyntax)
  open func visit(_ node: SwiftSyntax.OptionalTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OptionalTypeSyntax)
  open func visit(_ node: SwiftSyntax.SomeTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SomeTypeSyntax)
  open func visit(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax)
  open func visit(_ node: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CompositionTypeElementSyntax)
  open func visit(_ node: SwiftSyntax.CompositionTypeElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CompositionTypeElementListSyntax)
  open func visit(_ node: SwiftSyntax.CompositionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CompositionTypeSyntax)
  open func visit(_ node: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleTypeElementSyntax)
  open func visit(_ node: SwiftSyntax.TupleTypeElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleTypeElementListSyntax)
  open func visit(_ node: SwiftSyntax.TupleTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleTypeSyntax)
  open func visit(_ node: SwiftSyntax.FunctionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionTypeSyntax)
  open func visit(_ node: SwiftSyntax.AttributedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AttributedTypeSyntax)
  open func visit(_ node: SwiftSyntax.GenericArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericArgumentSyntax)
  open func visit(_ node: SwiftSyntax.GenericArgumentClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericArgumentClauseSyntax)
  open func visit(_ node: SwiftSyntax.TypeAnnotationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeAnnotationSyntax)
  open func visit(_ node: SwiftSyntax.EnumCasePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCasePatternSyntax)
  open func visit(_ node: SwiftSyntax.IsTypePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IsTypePatternSyntax)
  open func visit(_ node: SwiftSyntax.OptionalPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OptionalPatternSyntax)
  open func visit(_ node: SwiftSyntax.IdentifierPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IdentifierPatternSyntax)
  open func visit(_ node: SwiftSyntax.AsTypePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AsTypePatternSyntax)
  open func visit(_ node: SwiftSyntax.TuplePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TuplePatternSyntax)
  open func visit(_ node: SwiftSyntax.WildcardPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.WildcardPatternSyntax)
  open func visit(_ node: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TuplePatternElementSyntax)
  open func visit(_ node: SwiftSyntax.ExpressionPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExpressionPatternSyntax)
  open func visit(_ node: SwiftSyntax.TuplePatternElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TuplePatternElementListSyntax)
  open func visit(_ node: SwiftSyntax.ValueBindingPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ValueBindingPatternSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilitySpecListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilitySpecListSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilityArgumentSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilityVersionRestrictionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilityVersionRestrictionSyntax)
  open func visit(_ node: SwiftSyntax.VersionTupleSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.VersionTupleSyntax)
  open func visit(_ token: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TokenSyntax)
  open func visit(_ node: SwiftSyntax.UnknownSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnknownSyntax)
  @objc deinit
}
public enum FixIt : Swift.Codable, Swift.CustomDebugStringConvertible {
  case remove(SwiftSyntax.SourceRange)
  case insert(SwiftSyntax.SourceLocation, Swift.String)
  case replace(SwiftSyntax.SourceRange, Swift.String)
  public var debugDescription: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var range: SwiftSyntax.SourceRange {
    get
  }
  public var text: Swift.String {
    get
  }
}
public struct Note : Swift.Codable {
  public let message: SwiftSyntax.Diagnostic.Message
  public let location: SwiftSyntax.SourceLocation?
  public let highlights: [SwiftSyntax.SourceRange]
  public let fixIts: [SwiftSyntax.FixIt]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Diagnostic : Swift.Codable, Swift.CustomDebugStringConvertible {
  public struct Message : Swift.Codable, Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
      get
    }
    public let severity: SwiftSyntax.Diagnostic.Severity
    public let text: Swift.String
    public init(_ severity: SwiftSyntax.Diagnostic.Severity, _ text: Swift.String)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public enum Severity : Swift.UInt8, Swift.Codable {
    case note
    case warning
    case error
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public let message: SwiftSyntax.Diagnostic.Message
  public let location: SwiftSyntax.SourceLocation?
  public let notes: [SwiftSyntax.Note]
  public let highlights: [SwiftSyntax.SourceRange]
  public let fixIts: [SwiftSyntax.FixIt]
  public var debugDescription: Swift.String {
    get
  }
  public struct Builder {
    public mutating func note(_ message: SwiftSyntax.Diagnostic.Message, location: SwiftSyntax.SourceLocation? = nil, highlights: [SwiftSyntax.SourceRange] = [], fixIts: [SwiftSyntax.FixIt] = [])
    public mutating func highlight(_ ranges: SwiftSyntax.SourceRange...)
    public mutating func fixItRemove(_ sourceRange: SwiftSyntax.SourceRange)
    public mutating func fixItInsert(_ text: Swift.String, at sourceLocation: SwiftSyntax.SourceLocation)
    public mutating func fixItReplace(_ sourceRange: SwiftSyntax.SourceRange, with text: Swift.String)
  }
  public init(message: SwiftSyntax.Diagnostic.Message, location: SwiftSyntax.SourceLocation?, actions: ((inout SwiftSyntax.Diagnostic.Builder) -> Swift.Void)?)
  public init(message: SwiftSyntax.Diagnostic.Message, location: SwiftSyntax.SourceLocation?, notes: [SwiftSyntax.Note], highlights: [SwiftSyntax.SourceRange], fixIts: [SwiftSyntax.FixIt])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SyntaxIdentifier : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.SyntaxIdentifier, b: SwiftSyntax.SyntaxIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
open class SyntaxRewriter {
  public init()
  open func visit(_ node: SwiftSyntax.UnknownDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.UnknownExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.UnknownStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.UnknownTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.UnknownPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CodeBlockItemListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.InOutExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PoundColumnExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TupleExprElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ArrayElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DictionaryElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.StringLiteralSegmentsSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.TryExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.AwaitExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DeclNameArgumentListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DeclNameArgumentsSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.IdentifierExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SuperRefExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.NilLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.DiscardAssignmentExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.AssignmentExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SequenceExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ExprListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PoundLineExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PoundFileExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PoundFileIDExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PoundFilePathExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PoundFunctionExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PoundDsohandleExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SymbolicReferenceExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PrefixOperatorExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.BinaryOperatorExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ArrowExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.FloatLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TupleExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ArrayExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.DictionaryExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.IntegerLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.BooleanLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TernaryExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.MemberAccessExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.IsExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.AsExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TypeExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ClosureCaptureItemSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ClosureCaptureItemListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ClosureCaptureSignatureSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ClosureParamSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ClosureParamListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ClosureSignatureSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ClosureExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.UnresolvedPatternExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.FunctionCallExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SubscriptExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.OptionalChainingExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ForcedValueExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PostfixUnaryExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SpecializeExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ExpressionSegmentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.StringLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.KeyPathExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.KeyPathBaseExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ObjcNamePieceSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ObjcNameSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ObjcKeyPathExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ObjcSelectorExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PostfixIfConfigExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.EditorPlaceholderExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ObjectLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TypeInitializerClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.TypealiasDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.AssociatedtypeDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.FunctionParameterListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ParameterClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ReturnClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.FunctionSignatureSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.IfConfigClauseListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.PoundErrorDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.PoundWarningDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.PoundSourceLocationSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.PoundSourceLocationArgsSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.InheritedTypeListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.TypeInheritanceClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ClassDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.StructDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.ProtocolDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.ExtensionDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.MemberDeclBlockSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.MemberDeclListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.MemberDeclListItemSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.SourceFileSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.InitializerClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ModifierListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.FunctionDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.InitializerDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.DeinitializerDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.SubscriptDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.AccessLevelModifierSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AccessPathComponentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AccessPathSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ImportDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.AccessorParameterSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.AccessorListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AccessorBlockSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PatternBindingListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.VariableDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.EnumCaseElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.EnumCaseDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.EnumDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.OperatorDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.IdentifierListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupNameElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.TokenListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.NonEmptyTokenListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CustomAttributeSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AttributeSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AttributeListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.SpecializeAttributeSpecListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.LabeledSpecializeEntrySyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.TargetFunctionEntrySyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.NamedAttributeStringArgumentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DeclNameSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ObjCSelectorSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DifferentiabilityParamsClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DifferentiabilityParamsSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DifferentiabilityParamListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DifferentiabilityParamSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.QualifiedDeclNameSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.FunctionDeclNameSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ContinueStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.WhileStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.DeferStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.ExpressionStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.SwitchCaseListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.RepeatWhileStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.GuardStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.WhereClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ForInStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.SwitchStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.CatchClauseListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DoStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.ReturnStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.YieldStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.YieldListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.FallthroughStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.BreakStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.CaseItemListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CatchItemListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AvailabilityConditionSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.MatchingPatternConditionSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.OptionalBindingConditionSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ConditionElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.DeclarationStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.ThrowStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.IfStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.ElseIfContinuationSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ElseBlockSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.SwitchCaseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.SwitchDefaultLabelSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CaseItemSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.SwitchCaseLabelSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.PoundAssertStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.GenericWhereClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.GenericRequirementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.SameTypeRequirementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.GenericParameterListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.GenericParameterClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ConformanceRequirementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.SimpleTypeIdentifierSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.MemberTypeIdentifierSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.ClassRestrictionTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.ArrayTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.DictionaryTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.MetatypeTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.OptionalTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.SomeTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CompositionTypeElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.CompositionTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.TupleTypeElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.TupleTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.FunctionTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.AttributedTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.GenericArgumentListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.GenericArgumentClauseSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.TypeAnnotationSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.EnumCasePatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.IsTypePatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.OptionalPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.IdentifierPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.AsTypePatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.TuplePatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.WildcardPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ExpressionPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.TuplePatternElementListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.ValueBindingPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.AvailabilitySpecListSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.AvailabilityVersionRestrictionSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.VersionTupleSyntax) -> SwiftSyntax.Syntax
  open func visit(_ token: SwiftSyntax.TokenSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.UnknownSyntax) -> SwiftSyntax.Syntax
  open func visitPre(_ node: SwiftSyntax.Syntax)
  open func visitAny(_ node: SwiftSyntax.Syntax) -> SwiftSyntax.Syntax?
  open func visitPost(_ node: SwiftSyntax.Syntax)
  public func visit(_ node: SwiftSyntax.Syntax) -> SwiftSyntax.Syntax
  @objc deinit
}
public struct CodeBlockItemSyntaxBuilder {
  public mutating func useItem(_ node: SwiftSyntax.Syntax)
  public mutating func useSemicolon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useErrorTokens(_ node: SwiftSyntax.Syntax)
}
extension SwiftSyntax.CodeBlockItemSyntax {
  public init(_ build: (inout SwiftSyntax.CodeBlockItemSyntaxBuilder) -> Swift.Void)
}
public struct CodeBlockSyntaxBuilder {
  public mutating func useLeftBrace(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addStatement(_ elt: SwiftSyntax.CodeBlockItemSyntax)
  public mutating func useRightBrace(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.CodeBlockSyntax {
  public init(_ build: (inout SwiftSyntax.CodeBlockSyntaxBuilder) -> Swift.Void)
}
public struct InOutExprSyntaxBuilder {
  public mutating func useAmpersand(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.InOutExprSyntax {
  public init(_ build: (inout SwiftSyntax.InOutExprSyntaxBuilder) -> Swift.Void)
}
public struct PoundColumnExprSyntaxBuilder {
  public mutating func usePoundColumn(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundColumnExprSyntax {
  public init(_ build: (inout SwiftSyntax.PoundColumnExprSyntaxBuilder) -> Swift.Void)
}
public struct TryExprSyntaxBuilder {
  public mutating func useTryKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useQuestionOrExclamationMark(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.TryExprSyntax {
  public init(_ build: (inout SwiftSyntax.TryExprSyntaxBuilder) -> Swift.Void)
}
public struct AwaitExprSyntaxBuilder {
  public mutating func useAwaitKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.AwaitExprSyntax {
  public init(_ build: (inout SwiftSyntax.AwaitExprSyntaxBuilder) -> Swift.Void)
}
public struct DeclNameArgumentSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DeclNameArgumentSyntax {
  public init(_ build: (inout SwiftSyntax.DeclNameArgumentSyntaxBuilder) -> Swift.Void)
}
public struct DeclNameArgumentsSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addArgument(_ elt: SwiftSyntax.DeclNameArgumentSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DeclNameArgumentsSyntax {
  public init(_ build: (inout SwiftSyntax.DeclNameArgumentsSyntaxBuilder) -> Swift.Void)
}
public struct IdentifierExprSyntaxBuilder {
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDeclNameArguments(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
}
extension SwiftSyntax.IdentifierExprSyntax {
  public init(_ build: (inout SwiftSyntax.IdentifierExprSyntaxBuilder) -> Swift.Void)
}
public struct SuperRefExprSyntaxBuilder {
  public mutating func useSuperKeyword(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.SuperRefExprSyntax {
  public init(_ build: (inout SwiftSyntax.SuperRefExprSyntaxBuilder) -> Swift.Void)
}
public struct NilLiteralExprSyntaxBuilder {
  public mutating func useNilKeyword(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.NilLiteralExprSyntax {
  public init(_ build: (inout SwiftSyntax.NilLiteralExprSyntaxBuilder) -> Swift.Void)
}
public struct DiscardAssignmentExprSyntaxBuilder {
  public mutating func useWildcard(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DiscardAssignmentExprSyntax {
  public init(_ build: (inout SwiftSyntax.DiscardAssignmentExprSyntaxBuilder) -> Swift.Void)
}
public struct AssignmentExprSyntaxBuilder {
  public mutating func useAssignToken(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.AssignmentExprSyntax {
  public init(_ build: (inout SwiftSyntax.AssignmentExprSyntaxBuilder) -> Swift.Void)
}
public struct SequenceExprSyntaxBuilder {
  public mutating func addElement(_ elt: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.SequenceExprSyntax {
  public init(_ build: (inout SwiftSyntax.SequenceExprSyntaxBuilder) -> Swift.Void)
}
public struct PoundLineExprSyntaxBuilder {
  public mutating func usePoundLine(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundLineExprSyntax {
  public init(_ build: (inout SwiftSyntax.PoundLineExprSyntaxBuilder) -> Swift.Void)
}
public struct PoundFileExprSyntaxBuilder {
  public mutating func usePoundFile(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundFileExprSyntax {
  public init(_ build: (inout SwiftSyntax.PoundFileExprSyntaxBuilder) -> Swift.Void)
}
public struct PoundFileIDExprSyntaxBuilder {
  public mutating func usePoundFileID(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundFileIDExprSyntax {
  public init(_ build: (inout SwiftSyntax.PoundFileIDExprSyntaxBuilder) -> Swift.Void)
}
public struct PoundFilePathExprSyntaxBuilder {
  public mutating func usePoundFilePath(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundFilePathExprSyntax {
  public init(_ build: (inout SwiftSyntax.PoundFilePathExprSyntaxBuilder) -> Swift.Void)
}
public struct PoundFunctionExprSyntaxBuilder {
  public mutating func usePoundFunction(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundFunctionExprSyntax {
  public init(_ build: (inout SwiftSyntax.PoundFunctionExprSyntaxBuilder) -> Swift.Void)
}
public struct PoundDsohandleExprSyntaxBuilder {
  public mutating func usePoundDsohandle(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundDsohandleExprSyntax {
  public init(_ build: (inout SwiftSyntax.PoundDsohandleExprSyntaxBuilder) -> Swift.Void)
}
public struct SymbolicReferenceExprSyntaxBuilder {
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericArgumentClause(_ node: SwiftSyntax.GenericArgumentClauseSyntax)
}
extension SwiftSyntax.SymbolicReferenceExprSyntax {
  public init(_ build: (inout SwiftSyntax.SymbolicReferenceExprSyntaxBuilder) -> Swift.Void)
}
public struct PrefixOperatorExprSyntaxBuilder {
  public mutating func useOperatorToken(_ node: SwiftSyntax.TokenSyntax)
  public mutating func usePostfixExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.PrefixOperatorExprSyntax {
  public init(_ build: (inout SwiftSyntax.PrefixOperatorExprSyntaxBuilder) -> Swift.Void)
}
public struct BinaryOperatorExprSyntaxBuilder {
  public mutating func useOperatorToken(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.BinaryOperatorExprSyntax {
  public init(_ build: (inout SwiftSyntax.BinaryOperatorExprSyntaxBuilder) -> Swift.Void)
}
public struct ArrowExprSyntaxBuilder {
  public mutating func useAsyncKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useThrowsToken(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useArrowToken(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ArrowExprSyntax {
  public init(_ build: (inout SwiftSyntax.ArrowExprSyntaxBuilder) -> Swift.Void)
}
public struct FloatLiteralExprSyntaxBuilder {
  public mutating func useFloatingDigits(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.FloatLiteralExprSyntax {
  public init(_ build: (inout SwiftSyntax.FloatLiteralExprSyntaxBuilder) -> Swift.Void)
}
public struct TupleExprSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addElement(_ elt: SwiftSyntax.TupleExprElementSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.TupleExprSyntax {
  public init(_ build: (inout SwiftSyntax.TupleExprSyntaxBuilder) -> Swift.Void)
}
public struct ArrayExprSyntaxBuilder {
  public mutating func useLeftSquare(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addElement(_ elt: SwiftSyntax.ArrayElementSyntax)
  public mutating func useRightSquare(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ArrayExprSyntax {
  public init(_ build: (inout SwiftSyntax.ArrayExprSyntaxBuilder) -> Swift.Void)
}
public struct DictionaryExprSyntaxBuilder {
  public mutating func useLeftSquare(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useContent(_ node: SwiftSyntax.Syntax)
  public mutating func useRightSquare(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DictionaryExprSyntax {
  public init(_ build: (inout SwiftSyntax.DictionaryExprSyntaxBuilder) -> Swift.Void)
}
public struct TupleExprElementSyntaxBuilder {
  public mutating func useLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.TupleExprElementSyntax {
  public init(_ build: (inout SwiftSyntax.TupleExprElementSyntaxBuilder) -> Swift.Void)
}
public struct ArrayElementSyntaxBuilder {
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ArrayElementSyntax {
  public init(_ build: (inout SwiftSyntax.ArrayElementSyntaxBuilder) -> Swift.Void)
}
public struct DictionaryElementSyntaxBuilder {
  public mutating func useKeyExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useValueExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DictionaryElementSyntax {
  public init(_ build: (inout SwiftSyntax.DictionaryElementSyntaxBuilder) -> Swift.Void)
}
public struct IntegerLiteralExprSyntaxBuilder {
  public mutating func useDigits(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.IntegerLiteralExprSyntax {
  public init(_ build: (inout SwiftSyntax.IntegerLiteralExprSyntaxBuilder) -> Swift.Void)
}
public struct BooleanLiteralExprSyntaxBuilder {
  public mutating func useBooleanLiteral(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.BooleanLiteralExprSyntax {
  public init(_ build: (inout SwiftSyntax.BooleanLiteralExprSyntaxBuilder) -> Swift.Void)
}
public struct TernaryExprSyntaxBuilder {
  public mutating func useConditionExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useQuestionMark(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useFirstChoice(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useColonMark(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useSecondChoice(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.TernaryExprSyntax {
  public init(_ build: (inout SwiftSyntax.TernaryExprSyntaxBuilder) -> Swift.Void)
}
public struct MemberAccessExprSyntaxBuilder {
  public mutating func useBase(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useDot(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDeclNameArguments(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
}
extension SwiftSyntax.MemberAccessExprSyntax {
  public init(_ build: (inout SwiftSyntax.MemberAccessExprSyntaxBuilder) -> Swift.Void)
}
public struct IsExprSyntaxBuilder {
  public mutating func useIsTok(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTypeName(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.IsExprSyntax {
  public init(_ build: (inout SwiftSyntax.IsExprSyntaxBuilder) -> Swift.Void)
}
public struct AsExprSyntaxBuilder {
  public mutating func useAsTok(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useQuestionOrExclamationMark(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTypeName(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.AsExprSyntax {
  public init(_ build: (inout SwiftSyntax.AsExprSyntaxBuilder) -> Swift.Void)
}
public struct TypeExprSyntaxBuilder {
  public mutating func useType(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.TypeExprSyntax {
  public init(_ build: (inout SwiftSyntax.TypeExprSyntaxBuilder) -> Swift.Void)
}
public struct ClosureCaptureItemSyntaxBuilder {
  public mutating func addSpecifierToken(_ elt: SwiftSyntax.TokenSyntax)
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useAssignToken(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ClosureCaptureItemSyntax {
  public init(_ build: (inout SwiftSyntax.ClosureCaptureItemSyntaxBuilder) -> Swift.Void)
}
public struct ClosureCaptureSignatureSyntaxBuilder {
  public mutating func useLeftSquare(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addItem(_ elt: SwiftSyntax.ClosureCaptureItemSyntax)
  public mutating func useRightSquare(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ClosureCaptureSignatureSyntax {
  public init(_ build: (inout SwiftSyntax.ClosureCaptureSignatureSyntaxBuilder) -> Swift.Void)
}
public struct ClosureParamSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ClosureParamSyntax {
  public init(_ build: (inout SwiftSyntax.ClosureParamSyntaxBuilder) -> Swift.Void)
}
public struct ClosureSignatureSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func useCapture(_ node: SwiftSyntax.ClosureCaptureSignatureSyntax)
  public mutating func useInput(_ node: SwiftSyntax.Syntax)
  public mutating func useAsyncKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useThrowsTok(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useOutput(_ node: SwiftSyntax.ReturnClauseSyntax)
  public mutating func useInTok(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ClosureSignatureSyntax {
  public init(_ build: (inout SwiftSyntax.ClosureSignatureSyntaxBuilder) -> Swift.Void)
}
public struct ClosureExprSyntaxBuilder {
  public mutating func useLeftBrace(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useSignature(_ node: SwiftSyntax.ClosureSignatureSyntax)
  public mutating func addStatement(_ elt: SwiftSyntax.CodeBlockItemSyntax)
  public mutating func useRightBrace(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ClosureExprSyntax {
  public init(_ build: (inout SwiftSyntax.ClosureExprSyntaxBuilder) -> Swift.Void)
}
public struct UnresolvedPatternExprSyntaxBuilder {
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
}
extension SwiftSyntax.UnresolvedPatternExprSyntax {
  public init(_ build: (inout SwiftSyntax.UnresolvedPatternExprSyntaxBuilder) -> Swift.Void)
}
public struct MultipleTrailingClosureElementSyntaxBuilder {
  public mutating func useLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useClosure(_ node: SwiftSyntax.ClosureExprSyntax)
}
extension SwiftSyntax.MultipleTrailingClosureElementSyntax {
  public init(_ build: (inout SwiftSyntax.MultipleTrailingClosureElementSyntaxBuilder) -> Swift.Void)
}
public struct FunctionCallExprSyntaxBuilder {
  public mutating func useCalledExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addArgument(_ elt: SwiftSyntax.TupleExprElementSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTrailingClosure(_ node: SwiftSyntax.ClosureExprSyntax)
  public mutating func addAdditionalTrailingClosure(_ elt: SwiftSyntax.MultipleTrailingClosureElementSyntax)
}
extension SwiftSyntax.FunctionCallExprSyntax {
  public init(_ build: (inout SwiftSyntax.FunctionCallExprSyntaxBuilder) -> Swift.Void)
}
public struct SubscriptExprSyntaxBuilder {
  public mutating func useCalledExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useLeftBracket(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addArgument(_ elt: SwiftSyntax.TupleExprElementSyntax)
  public mutating func useRightBracket(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTrailingClosure(_ node: SwiftSyntax.ClosureExprSyntax)
  public mutating func addAdditionalTrailingClosure(_ elt: SwiftSyntax.MultipleTrailingClosureElementSyntax)
}
extension SwiftSyntax.SubscriptExprSyntax {
  public init(_ build: (inout SwiftSyntax.SubscriptExprSyntaxBuilder) -> Swift.Void)
}
public struct OptionalChainingExprSyntaxBuilder {
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useQuestionMark(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.OptionalChainingExprSyntax {
  public init(_ build: (inout SwiftSyntax.OptionalChainingExprSyntaxBuilder) -> Swift.Void)
}
public struct ForcedValueExprSyntaxBuilder {
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useExclamationMark(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ForcedValueExprSyntax {
  public init(_ build: (inout SwiftSyntax.ForcedValueExprSyntaxBuilder) -> Swift.Void)
}
public struct PostfixUnaryExprSyntaxBuilder {
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useOperatorToken(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PostfixUnaryExprSyntax {
  public init(_ build: (inout SwiftSyntax.PostfixUnaryExprSyntaxBuilder) -> Swift.Void)
}
public struct SpecializeExprSyntaxBuilder {
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useGenericArgumentClause(_ node: SwiftSyntax.GenericArgumentClauseSyntax)
}
extension SwiftSyntax.SpecializeExprSyntax {
  public init(_ build: (inout SwiftSyntax.SpecializeExprSyntaxBuilder) -> Swift.Void)
}
public struct StringSegmentSyntaxBuilder {
  public mutating func useContent(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.StringSegmentSyntax {
  public init(_ build: (inout SwiftSyntax.StringSegmentSyntaxBuilder) -> Swift.Void)
}
public struct ExpressionSegmentSyntaxBuilder {
  public mutating func useBackslash(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDelimiter(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addExpression(_ elt: SwiftSyntax.TupleExprElementSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ExpressionSegmentSyntax {
  public init(_ build: (inout SwiftSyntax.ExpressionSegmentSyntaxBuilder) -> Swift.Void)
}
public struct StringLiteralExprSyntaxBuilder {
  public mutating func useOpenDelimiter(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useOpenQuote(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addSegment(_ elt: SwiftSyntax.Syntax)
  public mutating func useCloseQuote(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useCloseDelimiter(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.StringLiteralExprSyntax {
  public init(_ build: (inout SwiftSyntax.StringLiteralExprSyntaxBuilder) -> Swift.Void)
}
public struct KeyPathExprSyntaxBuilder {
  public mutating func useBackslash(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useRootExpr(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.KeyPathExprSyntax {
  public init(_ build: (inout SwiftSyntax.KeyPathExprSyntaxBuilder) -> Swift.Void)
}
public struct KeyPathBaseExprSyntaxBuilder {
  public mutating func usePeriod(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.KeyPathBaseExprSyntax {
  public init(_ build: (inout SwiftSyntax.KeyPathBaseExprSyntaxBuilder) -> Swift.Void)
}
public struct ObjcNamePieceSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDot(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ObjcNamePieceSyntax {
  public init(_ build: (inout SwiftSyntax.ObjcNamePieceSyntaxBuilder) -> Swift.Void)
}
public struct ObjcKeyPathExprSyntaxBuilder {
  public mutating func useKeyPath(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addNamePiece(_ elt: SwiftSyntax.ObjcNamePieceSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ObjcKeyPathExprSyntax {
  public init(_ build: (inout SwiftSyntax.ObjcKeyPathExprSyntaxBuilder) -> Swift.Void)
}
public struct ObjcSelectorExprSyntaxBuilder {
  public mutating func usePoundSelector(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useKind(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useName(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ObjcSelectorExprSyntax {
  public init(_ build: (inout SwiftSyntax.ObjcSelectorExprSyntaxBuilder) -> Swift.Void)
}
public struct PostfixIfConfigExprSyntaxBuilder {
  public mutating func useBase(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useConfig(_ node: SwiftSyntax.IfConfigDeclSyntax)
}
extension SwiftSyntax.PostfixIfConfigExprSyntax {
  public init(_ build: (inout SwiftSyntax.PostfixIfConfigExprSyntaxBuilder) -> Swift.Void)
}
public struct EditorPlaceholderExprSyntaxBuilder {
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.EditorPlaceholderExprSyntax {
  public init(_ build: (inout SwiftSyntax.EditorPlaceholderExprSyntaxBuilder) -> Swift.Void)
}
public struct ObjectLiteralExprSyntaxBuilder {
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addArgument(_ elt: SwiftSyntax.TupleExprElementSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ObjectLiteralExprSyntax {
  public init(_ build: (inout SwiftSyntax.ObjectLiteralExprSyntaxBuilder) -> Swift.Void)
}
public struct TypeInitializerClauseSyntaxBuilder {
  public mutating func useEqual(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useValue(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.TypeInitializerClauseSyntax {
  public init(_ build: (inout SwiftSyntax.TypeInitializerClauseSyntaxBuilder) -> Swift.Void)
}
public struct TypealiasDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useTypealiasKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericParameterClause(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  public mutating func useInitializer(_ node: SwiftSyntax.TypeInitializerClauseSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
}
extension SwiftSyntax.TypealiasDeclSyntax {
  public init(_ build: (inout SwiftSyntax.TypealiasDeclSyntaxBuilder) -> Swift.Void)
}
public struct AssociatedtypeDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useAssociatedtypeKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useInheritanceClause(_ node: SwiftSyntax.TypeInheritanceClauseSyntax)
  public mutating func useInitializer(_ node: SwiftSyntax.TypeInitializerClauseSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
}
extension SwiftSyntax.AssociatedtypeDeclSyntax {
  public init(_ build: (inout SwiftSyntax.AssociatedtypeDeclSyntaxBuilder) -> Swift.Void)
}
public struct ParameterClauseSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addParameter(_ elt: SwiftSyntax.FunctionParameterSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ParameterClauseSyntax {
  public init(_ build: (inout SwiftSyntax.ParameterClauseSyntaxBuilder) -> Swift.Void)
}
public struct ReturnClauseSyntaxBuilder {
  public mutating func useArrow(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useReturnType(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.ReturnClauseSyntax {
  public init(_ build: (inout SwiftSyntax.ReturnClauseSyntaxBuilder) -> Swift.Void)
}
public struct FunctionSignatureSyntaxBuilder {
  public mutating func useInput(_ node: SwiftSyntax.ParameterClauseSyntax)
  public mutating func useAsyncOrReasyncKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useThrowsOrRethrowsKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useOutput(_ node: SwiftSyntax.ReturnClauseSyntax)
}
extension SwiftSyntax.FunctionSignatureSyntax {
  public init(_ build: (inout SwiftSyntax.FunctionSignatureSyntaxBuilder) -> Swift.Void)
}
public struct IfConfigClauseSyntaxBuilder {
  public mutating func usePoundKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useCondition(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useElements(_ node: SwiftSyntax.Syntax)
}
extension SwiftSyntax.IfConfigClauseSyntax {
  public init(_ build: (inout SwiftSyntax.IfConfigClauseSyntaxBuilder) -> Swift.Void)
}
public struct IfConfigDeclSyntaxBuilder {
  public mutating func addClause(_ elt: SwiftSyntax.IfConfigClauseSyntax)
  public mutating func usePoundEndif(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.IfConfigDeclSyntax {
  public init(_ build: (inout SwiftSyntax.IfConfigDeclSyntaxBuilder) -> Swift.Void)
}
public struct PoundErrorDeclSyntaxBuilder {
  public mutating func usePoundError(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useMessage(_ node: SwiftSyntax.StringLiteralExprSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundErrorDeclSyntax {
  public init(_ build: (inout SwiftSyntax.PoundErrorDeclSyntaxBuilder) -> Swift.Void)
}
public struct PoundWarningDeclSyntaxBuilder {
  public mutating func usePoundWarning(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useMessage(_ node: SwiftSyntax.StringLiteralExprSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundWarningDeclSyntax {
  public init(_ build: (inout SwiftSyntax.PoundWarningDeclSyntaxBuilder) -> Swift.Void)
}
public struct PoundSourceLocationSyntaxBuilder {
  public mutating func usePoundSourceLocation(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useArgs(_ node: SwiftSyntax.PoundSourceLocationArgsSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundSourceLocationSyntax {
  public init(_ build: (inout SwiftSyntax.PoundSourceLocationSyntaxBuilder) -> Swift.Void)
}
public struct PoundSourceLocationArgsSyntaxBuilder {
  public mutating func useFileArgLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useFileArgColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useFileName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useComma(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLineArgLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLineArgColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLineNumber(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundSourceLocationArgsSyntax {
  public init(_ build: (inout SwiftSyntax.PoundSourceLocationArgsSyntaxBuilder) -> Swift.Void)
}
public struct DeclModifierSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDetailLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDetail(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDetailRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DeclModifierSyntax {
  public init(_ build: (inout SwiftSyntax.DeclModifierSyntaxBuilder) -> Swift.Void)
}
public struct InheritedTypeSyntaxBuilder {
  public mutating func useTypeName(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.InheritedTypeSyntax {
  public init(_ build: (inout SwiftSyntax.InheritedTypeSyntaxBuilder) -> Swift.Void)
}
public struct TypeInheritanceClauseSyntaxBuilder {
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addInheritedType(_ elt: SwiftSyntax.InheritedTypeSyntax)
}
extension SwiftSyntax.TypeInheritanceClauseSyntax {
  public init(_ build: (inout SwiftSyntax.TypeInheritanceClauseSyntaxBuilder) -> Swift.Void)
}
public struct ClassDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useClassOrActorKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericParameterClause(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  public mutating func useInheritanceClause(_ node: SwiftSyntax.TypeInheritanceClauseSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  public mutating func useMembers(_ node: SwiftSyntax.MemberDeclBlockSyntax)
}
extension SwiftSyntax.ClassDeclSyntax {
  public init(_ build: (inout SwiftSyntax.ClassDeclSyntaxBuilder) -> Swift.Void)
}
public struct StructDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useStructKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericParameterClause(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  public mutating func useInheritanceClause(_ node: SwiftSyntax.TypeInheritanceClauseSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  public mutating func useMembers(_ node: SwiftSyntax.MemberDeclBlockSyntax)
}
extension SwiftSyntax.StructDeclSyntax {
  public init(_ build: (inout SwiftSyntax.StructDeclSyntaxBuilder) -> Swift.Void)
}
public struct ProtocolDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useProtocolKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useInheritanceClause(_ node: SwiftSyntax.TypeInheritanceClauseSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  public mutating func useMembers(_ node: SwiftSyntax.MemberDeclBlockSyntax)
}
extension SwiftSyntax.ProtocolDeclSyntax {
  public init(_ build: (inout SwiftSyntax.ProtocolDeclSyntaxBuilder) -> Swift.Void)
}
public struct ExtensionDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useExtensionKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExtendedType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useInheritanceClause(_ node: SwiftSyntax.TypeInheritanceClauseSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  public mutating func useMembers(_ node: SwiftSyntax.MemberDeclBlockSyntax)
}
extension SwiftSyntax.ExtensionDeclSyntax {
  public init(_ build: (inout SwiftSyntax.ExtensionDeclSyntaxBuilder) -> Swift.Void)
}
public struct MemberDeclBlockSyntaxBuilder {
  public mutating func useLeftBrace(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addMember(_ elt: SwiftSyntax.MemberDeclListItemSyntax)
  public mutating func useRightBrace(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.MemberDeclBlockSyntax {
  public init(_ build: (inout SwiftSyntax.MemberDeclBlockSyntaxBuilder) -> Swift.Void)
}
public struct MemberDeclListItemSyntaxBuilder {
  public mutating func useDecl(_ node: SwiftSyntax.DeclSyntax)
  public mutating func useSemicolon(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.MemberDeclListItemSyntax {
  public init(_ build: (inout SwiftSyntax.MemberDeclListItemSyntaxBuilder) -> Swift.Void)
}
public struct SourceFileSyntaxBuilder {
  public mutating func addStatement(_ elt: SwiftSyntax.CodeBlockItemSyntax)
  public mutating func useEOFToken(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.SourceFileSyntax {
  public init(_ build: (inout SwiftSyntax.SourceFileSyntaxBuilder) -> Swift.Void)
}
public struct InitializerClauseSyntaxBuilder {
  public mutating func useEqual(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useValue(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.InitializerClauseSyntax {
  public init(_ build: (inout SwiftSyntax.InitializerClauseSyntaxBuilder) -> Swift.Void)
}
public struct FunctionParameterSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func useFirstName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useSecondName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useEllipsis(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDefaultArgument(_ node: SwiftSyntax.InitializerClauseSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.FunctionParameterSyntax {
  public init(_ build: (inout SwiftSyntax.FunctionParameterSyntaxBuilder) -> Swift.Void)
}
public struct FunctionDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useFuncKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericParameterClause(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  public mutating func useSignature(_ node: SwiftSyntax.FunctionSignatureSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.FunctionDeclSyntax {
  public init(_ build: (inout SwiftSyntax.FunctionDeclSyntaxBuilder) -> Swift.Void)
}
public struct InitializerDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useInitKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useOptionalMark(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericParameterClause(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  public mutating func useParameters(_ node: SwiftSyntax.ParameterClauseSyntax)
  public mutating func useThrowsOrRethrowsKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.InitializerDeclSyntax {
  public init(_ build: (inout SwiftSyntax.InitializerDeclSyntaxBuilder) -> Swift.Void)
}
public struct DeinitializerDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useDeinitKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.DeinitializerDeclSyntax {
  public init(_ build: (inout SwiftSyntax.DeinitializerDeclSyntaxBuilder) -> Swift.Void)
}
public struct SubscriptDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useSubscriptKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericParameterClause(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  public mutating func useIndices(_ node: SwiftSyntax.ParameterClauseSyntax)
  public mutating func useResult(_ node: SwiftSyntax.ReturnClauseSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  public mutating func useAccessor(_ node: SwiftSyntax.Syntax)
}
extension SwiftSyntax.SubscriptDeclSyntax {
  public init(_ build: (inout SwiftSyntax.SubscriptDeclSyntaxBuilder) -> Swift.Void)
}
public struct AccessLevelModifierSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useModifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.AccessLevelModifierSyntax {
  public init(_ build: (inout SwiftSyntax.AccessLevelModifierSyntaxBuilder) -> Swift.Void)
}
public struct AccessPathComponentSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTrailingDot(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.AccessPathComponentSyntax {
  public init(_ build: (inout SwiftSyntax.AccessPathComponentSyntaxBuilder) -> Swift.Void)
}
public struct ImportDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useImportTok(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useImportKind(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addPathComponent(_ elt: SwiftSyntax.AccessPathComponentSyntax)
}
extension SwiftSyntax.ImportDeclSyntax {
  public init(_ build: (inout SwiftSyntax.ImportDeclSyntaxBuilder) -> Swift.Void)
}
public struct AccessorParameterSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.AccessorParameterSyntax {
  public init(_ build: (inout SwiftSyntax.AccessorParameterSyntaxBuilder) -> Swift.Void)
}
public struct AccessorDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func useModifier(_ node: SwiftSyntax.DeclModifierSyntax)
  public mutating func useAccessorKind(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useParameter(_ node: SwiftSyntax.AccessorParameterSyntax)
  public mutating func useAsyncKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useThrowsKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.AccessorDeclSyntax {
  public init(_ build: (inout SwiftSyntax.AccessorDeclSyntaxBuilder) -> Swift.Void)
}
public struct AccessorBlockSyntaxBuilder {
  public mutating func useLeftBrace(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addAccessor(_ elt: SwiftSyntax.AccessorDeclSyntax)
  public mutating func useRightBrace(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.AccessorBlockSyntax {
  public init(_ build: (inout SwiftSyntax.AccessorBlockSyntaxBuilder) -> Swift.Void)
}
public struct PatternBindingSyntaxBuilder {
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useTypeAnnotation(_ node: SwiftSyntax.TypeAnnotationSyntax)
  public mutating func useInitializer(_ node: SwiftSyntax.InitializerClauseSyntax)
  public mutating func useAccessor(_ node: SwiftSyntax.Syntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PatternBindingSyntax {
  public init(_ build: (inout SwiftSyntax.PatternBindingSyntaxBuilder) -> Swift.Void)
}
public struct VariableDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useLetOrVarKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addBinding(_ elt: SwiftSyntax.PatternBindingSyntax)
}
extension SwiftSyntax.VariableDeclSyntax {
  public init(_ build: (inout SwiftSyntax.VariableDeclSyntaxBuilder) -> Swift.Void)
}
public struct EnumCaseElementSyntaxBuilder {
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useAssociatedValue(_ node: SwiftSyntax.ParameterClauseSyntax)
  public mutating func useRawValue(_ node: SwiftSyntax.InitializerClauseSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.EnumCaseElementSyntax {
  public init(_ build: (inout SwiftSyntax.EnumCaseElementSyntaxBuilder) -> Swift.Void)
}
public struct EnumCaseDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useCaseKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addElement(_ elt: SwiftSyntax.EnumCaseElementSyntax)
}
extension SwiftSyntax.EnumCaseDeclSyntax {
  public init(_ build: (inout SwiftSyntax.EnumCaseDeclSyntaxBuilder) -> Swift.Void)
}
public struct EnumDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useEnumKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericParameters(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  public mutating func useInheritanceClause(_ node: SwiftSyntax.TypeInheritanceClauseSyntax)
  public mutating func useGenericWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  public mutating func useMembers(_ node: SwiftSyntax.MemberDeclBlockSyntax)
}
extension SwiftSyntax.EnumDeclSyntax {
  public init(_ build: (inout SwiftSyntax.EnumDeclSyntaxBuilder) -> Swift.Void)
}
public struct OperatorDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func useOperatorKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useOperatorPrecedenceAndTypes(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax)
}
extension SwiftSyntax.OperatorDeclSyntax {
  public init(_ build: (inout SwiftSyntax.OperatorDeclSyntaxBuilder) -> Swift.Void)
}
public struct OperatorPrecedenceAndTypesSyntaxBuilder {
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addPrecedenceGroupAndDesignatedType(_ elt: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.OperatorPrecedenceAndTypesSyntax {
  public init(_ build: (inout SwiftSyntax.OperatorPrecedenceAndTypesSyntaxBuilder) -> Swift.Void)
}
public struct PrecedenceGroupDeclSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func addModifier(_ elt: SwiftSyntax.DeclModifierSyntax)
  public mutating func usePrecedencegroupKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftBrace(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addGroupAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func useRightBrace(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PrecedenceGroupDeclSyntax {
  public init(_ build: (inout SwiftSyntax.PrecedenceGroupDeclSyntaxBuilder) -> Swift.Void)
}
public struct PrecedenceGroupRelationSyntaxBuilder {
  public mutating func useHigherThanOrLowerThan(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addOtherName(_ elt: SwiftSyntax.PrecedenceGroupNameElementSyntax)
}
extension SwiftSyntax.PrecedenceGroupRelationSyntax {
  public init(_ build: (inout SwiftSyntax.PrecedenceGroupRelationSyntaxBuilder) -> Swift.Void)
}
public struct PrecedenceGroupNameElementSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PrecedenceGroupNameElementSyntax {
  public init(_ build: (inout SwiftSyntax.PrecedenceGroupNameElementSyntaxBuilder) -> Swift.Void)
}
public struct PrecedenceGroupAssignmentSyntaxBuilder {
  public mutating func useAssignmentKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useFlag(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PrecedenceGroupAssignmentSyntax {
  public init(_ build: (inout SwiftSyntax.PrecedenceGroupAssignmentSyntaxBuilder) -> Swift.Void)
}
public struct PrecedenceGroupAssociativitySyntaxBuilder {
  public mutating func useAssociativityKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useValue(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PrecedenceGroupAssociativitySyntax {
  public init(_ build: (inout SwiftSyntax.PrecedenceGroupAssociativitySyntaxBuilder) -> Swift.Void)
}
public struct CustomAttributeSyntaxBuilder {
  public mutating func useAtSignToken(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useAttributeName(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addArgument(_ elt: SwiftSyntax.TupleExprElementSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.CustomAttributeSyntax {
  public init(_ build: (inout SwiftSyntax.CustomAttributeSyntaxBuilder) -> Swift.Void)
}
public struct AttributeSyntaxBuilder {
  public mutating func useAtSignToken(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useAttributeName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useArgument(_ node: SwiftSyntax.Syntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addToken(_ elt: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.AttributeSyntax {
  public init(_ build: (inout SwiftSyntax.AttributeSyntaxBuilder) -> Swift.Void)
}
public struct LabeledSpecializeEntrySyntaxBuilder {
  public mutating func useLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useValue(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.LabeledSpecializeEntrySyntax {
  public init(_ build: (inout SwiftSyntax.LabeledSpecializeEntrySyntaxBuilder) -> Swift.Void)
}
public struct TargetFunctionEntrySyntaxBuilder {
  public mutating func useLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDelcname(_ node: SwiftSyntax.DeclNameSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.TargetFunctionEntrySyntax {
  public init(_ build: (inout SwiftSyntax.TargetFunctionEntrySyntaxBuilder) -> Swift.Void)
}
public struct NamedAttributeStringArgumentSyntaxBuilder {
  public mutating func useNameTok(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useStringOrDeclname(_ node: SwiftSyntax.Syntax)
}
extension SwiftSyntax.NamedAttributeStringArgumentSyntax {
  public init(_ build: (inout SwiftSyntax.NamedAttributeStringArgumentSyntaxBuilder) -> Swift.Void)
}
public struct DeclNameSyntaxBuilder {
  public mutating func useDeclBaseName(_ node: SwiftSyntax.Syntax)
  public mutating func useDeclNameArguments(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
}
extension SwiftSyntax.DeclNameSyntax {
  public init(_ build: (inout SwiftSyntax.DeclNameSyntaxBuilder) -> Swift.Void)
}
public struct ImplementsAttributeArgumentsSyntaxBuilder {
  public mutating func useType(_ node: SwiftSyntax.SimpleTypeIdentifierSyntax)
  public mutating func useComma(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDeclBaseName(_ node: SwiftSyntax.Syntax)
  public mutating func useDeclNameArguments(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
}
extension SwiftSyntax.ImplementsAttributeArgumentsSyntax {
  public init(_ build: (inout SwiftSyntax.ImplementsAttributeArgumentsSyntaxBuilder) -> Swift.Void)
}
public struct ObjCSelectorPieceSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ObjCSelectorPieceSyntax {
  public init(_ build: (inout SwiftSyntax.ObjCSelectorPieceSyntaxBuilder) -> Swift.Void)
}
public struct DifferentiableAttributeArgumentsSyntaxBuilder {
  public mutating func useDiffKind(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDiffKindComma(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDiffParams(_ node: SwiftSyntax.DifferentiabilityParamsClauseSyntax)
  public mutating func useDiffParamsComma(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useWhereClause(_ node: SwiftSyntax.GenericWhereClauseSyntax)
}
extension SwiftSyntax.DifferentiableAttributeArgumentsSyntax {
  public init(_ build: (inout SwiftSyntax.DifferentiableAttributeArgumentsSyntaxBuilder) -> Swift.Void)
}
public struct DifferentiabilityParamsClauseSyntaxBuilder {
  public mutating func useWrtLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useParameters(_ node: SwiftSyntax.Syntax)
}
extension SwiftSyntax.DifferentiabilityParamsClauseSyntax {
  public init(_ build: (inout SwiftSyntax.DifferentiabilityParamsClauseSyntaxBuilder) -> Swift.Void)
}
public struct DifferentiabilityParamsSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addDifferentiabilityParam(_ elt: SwiftSyntax.DifferentiabilityParamSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DifferentiabilityParamsSyntax {
  public init(_ build: (inout SwiftSyntax.DifferentiabilityParamsSyntaxBuilder) -> Swift.Void)
}
public struct DifferentiabilityParamSyntaxBuilder {
  public mutating func useParameter(_ node: SwiftSyntax.Syntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DifferentiabilityParamSyntax {
  public init(_ build: (inout SwiftSyntax.DifferentiabilityParamSyntaxBuilder) -> Swift.Void)
}
public struct DerivativeRegistrationAttributeArgumentsSyntaxBuilder {
  public mutating func useOfLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useOriginalDeclName(_ node: SwiftSyntax.QualifiedDeclNameSyntax)
  public mutating func usePeriod(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useAccessorKind(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useComma(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDiffParams(_ node: SwiftSyntax.DifferentiabilityParamsClauseSyntax)
}
extension SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax {
  public init(_ build: (inout SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntaxBuilder) -> Swift.Void)
}
public struct QualifiedDeclNameSyntaxBuilder {
  public mutating func useBaseType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useDot(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useArguments(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
}
extension SwiftSyntax.QualifiedDeclNameSyntax {
  public init(_ build: (inout SwiftSyntax.QualifiedDeclNameSyntaxBuilder) -> Swift.Void)
}
public struct FunctionDeclNameSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.Syntax)
  public mutating func useArguments(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
}
extension SwiftSyntax.FunctionDeclNameSyntax {
  public init(_ build: (inout SwiftSyntax.FunctionDeclNameSyntaxBuilder) -> Swift.Void)
}
public struct ContinueStmtSyntaxBuilder {
  public mutating func useContinueKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabel(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ContinueStmtSyntax {
  public init(_ build: (inout SwiftSyntax.ContinueStmtSyntaxBuilder) -> Swift.Void)
}
public struct WhileStmtSyntaxBuilder {
  public mutating func useLabelName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabelColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useWhileKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addCondition(_ elt: SwiftSyntax.ConditionElementSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.WhileStmtSyntax {
  public init(_ build: (inout SwiftSyntax.WhileStmtSyntaxBuilder) -> Swift.Void)
}
public struct DeferStmtSyntaxBuilder {
  public mutating func useDeferKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.DeferStmtSyntax {
  public init(_ build: (inout SwiftSyntax.DeferStmtSyntaxBuilder) -> Swift.Void)
}
public struct ExpressionStmtSyntaxBuilder {
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.ExpressionStmtSyntax {
  public init(_ build: (inout SwiftSyntax.ExpressionStmtSyntaxBuilder) -> Swift.Void)
}
public struct RepeatWhileStmtSyntaxBuilder {
  public mutating func useLabelName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabelColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useRepeatKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
  public mutating func useWhileKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useCondition(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.RepeatWhileStmtSyntax {
  public init(_ build: (inout SwiftSyntax.RepeatWhileStmtSyntaxBuilder) -> Swift.Void)
}
public struct GuardStmtSyntaxBuilder {
  public mutating func useGuardKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addCondition(_ elt: SwiftSyntax.ConditionElementSyntax)
  public mutating func useElseKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.GuardStmtSyntax {
  public init(_ build: (inout SwiftSyntax.GuardStmtSyntaxBuilder) -> Swift.Void)
}
public struct WhereClauseSyntaxBuilder {
  public mutating func useWhereKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGuardResult(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.WhereClauseSyntax {
  public init(_ build: (inout SwiftSyntax.WhereClauseSyntaxBuilder) -> Swift.Void)
}
public struct ForInStmtSyntaxBuilder {
  public mutating func useLabelName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabelColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useForKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTryKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useAwaitKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useCaseKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useTypeAnnotation(_ node: SwiftSyntax.TypeAnnotationSyntax)
  public mutating func useInKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useSequenceExpr(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useWhereClause(_ node: SwiftSyntax.WhereClauseSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.ForInStmtSyntax {
  public init(_ build: (inout SwiftSyntax.ForInStmtSyntaxBuilder) -> Swift.Void)
}
public struct SwitchStmtSyntaxBuilder {
  public mutating func useLabelName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabelColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useSwitchKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useLeftBrace(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addCase(_ elt: SwiftSyntax.Syntax)
  public mutating func useRightBrace(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.SwitchStmtSyntax {
  public init(_ build: (inout SwiftSyntax.SwitchStmtSyntaxBuilder) -> Swift.Void)
}
public struct DoStmtSyntaxBuilder {
  public mutating func useLabelName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabelColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useDoKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
  public mutating func addCatchClause(_ elt: SwiftSyntax.CatchClauseSyntax)
}
extension SwiftSyntax.DoStmtSyntax {
  public init(_ build: (inout SwiftSyntax.DoStmtSyntaxBuilder) -> Swift.Void)
}
public struct ReturnStmtSyntaxBuilder {
  public mutating func useReturnKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.ReturnStmtSyntax {
  public init(_ build: (inout SwiftSyntax.ReturnStmtSyntaxBuilder) -> Swift.Void)
}
public struct YieldStmtSyntaxBuilder {
  public mutating func useYieldKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useYields(_ node: SwiftSyntax.Syntax)
}
extension SwiftSyntax.YieldStmtSyntax {
  public init(_ build: (inout SwiftSyntax.YieldStmtSyntaxBuilder) -> Swift.Void)
}
public struct YieldListSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addElement(_ elt: SwiftSyntax.ExprSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.YieldListSyntax {
  public init(_ build: (inout SwiftSyntax.YieldListSyntaxBuilder) -> Swift.Void)
}
public struct FallthroughStmtSyntaxBuilder {
  public mutating func useFallthroughKeyword(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.FallthroughStmtSyntax {
  public init(_ build: (inout SwiftSyntax.FallthroughStmtSyntaxBuilder) -> Swift.Void)
}
public struct BreakStmtSyntaxBuilder {
  public mutating func useBreakKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabel(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.BreakStmtSyntax {
  public init(_ build: (inout SwiftSyntax.BreakStmtSyntaxBuilder) -> Swift.Void)
}
public struct ConditionElementSyntaxBuilder {
  public mutating func useCondition(_ node: SwiftSyntax.Syntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ConditionElementSyntax {
  public init(_ build: (inout SwiftSyntax.ConditionElementSyntaxBuilder) -> Swift.Void)
}
public struct AvailabilityConditionSyntaxBuilder {
  public mutating func usePoundAvailableKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addAvailabilityArgument(_ elt: SwiftSyntax.AvailabilityArgumentSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.AvailabilityConditionSyntax {
  public init(_ build: (inout SwiftSyntax.AvailabilityConditionSyntaxBuilder) -> Swift.Void)
}
public struct MatchingPatternConditionSyntaxBuilder {
  public mutating func useCaseKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useTypeAnnotation(_ node: SwiftSyntax.TypeAnnotationSyntax)
  public mutating func useInitializer(_ node: SwiftSyntax.InitializerClauseSyntax)
}
extension SwiftSyntax.MatchingPatternConditionSyntax {
  public init(_ build: (inout SwiftSyntax.MatchingPatternConditionSyntaxBuilder) -> Swift.Void)
}
public struct OptionalBindingConditionSyntaxBuilder {
  public mutating func useLetOrVarKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useTypeAnnotation(_ node: SwiftSyntax.TypeAnnotationSyntax)
  public mutating func useInitializer(_ node: SwiftSyntax.InitializerClauseSyntax)
}
extension SwiftSyntax.OptionalBindingConditionSyntax {
  public init(_ build: (inout SwiftSyntax.OptionalBindingConditionSyntaxBuilder) -> Swift.Void)
}
public struct DeclarationStmtSyntaxBuilder {
  public mutating func useDeclaration(_ node: SwiftSyntax.DeclSyntax)
}
extension SwiftSyntax.DeclarationStmtSyntax {
  public init(_ build: (inout SwiftSyntax.DeclarationStmtSyntaxBuilder) -> Swift.Void)
}
public struct ThrowStmtSyntaxBuilder {
  public mutating func useThrowKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.ThrowStmtSyntax {
  public init(_ build: (inout SwiftSyntax.ThrowStmtSyntaxBuilder) -> Swift.Void)
}
public struct IfStmtSyntaxBuilder {
  public mutating func useLabelName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabelColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useIfKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addCondition(_ elt: SwiftSyntax.ConditionElementSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
  public mutating func useElseKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useElseBody(_ node: SwiftSyntax.Syntax)
}
extension SwiftSyntax.IfStmtSyntax {
  public init(_ build: (inout SwiftSyntax.IfStmtSyntaxBuilder) -> Swift.Void)
}
public struct ElseIfContinuationSyntaxBuilder {
  public mutating func useIfStatement(_ node: SwiftSyntax.IfStmtSyntax)
}
extension SwiftSyntax.ElseIfContinuationSyntax {
  public init(_ build: (inout SwiftSyntax.ElseIfContinuationSyntaxBuilder) -> Swift.Void)
}
public struct ElseBlockSyntaxBuilder {
  public mutating func useElseKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.ElseBlockSyntax {
  public init(_ build: (inout SwiftSyntax.ElseBlockSyntaxBuilder) -> Swift.Void)
}
public struct SwitchCaseSyntaxBuilder {
  public mutating func useUnknownAttr(_ node: SwiftSyntax.AttributeSyntax)
  public mutating func useLabel(_ node: SwiftSyntax.Syntax)
  public mutating func addStatement(_ elt: SwiftSyntax.CodeBlockItemSyntax)
}
extension SwiftSyntax.SwitchCaseSyntax {
  public init(_ build: (inout SwiftSyntax.SwitchCaseSyntaxBuilder) -> Swift.Void)
}
public struct SwitchDefaultLabelSyntaxBuilder {
  public mutating func useDefaultKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.SwitchDefaultLabelSyntax {
  public init(_ build: (inout SwiftSyntax.SwitchDefaultLabelSyntaxBuilder) -> Swift.Void)
}
public struct CaseItemSyntaxBuilder {
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useWhereClause(_ node: SwiftSyntax.WhereClauseSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.CaseItemSyntax {
  public init(_ build: (inout SwiftSyntax.CaseItemSyntaxBuilder) -> Swift.Void)
}
public struct CatchItemSyntaxBuilder {
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useWhereClause(_ node: SwiftSyntax.WhereClauseSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.CatchItemSyntax {
  public init(_ build: (inout SwiftSyntax.CatchItemSyntaxBuilder) -> Swift.Void)
}
public struct SwitchCaseLabelSyntaxBuilder {
  public mutating func useCaseKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addCaseItem(_ elt: SwiftSyntax.CaseItemSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.SwitchCaseLabelSyntax {
  public init(_ build: (inout SwiftSyntax.SwitchCaseLabelSyntaxBuilder) -> Swift.Void)
}
public struct CatchClauseSyntaxBuilder {
  public mutating func useCatchKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addCatchItem(_ elt: SwiftSyntax.CatchItemSyntax)
  public mutating func useBody(_ node: SwiftSyntax.CodeBlockSyntax)
}
extension SwiftSyntax.CatchClauseSyntax {
  public init(_ build: (inout SwiftSyntax.CatchClauseSyntaxBuilder) -> Swift.Void)
}
public struct PoundAssertStmtSyntaxBuilder {
  public mutating func usePoundAssert(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useCondition(_ node: SwiftSyntax.ExprSyntax)
  public mutating func useComma(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useMessage(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.PoundAssertStmtSyntax {
  public init(_ build: (inout SwiftSyntax.PoundAssertStmtSyntaxBuilder) -> Swift.Void)
}
public struct GenericWhereClauseSyntaxBuilder {
  public mutating func useWhereKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addRequirement(_ elt: SwiftSyntax.GenericRequirementSyntax)
}
extension SwiftSyntax.GenericWhereClauseSyntax {
  public init(_ build: (inout SwiftSyntax.GenericWhereClauseSyntaxBuilder) -> Swift.Void)
}
public struct GenericRequirementSyntaxBuilder {
  public mutating func useBody(_ node: SwiftSyntax.Syntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.GenericRequirementSyntax {
  public init(_ build: (inout SwiftSyntax.GenericRequirementSyntaxBuilder) -> Swift.Void)
}
public struct SameTypeRequirementSyntaxBuilder {
  public mutating func useLeftTypeIdentifier(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useEqualityToken(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useRightTypeIdentifier(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.SameTypeRequirementSyntax {
  public init(_ build: (inout SwiftSyntax.SameTypeRequirementSyntaxBuilder) -> Swift.Void)
}
public struct GenericParameterSyntaxBuilder {
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useInheritedType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.GenericParameterSyntax {
  public init(_ build: (inout SwiftSyntax.GenericParameterSyntaxBuilder) -> Swift.Void)
}
public struct GenericParameterClauseSyntaxBuilder {
  public mutating func useLeftAngleBracket(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addGenericParameter(_ elt: SwiftSyntax.GenericParameterSyntax)
  public mutating func useRightAngleBracket(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.GenericParameterClauseSyntax {
  public init(_ build: (inout SwiftSyntax.GenericParameterClauseSyntaxBuilder) -> Swift.Void)
}
public struct ConformanceRequirementSyntaxBuilder {
  public mutating func useLeftTypeIdentifier(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useRightTypeIdentifier(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.ConformanceRequirementSyntax {
  public init(_ build: (inout SwiftSyntax.ConformanceRequirementSyntaxBuilder) -> Swift.Void)
}
public struct SimpleTypeIdentifierSyntaxBuilder {
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericArgumentClause(_ node: SwiftSyntax.GenericArgumentClauseSyntax)
}
extension SwiftSyntax.SimpleTypeIdentifierSyntax {
  public init(_ build: (inout SwiftSyntax.SimpleTypeIdentifierSyntaxBuilder) -> Swift.Void)
}
public struct MemberTypeIdentifierSyntaxBuilder {
  public mutating func useBaseType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func usePeriod(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useGenericArgumentClause(_ node: SwiftSyntax.GenericArgumentClauseSyntax)
}
extension SwiftSyntax.MemberTypeIdentifierSyntax {
  public init(_ build: (inout SwiftSyntax.MemberTypeIdentifierSyntaxBuilder) -> Swift.Void)
}
public struct ClassRestrictionTypeSyntaxBuilder {
  public mutating func useClassKeyword(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ClassRestrictionTypeSyntax {
  public init(_ build: (inout SwiftSyntax.ClassRestrictionTypeSyntaxBuilder) -> Swift.Void)
}
public struct ArrayTypeSyntaxBuilder {
  public mutating func useLeftSquareBracket(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useElementType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useRightSquareBracket(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ArrayTypeSyntax {
  public init(_ build: (inout SwiftSyntax.ArrayTypeSyntaxBuilder) -> Swift.Void)
}
public struct DictionaryTypeSyntaxBuilder {
  public mutating func useLeftSquareBracket(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useKeyType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useValueType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useRightSquareBracket(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.DictionaryTypeSyntax {
  public init(_ build: (inout SwiftSyntax.DictionaryTypeSyntaxBuilder) -> Swift.Void)
}
public struct MetatypeTypeSyntaxBuilder {
  public mutating func useBaseType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func usePeriod(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTypeOrProtocol(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.MetatypeTypeSyntax {
  public init(_ build: (inout SwiftSyntax.MetatypeTypeSyntaxBuilder) -> Swift.Void)
}
public struct OptionalTypeSyntaxBuilder {
  public mutating func useWrappedType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useQuestionMark(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.OptionalTypeSyntax {
  public init(_ build: (inout SwiftSyntax.OptionalTypeSyntaxBuilder) -> Swift.Void)
}
public struct SomeTypeSyntaxBuilder {
  public mutating func useSomeSpecifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useBaseType(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.SomeTypeSyntax {
  public init(_ build: (inout SwiftSyntax.SomeTypeSyntaxBuilder) -> Swift.Void)
}
public struct ImplicitlyUnwrappedOptionalTypeSyntaxBuilder {
  public mutating func useWrappedType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useExclamationMark(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax {
  public init(_ build: (inout SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntaxBuilder) -> Swift.Void)
}
public struct CompositionTypeElementSyntaxBuilder {
  public mutating func useType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useAmpersand(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.CompositionTypeElementSyntax {
  public init(_ build: (inout SwiftSyntax.CompositionTypeElementSyntaxBuilder) -> Swift.Void)
}
public struct CompositionTypeSyntaxBuilder {
  public mutating func addElement(_ elt: SwiftSyntax.CompositionTypeElementSyntax)
}
extension SwiftSyntax.CompositionTypeSyntax {
  public init(_ build: (inout SwiftSyntax.CompositionTypeSyntaxBuilder) -> Swift.Void)
}
public struct TupleTypeElementSyntaxBuilder {
  public mutating func useInOut(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useSecondName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useEllipsis(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useInitializer(_ node: SwiftSyntax.InitializerClauseSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.TupleTypeElementSyntax {
  public init(_ build: (inout SwiftSyntax.TupleTypeElementSyntaxBuilder) -> Swift.Void)
}
public struct TupleTypeSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addElement(_ elt: SwiftSyntax.TupleTypeElementSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.TupleTypeSyntax {
  public init(_ build: (inout SwiftSyntax.TupleTypeSyntaxBuilder) -> Swift.Void)
}
public struct FunctionTypeSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addArgument(_ elt: SwiftSyntax.TupleTypeElementSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useAsyncKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useThrowsOrRethrowsKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useArrow(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useReturnType(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.FunctionTypeSyntax {
  public init(_ build: (inout SwiftSyntax.FunctionTypeSyntaxBuilder) -> Swift.Void)
}
public struct AttributedTypeSyntaxBuilder {
  public mutating func useSpecifier(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addAttribute(_ elt: SwiftSyntax.Syntax)
  public mutating func useBaseType(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.AttributedTypeSyntax {
  public init(_ build: (inout SwiftSyntax.AttributedTypeSyntaxBuilder) -> Swift.Void)
}
public struct GenericArgumentSyntaxBuilder {
  public mutating func useArgumentType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.GenericArgumentSyntax {
  public init(_ build: (inout SwiftSyntax.GenericArgumentSyntaxBuilder) -> Swift.Void)
}
public struct GenericArgumentClauseSyntaxBuilder {
  public mutating func useLeftAngleBracket(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addArgument(_ elt: SwiftSyntax.GenericArgumentSyntax)
  public mutating func useRightAngleBracket(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.GenericArgumentClauseSyntax {
  public init(_ build: (inout SwiftSyntax.GenericArgumentClauseSyntaxBuilder) -> Swift.Void)
}
public struct TypeAnnotationSyntaxBuilder {
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useType(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.TypeAnnotationSyntax {
  public init(_ build: (inout SwiftSyntax.TypeAnnotationSyntaxBuilder) -> Swift.Void)
}
public struct EnumCasePatternSyntaxBuilder {
  public mutating func useType(_ node: SwiftSyntax.TypeSyntax)
  public mutating func usePeriod(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useCaseName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useAssociatedTuple(_ node: SwiftSyntax.TuplePatternSyntax)
}
extension SwiftSyntax.EnumCasePatternSyntax {
  public init(_ build: (inout SwiftSyntax.EnumCasePatternSyntaxBuilder) -> Swift.Void)
}
public struct IsTypePatternSyntaxBuilder {
  public mutating func useIsKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useType(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.IsTypePatternSyntax {
  public init(_ build: (inout SwiftSyntax.IsTypePatternSyntaxBuilder) -> Swift.Void)
}
public struct OptionalPatternSyntaxBuilder {
  public mutating func useSubPattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useQuestionMark(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.OptionalPatternSyntax {
  public init(_ build: (inout SwiftSyntax.OptionalPatternSyntaxBuilder) -> Swift.Void)
}
public struct IdentifierPatternSyntaxBuilder {
  public mutating func useIdentifier(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.IdentifierPatternSyntax {
  public init(_ build: (inout SwiftSyntax.IdentifierPatternSyntaxBuilder) -> Swift.Void)
}
public struct AsTypePatternSyntaxBuilder {
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useAsKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useType(_ node: SwiftSyntax.TypeSyntax)
}
extension SwiftSyntax.AsTypePatternSyntax {
  public init(_ build: (inout SwiftSyntax.AsTypePatternSyntaxBuilder) -> Swift.Void)
}
public struct TuplePatternSyntaxBuilder {
  public mutating func useLeftParen(_ node: SwiftSyntax.TokenSyntax)
  public mutating func addElement(_ elt: SwiftSyntax.TuplePatternElementSyntax)
  public mutating func useRightParen(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.TuplePatternSyntax {
  public init(_ build: (inout SwiftSyntax.TuplePatternSyntaxBuilder) -> Swift.Void)
}
public struct WildcardPatternSyntaxBuilder {
  public mutating func useWildcard(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useTypeAnnotation(_ node: SwiftSyntax.TypeAnnotationSyntax)
}
extension SwiftSyntax.WildcardPatternSyntax {
  public init(_ build: (inout SwiftSyntax.WildcardPatternSyntaxBuilder) -> Swift.Void)
}
public struct TuplePatternElementSyntaxBuilder {
  public mutating func useLabelName(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useLabelColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func usePattern(_ node: SwiftSyntax.PatternSyntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.TuplePatternElementSyntax {
  public init(_ build: (inout SwiftSyntax.TuplePatternElementSyntaxBuilder) -> Swift.Void)
}
public struct ExpressionPatternSyntaxBuilder {
  public mutating func useExpression(_ node: SwiftSyntax.ExprSyntax)
}
extension SwiftSyntax.ExpressionPatternSyntax {
  public init(_ build: (inout SwiftSyntax.ExpressionPatternSyntaxBuilder) -> Swift.Void)
}
public struct ValueBindingPatternSyntaxBuilder {
  public mutating func useLetOrVarKeyword(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useValuePattern(_ node: SwiftSyntax.PatternSyntax)
}
extension SwiftSyntax.ValueBindingPatternSyntax {
  public init(_ build: (inout SwiftSyntax.ValueBindingPatternSyntaxBuilder) -> Swift.Void)
}
public struct AvailabilityArgumentSyntaxBuilder {
  public mutating func useEntry(_ node: SwiftSyntax.Syntax)
  public mutating func useTrailingComma(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.AvailabilityArgumentSyntax {
  public init(_ build: (inout SwiftSyntax.AvailabilityArgumentSyntaxBuilder) -> Swift.Void)
}
public struct AvailabilityLabeledArgumentSyntaxBuilder {
  public mutating func useLabel(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useColon(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useValue(_ node: SwiftSyntax.Syntax)
}
extension SwiftSyntax.AvailabilityLabeledArgumentSyntax {
  public init(_ build: (inout SwiftSyntax.AvailabilityLabeledArgumentSyntaxBuilder) -> Swift.Void)
}
public struct AvailabilityVersionRestrictionSyntaxBuilder {
  public mutating func usePlatform(_ node: SwiftSyntax.TokenSyntax)
  public mutating func useVersion(_ node: SwiftSyntax.VersionTupleSyntax)
}
extension SwiftSyntax.AvailabilityVersionRestrictionSyntax {
  public init(_ build: (inout SwiftSyntax.AvailabilityVersionRestrictionSyntaxBuilder) -> Swift.Void)
}
public struct VersionTupleSyntaxBuilder {
  public mutating func useMajorMinor(_ node: SwiftSyntax.Syntax)
  public mutating func usePatchPeriod(_ node: SwiftSyntax.TokenSyntax)
  public mutating func usePatchVersion(_ node: SwiftSyntax.TokenSyntax)
}
extension SwiftSyntax.VersionTupleSyntax {
  public init(_ build: (inout SwiftSyntax.VersionTupleSyntaxBuilder) -> Swift.Void)
}
public struct UnknownTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.UnknownTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SimpleTypeIdentifierSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SimpleTypeIdentifierSyntax
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set(value)
  }
  public func withGenericArgumentClause(_ newChild: SwiftSyntax.GenericArgumentClauseSyntax?) -> SwiftSyntax.SimpleTypeIdentifierSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SimpleTypeIdentifierSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct MemberTypeIdentifierSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withBaseType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.MemberTypeIdentifierSyntax
  public var period: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPeriod(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MemberTypeIdentifierSyntax
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MemberTypeIdentifierSyntax
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set(value)
  }
  public func withGenericArgumentClause(_ newChild: SwiftSyntax.GenericArgumentClauseSyntax?) -> SwiftSyntax.MemberTypeIdentifierSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MemberTypeIdentifierSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ClassRestrictionTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var classKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withClassKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClassRestrictionTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClassRestrictionTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ArrayTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftSquareBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrayTypeSyntax
  public var elementType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withElementType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.ArrayTypeSyntax
  public var rightSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightSquareBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrayTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ArrayTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DictionaryTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftSquareBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DictionaryTypeSyntax
  public var keyType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withKeyType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.DictionaryTypeSyntax
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withColon(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DictionaryTypeSyntax
  public var valueType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withValueType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.DictionaryTypeSyntax
  public var rightSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightSquareBracket(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DictionaryTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DictionaryTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct MetatypeTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withBaseType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.MetatypeTypeSyntax
  public var period: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPeriod(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MetatypeTypeSyntax
  public var typeOrProtocol: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withTypeOrProtocol(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MetatypeTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MetatypeTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct OptionalTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var wrappedType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withWrappedType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.OptionalTypeSyntax
  public var questionMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withQuestionMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.OptionalTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.OptionalTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SomeTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var someSpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withSomeSpecifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SomeTypeSyntax
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withBaseType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.SomeTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SomeTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ImplicitlyUnwrappedOptionalTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var wrappedType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withWrappedType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax
  public var exclamationMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withExclamationMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct CompositionTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var elements: SwiftSyntax.CompositionTypeElementListSyntax {
    get
    set(value)
  }
  public func addElement(_ element: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.CompositionTypeSyntax
  public func withElements(_ newChild: SwiftSyntax.CompositionTypeElementListSyntax?) -> SwiftSyntax.CompositionTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CompositionTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TupleTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeSyntax
  public var elements: SwiftSyntax.TupleTypeElementListSyntax {
    get
    set(value)
  }
  public func addElement(_ element: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.TupleTypeSyntax
  public func withElements(_ newChild: SwiftSyntax.TupleTypeElementListSyntax?) -> SwiftSyntax.TupleTypeSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TupleTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct FunctionTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionTypeSyntax
  public var arguments: SwiftSyntax.TupleTypeElementListSyntax {
    get
    set(value)
  }
  public func addArgument(_ element: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.FunctionTypeSyntax
  public func withArguments(_ newChild: SwiftSyntax.TupleTypeElementListSyntax?) -> SwiftSyntax.FunctionTypeSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionTypeSyntax
  public var asyncKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAsyncKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionTypeSyntax
  public var throwsOrRethrowsKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withThrowsOrRethrowsKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionTypeSyntax
  public var arrow: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withArrow(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionTypeSyntax
  public var returnType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withReturnType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.FunctionTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FunctionTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AttributedTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var specifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withSpecifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AttributedTypeSyntax
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.AttributedTypeSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.AttributedTypeSyntax
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withBaseType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.AttributedTypeSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AttributedTypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public enum SyntaxClassification {
  case none
  case keyword
  case identifier
  case typeIdentifier
  case dollarIdentifier
  case integerLiteral
  case floatingLiteral
  case stringLiteral
  case stringInterpolationAnchor
  case poundDirectiveKeyword
  case buildConfigId
  case attribute
  case objectLiteral
  case editorPlaceholder
  case lineComment
  case docLineComment
  case blockComment
  case docBlockComment
  public static func == (a: SwiftSyntax.SyntaxClassification, b: SwiftSyntax.SyntaxClassification) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SyntaxNode {
  public var isUnknown: Swift.Bool {
    get
  }
  public var asUnknown: SwiftSyntax.UnknownSyntax? {
    get
  }
  public var isUnknownDecl: Swift.Bool {
    get
  }
  public var asUnknownDecl: SwiftSyntax.UnknownDeclSyntax? {
    get
  }
  public var isUnknownExpr: Swift.Bool {
    get
  }
  public var asUnknownExpr: SwiftSyntax.UnknownExprSyntax? {
    get
  }
  public var isUnknownStmt: Swift.Bool {
    get
  }
  public var asUnknownStmt: SwiftSyntax.UnknownStmtSyntax? {
    get
  }
  public var isUnknownType: Swift.Bool {
    get
  }
  public var asUnknownType: SwiftSyntax.UnknownTypeSyntax? {
    get
  }
  public var isUnknownPattern: Swift.Bool {
    get
  }
  public var asUnknownPattern: SwiftSyntax.UnknownPatternSyntax? {
    get
  }
  public var isCodeBlockItem: Swift.Bool {
    get
  }
  public var asCodeBlockItem: SwiftSyntax.CodeBlockItemSyntax? {
    get
  }
  public var isCodeBlockItemList: Swift.Bool {
    get
  }
  public var asCodeBlockItemList: SwiftSyntax.CodeBlockItemListSyntax? {
    get
  }
  public var isCodeBlock: Swift.Bool {
    get
  }
  public var asCodeBlock: SwiftSyntax.CodeBlockSyntax? {
    get
  }
  public var isInOutExpr: Swift.Bool {
    get
  }
  public var asInOutExpr: SwiftSyntax.InOutExprSyntax? {
    get
  }
  public var isPoundColumnExpr: Swift.Bool {
    get
  }
  public var asPoundColumnExpr: SwiftSyntax.PoundColumnExprSyntax? {
    get
  }
  public var isTupleExprElementList: Swift.Bool {
    get
  }
  public var asTupleExprElementList: SwiftSyntax.TupleExprElementListSyntax? {
    get
  }
  public var isArrayElementList: Swift.Bool {
    get
  }
  public var asArrayElementList: SwiftSyntax.ArrayElementListSyntax? {
    get
  }
  public var isDictionaryElementList: Swift.Bool {
    get
  }
  public var asDictionaryElementList: SwiftSyntax.DictionaryElementListSyntax? {
    get
  }
  public var isStringLiteralSegments: Swift.Bool {
    get
  }
  public var asStringLiteralSegments: SwiftSyntax.StringLiteralSegmentsSyntax? {
    get
  }
  public var isTryExpr: Swift.Bool {
    get
  }
  public var asTryExpr: SwiftSyntax.TryExprSyntax? {
    get
  }
  public var isAwaitExpr: Swift.Bool {
    get
  }
  public var asAwaitExpr: SwiftSyntax.AwaitExprSyntax? {
    get
  }
  public var isDeclNameArgument: Swift.Bool {
    get
  }
  public var asDeclNameArgument: SwiftSyntax.DeclNameArgumentSyntax? {
    get
  }
  public var isDeclNameArgumentList: Swift.Bool {
    get
  }
  public var asDeclNameArgumentList: SwiftSyntax.DeclNameArgumentListSyntax? {
    get
  }
  public var isDeclNameArguments: Swift.Bool {
    get
  }
  public var asDeclNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
  }
  public var isIdentifierExpr: Swift.Bool {
    get
  }
  public var asIdentifierExpr: SwiftSyntax.IdentifierExprSyntax? {
    get
  }
  public var isSuperRefExpr: Swift.Bool {
    get
  }
  public var asSuperRefExpr: SwiftSyntax.SuperRefExprSyntax? {
    get
  }
  public var isNilLiteralExpr: Swift.Bool {
    get
  }
  public var asNilLiteralExpr: SwiftSyntax.NilLiteralExprSyntax? {
    get
  }
  public var isDiscardAssignmentExpr: Swift.Bool {
    get
  }
  public var asDiscardAssignmentExpr: SwiftSyntax.DiscardAssignmentExprSyntax? {
    get
  }
  public var isAssignmentExpr: Swift.Bool {
    get
  }
  public var asAssignmentExpr: SwiftSyntax.AssignmentExprSyntax? {
    get
  }
  public var isSequenceExpr: Swift.Bool {
    get
  }
  public var asSequenceExpr: SwiftSyntax.SequenceExprSyntax? {
    get
  }
  public var isExprList: Swift.Bool {
    get
  }
  public var asExprList: SwiftSyntax.ExprListSyntax? {
    get
  }
  public var isPoundLineExpr: Swift.Bool {
    get
  }
  public var asPoundLineExpr: SwiftSyntax.PoundLineExprSyntax? {
    get
  }
  public var isPoundFileExpr: Swift.Bool {
    get
  }
  public var asPoundFileExpr: SwiftSyntax.PoundFileExprSyntax? {
    get
  }
  public var isPoundFileIDExpr: Swift.Bool {
    get
  }
  public var asPoundFileIDExpr: SwiftSyntax.PoundFileIDExprSyntax? {
    get
  }
  public var isPoundFilePathExpr: Swift.Bool {
    get
  }
  public var asPoundFilePathExpr: SwiftSyntax.PoundFilePathExprSyntax? {
    get
  }
  public var isPoundFunctionExpr: Swift.Bool {
    get
  }
  public var asPoundFunctionExpr: SwiftSyntax.PoundFunctionExprSyntax? {
    get
  }
  public var isPoundDsohandleExpr: Swift.Bool {
    get
  }
  public var asPoundDsohandleExpr: SwiftSyntax.PoundDsohandleExprSyntax? {
    get
  }
  public var isSymbolicReferenceExpr: Swift.Bool {
    get
  }
  public var asSymbolicReferenceExpr: SwiftSyntax.SymbolicReferenceExprSyntax? {
    get
  }
  public var isPrefixOperatorExpr: Swift.Bool {
    get
  }
  public var asPrefixOperatorExpr: SwiftSyntax.PrefixOperatorExprSyntax? {
    get
  }
  public var isBinaryOperatorExpr: Swift.Bool {
    get
  }
  public var asBinaryOperatorExpr: SwiftSyntax.BinaryOperatorExprSyntax? {
    get
  }
  public var isArrowExpr: Swift.Bool {
    get
  }
  public var asArrowExpr: SwiftSyntax.ArrowExprSyntax? {
    get
  }
  public var isFloatLiteralExpr: Swift.Bool {
    get
  }
  public var asFloatLiteralExpr: SwiftSyntax.FloatLiteralExprSyntax? {
    get
  }
  public var isTupleExpr: Swift.Bool {
    get
  }
  public var asTupleExpr: SwiftSyntax.TupleExprSyntax? {
    get
  }
  public var isArrayExpr: Swift.Bool {
    get
  }
  public var asArrayExpr: SwiftSyntax.ArrayExprSyntax? {
    get
  }
  public var isDictionaryExpr: Swift.Bool {
    get
  }
  public var asDictionaryExpr: SwiftSyntax.DictionaryExprSyntax? {
    get
  }
  public var isTupleExprElement: Swift.Bool {
    get
  }
  public var asTupleExprElement: SwiftSyntax.TupleExprElementSyntax? {
    get
  }
  public var isArrayElement: Swift.Bool {
    get
  }
  public var asArrayElement: SwiftSyntax.ArrayElementSyntax? {
    get
  }
  public var isDictionaryElement: Swift.Bool {
    get
  }
  public var asDictionaryElement: SwiftSyntax.DictionaryElementSyntax? {
    get
  }
  public var isIntegerLiteralExpr: Swift.Bool {
    get
  }
  public var asIntegerLiteralExpr: SwiftSyntax.IntegerLiteralExprSyntax? {
    get
  }
  public var isBooleanLiteralExpr: Swift.Bool {
    get
  }
  public var asBooleanLiteralExpr: SwiftSyntax.BooleanLiteralExprSyntax? {
    get
  }
  public var isTernaryExpr: Swift.Bool {
    get
  }
  public var asTernaryExpr: SwiftSyntax.TernaryExprSyntax? {
    get
  }
  public var isMemberAccessExpr: Swift.Bool {
    get
  }
  public var asMemberAccessExpr: SwiftSyntax.MemberAccessExprSyntax? {
    get
  }
  public var isIsExpr: Swift.Bool {
    get
  }
  public var asIsExpr: SwiftSyntax.IsExprSyntax? {
    get
  }
  public var isAsExpr: Swift.Bool {
    get
  }
  public var asAsExpr: SwiftSyntax.AsExprSyntax? {
    get
  }
  public var isTypeExpr: Swift.Bool {
    get
  }
  public var asTypeExpr: SwiftSyntax.TypeExprSyntax? {
    get
  }
  public var isClosureCaptureItem: Swift.Bool {
    get
  }
  public var asClosureCaptureItem: SwiftSyntax.ClosureCaptureItemSyntax? {
    get
  }
  public var isClosureCaptureItemList: Swift.Bool {
    get
  }
  public var asClosureCaptureItemList: SwiftSyntax.ClosureCaptureItemListSyntax? {
    get
  }
  public var isClosureCaptureSignature: Swift.Bool {
    get
  }
  public var asClosureCaptureSignature: SwiftSyntax.ClosureCaptureSignatureSyntax? {
    get
  }
  public var isClosureParam: Swift.Bool {
    get
  }
  public var asClosureParam: SwiftSyntax.ClosureParamSyntax? {
    get
  }
  public var isClosureParamList: Swift.Bool {
    get
  }
  public var asClosureParamList: SwiftSyntax.ClosureParamListSyntax? {
    get
  }
  public var isClosureSignature: Swift.Bool {
    get
  }
  public var asClosureSignature: SwiftSyntax.ClosureSignatureSyntax? {
    get
  }
  public var isClosureExpr: Swift.Bool {
    get
  }
  public var asClosureExpr: SwiftSyntax.ClosureExprSyntax? {
    get
  }
  public var isUnresolvedPatternExpr: Swift.Bool {
    get
  }
  public var asUnresolvedPatternExpr: SwiftSyntax.UnresolvedPatternExprSyntax? {
    get
  }
  public var isMultipleTrailingClosureElement: Swift.Bool {
    get
  }
  public var asMultipleTrailingClosureElement: SwiftSyntax.MultipleTrailingClosureElementSyntax? {
    get
  }
  public var isMultipleTrailingClosureElementList: Swift.Bool {
    get
  }
  public var asMultipleTrailingClosureElementList: SwiftSyntax.MultipleTrailingClosureElementListSyntax? {
    get
  }
  public var isFunctionCallExpr: Swift.Bool {
    get
  }
  public var asFunctionCallExpr: SwiftSyntax.FunctionCallExprSyntax? {
    get
  }
  public var isSubscriptExpr: Swift.Bool {
    get
  }
  public var asSubscriptExpr: SwiftSyntax.SubscriptExprSyntax? {
    get
  }
  public var isOptionalChainingExpr: Swift.Bool {
    get
  }
  public var asOptionalChainingExpr: SwiftSyntax.OptionalChainingExprSyntax? {
    get
  }
  public var isForcedValueExpr: Swift.Bool {
    get
  }
  public var asForcedValueExpr: SwiftSyntax.ForcedValueExprSyntax? {
    get
  }
  public var isPostfixUnaryExpr: Swift.Bool {
    get
  }
  public var asPostfixUnaryExpr: SwiftSyntax.PostfixUnaryExprSyntax? {
    get
  }
  public var isSpecializeExpr: Swift.Bool {
    get
  }
  public var asSpecializeExpr: SwiftSyntax.SpecializeExprSyntax? {
    get
  }
  public var isStringSegment: Swift.Bool {
    get
  }
  public var asStringSegment: SwiftSyntax.StringSegmentSyntax? {
    get
  }
  public var isExpressionSegment: Swift.Bool {
    get
  }
  public var asExpressionSegment: SwiftSyntax.ExpressionSegmentSyntax? {
    get
  }
  public var isStringLiteralExpr: Swift.Bool {
    get
  }
  public var asStringLiteralExpr: SwiftSyntax.StringLiteralExprSyntax? {
    get
  }
  public var isKeyPathExpr: Swift.Bool {
    get
  }
  public var asKeyPathExpr: SwiftSyntax.KeyPathExprSyntax? {
    get
  }
  public var isKeyPathBaseExpr: Swift.Bool {
    get
  }
  public var asKeyPathBaseExpr: SwiftSyntax.KeyPathBaseExprSyntax? {
    get
  }
  public var isObjcNamePiece: Swift.Bool {
    get
  }
  public var asObjcNamePiece: SwiftSyntax.ObjcNamePieceSyntax? {
    get
  }
  public var isObjcName: Swift.Bool {
    get
  }
  public var asObjcName: SwiftSyntax.ObjcNameSyntax? {
    get
  }
  public var isObjcKeyPathExpr: Swift.Bool {
    get
  }
  public var asObjcKeyPathExpr: SwiftSyntax.ObjcKeyPathExprSyntax? {
    get
  }
  public var isObjcSelectorExpr: Swift.Bool {
    get
  }
  public var asObjcSelectorExpr: SwiftSyntax.ObjcSelectorExprSyntax? {
    get
  }
  public var isPostfixIfConfigExpr: Swift.Bool {
    get
  }
  public var asPostfixIfConfigExpr: SwiftSyntax.PostfixIfConfigExprSyntax? {
    get
  }
  public var isEditorPlaceholderExpr: Swift.Bool {
    get
  }
  public var asEditorPlaceholderExpr: SwiftSyntax.EditorPlaceholderExprSyntax? {
    get
  }
  public var isObjectLiteralExpr: Swift.Bool {
    get
  }
  public var asObjectLiteralExpr: SwiftSyntax.ObjectLiteralExprSyntax? {
    get
  }
  public var isTypeInitializerClause: Swift.Bool {
    get
  }
  public var asTypeInitializerClause: SwiftSyntax.TypeInitializerClauseSyntax? {
    get
  }
  public var isTypealiasDecl: Swift.Bool {
    get
  }
  public var asTypealiasDecl: SwiftSyntax.TypealiasDeclSyntax? {
    get
  }
  public var isAssociatedtypeDecl: Swift.Bool {
    get
  }
  public var asAssociatedtypeDecl: SwiftSyntax.AssociatedtypeDeclSyntax? {
    get
  }
  public var isFunctionParameterList: Swift.Bool {
    get
  }
  public var asFunctionParameterList: SwiftSyntax.FunctionParameterListSyntax? {
    get
  }
  public var isParameterClause: Swift.Bool {
    get
  }
  public var asParameterClause: SwiftSyntax.ParameterClauseSyntax? {
    get
  }
  public var isReturnClause: Swift.Bool {
    get
  }
  public var asReturnClause: SwiftSyntax.ReturnClauseSyntax? {
    get
  }
  public var isFunctionSignature: Swift.Bool {
    get
  }
  public var asFunctionSignature: SwiftSyntax.FunctionSignatureSyntax? {
    get
  }
  public var isIfConfigClause: Swift.Bool {
    get
  }
  public var asIfConfigClause: SwiftSyntax.IfConfigClauseSyntax? {
    get
  }
  public var isIfConfigClauseList: Swift.Bool {
    get
  }
  public var asIfConfigClauseList: SwiftSyntax.IfConfigClauseListSyntax? {
    get
  }
  public var isIfConfigDecl: Swift.Bool {
    get
  }
  public var asIfConfigDecl: SwiftSyntax.IfConfigDeclSyntax? {
    get
  }
  public var isPoundErrorDecl: Swift.Bool {
    get
  }
  public var asPoundErrorDecl: SwiftSyntax.PoundErrorDeclSyntax? {
    get
  }
  public var isPoundWarningDecl: Swift.Bool {
    get
  }
  public var asPoundWarningDecl: SwiftSyntax.PoundWarningDeclSyntax? {
    get
  }
  public var isPoundSourceLocation: Swift.Bool {
    get
  }
  public var asPoundSourceLocation: SwiftSyntax.PoundSourceLocationSyntax? {
    get
  }
  public var isPoundSourceLocationArgs: Swift.Bool {
    get
  }
  public var asPoundSourceLocationArgs: SwiftSyntax.PoundSourceLocationArgsSyntax? {
    get
  }
  public var isDeclModifier: Swift.Bool {
    get
  }
  public var asDeclModifier: SwiftSyntax.DeclModifierSyntax? {
    get
  }
  public var isInheritedType: Swift.Bool {
    get
  }
  public var asInheritedType: SwiftSyntax.InheritedTypeSyntax? {
    get
  }
  public var isInheritedTypeList: Swift.Bool {
    get
  }
  public var asInheritedTypeList: SwiftSyntax.InheritedTypeListSyntax? {
    get
  }
  public var isTypeInheritanceClause: Swift.Bool {
    get
  }
  public var asTypeInheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax? {
    get
  }
  public var isClassDecl: Swift.Bool {
    get
  }
  public var asClassDecl: SwiftSyntax.ClassDeclSyntax? {
    get
  }
  public var isStructDecl: Swift.Bool {
    get
  }
  public var asStructDecl: SwiftSyntax.StructDeclSyntax? {
    get
  }
  public var isProtocolDecl: Swift.Bool {
    get
  }
  public var asProtocolDecl: SwiftSyntax.ProtocolDeclSyntax? {
    get
  }
  public var isExtensionDecl: Swift.Bool {
    get
  }
  public var asExtensionDecl: SwiftSyntax.ExtensionDeclSyntax? {
    get
  }
  public var isMemberDeclBlock: Swift.Bool {
    get
  }
  public var asMemberDeclBlock: SwiftSyntax.MemberDeclBlockSyntax? {
    get
  }
  public var isMemberDeclList: Swift.Bool {
    get
  }
  public var asMemberDeclList: SwiftSyntax.MemberDeclListSyntax? {
    get
  }
  public var isMemberDeclListItem: Swift.Bool {
    get
  }
  public var asMemberDeclListItem: SwiftSyntax.MemberDeclListItemSyntax? {
    get
  }
  public var isSourceFile: Swift.Bool {
    get
  }
  public var asSourceFile: SwiftSyntax.SourceFileSyntax? {
    get
  }
  public var isInitializerClause: Swift.Bool {
    get
  }
  public var asInitializerClause: SwiftSyntax.InitializerClauseSyntax? {
    get
  }
  public var isFunctionParameter: Swift.Bool {
    get
  }
  public var asFunctionParameter: SwiftSyntax.FunctionParameterSyntax? {
    get
  }
  public var isModifierList: Swift.Bool {
    get
  }
  public var asModifierList: SwiftSyntax.ModifierListSyntax? {
    get
  }
  public var isFunctionDecl: Swift.Bool {
    get
  }
  public var asFunctionDecl: SwiftSyntax.FunctionDeclSyntax? {
    get
  }
  public var isInitializerDecl: Swift.Bool {
    get
  }
  public var asInitializerDecl: SwiftSyntax.InitializerDeclSyntax? {
    get
  }
  public var isDeinitializerDecl: Swift.Bool {
    get
  }
  public var asDeinitializerDecl: SwiftSyntax.DeinitializerDeclSyntax? {
    get
  }
  public var isSubscriptDecl: Swift.Bool {
    get
  }
  public var asSubscriptDecl: SwiftSyntax.SubscriptDeclSyntax? {
    get
  }
  public var isAccessLevelModifier: Swift.Bool {
    get
  }
  public var asAccessLevelModifier: SwiftSyntax.AccessLevelModifierSyntax? {
    get
  }
  public var isAccessPathComponent: Swift.Bool {
    get
  }
  public var asAccessPathComponent: SwiftSyntax.AccessPathComponentSyntax? {
    get
  }
  public var isAccessPath: Swift.Bool {
    get
  }
  public var asAccessPath: SwiftSyntax.AccessPathSyntax? {
    get
  }
  public var isImportDecl: Swift.Bool {
    get
  }
  public var asImportDecl: SwiftSyntax.ImportDeclSyntax? {
    get
  }
  public var isAccessorParameter: Swift.Bool {
    get
  }
  public var asAccessorParameter: SwiftSyntax.AccessorParameterSyntax? {
    get
  }
  public var isAccessorDecl: Swift.Bool {
    get
  }
  public var asAccessorDecl: SwiftSyntax.AccessorDeclSyntax? {
    get
  }
  public var isAccessorList: Swift.Bool {
    get
  }
  public var asAccessorList: SwiftSyntax.AccessorListSyntax? {
    get
  }
  public var isAccessorBlock: Swift.Bool {
    get
  }
  public var asAccessorBlock: SwiftSyntax.AccessorBlockSyntax? {
    get
  }
  public var isPatternBinding: Swift.Bool {
    get
  }
  public var asPatternBinding: SwiftSyntax.PatternBindingSyntax? {
    get
  }
  public var isPatternBindingList: Swift.Bool {
    get
  }
  public var asPatternBindingList: SwiftSyntax.PatternBindingListSyntax? {
    get
  }
  public var isVariableDecl: Swift.Bool {
    get
  }
  public var asVariableDecl: SwiftSyntax.VariableDeclSyntax? {
    get
  }
  public var isEnumCaseElement: Swift.Bool {
    get
  }
  public var asEnumCaseElement: SwiftSyntax.EnumCaseElementSyntax? {
    get
  }
  public var isEnumCaseElementList: Swift.Bool {
    get
  }
  public var asEnumCaseElementList: SwiftSyntax.EnumCaseElementListSyntax? {
    get
  }
  public var isEnumCaseDecl: Swift.Bool {
    get
  }
  public var asEnumCaseDecl: SwiftSyntax.EnumCaseDeclSyntax? {
    get
  }
  public var isEnumDecl: Swift.Bool {
    get
  }
  public var asEnumDecl: SwiftSyntax.EnumDeclSyntax? {
    get
  }
  public var isOperatorDecl: Swift.Bool {
    get
  }
  public var asOperatorDecl: SwiftSyntax.OperatorDeclSyntax? {
    get
  }
  public var isIdentifierList: Swift.Bool {
    get
  }
  public var asIdentifierList: SwiftSyntax.IdentifierListSyntax? {
    get
  }
  public var isOperatorPrecedenceAndTypes: Swift.Bool {
    get
  }
  public var asOperatorPrecedenceAndTypes: SwiftSyntax.OperatorPrecedenceAndTypesSyntax? {
    get
  }
  public var isPrecedenceGroupDecl: Swift.Bool {
    get
  }
  public var asPrecedenceGroupDecl: SwiftSyntax.PrecedenceGroupDeclSyntax? {
    get
  }
  public var isPrecedenceGroupAttributeList: Swift.Bool {
    get
  }
  public var asPrecedenceGroupAttributeList: SwiftSyntax.PrecedenceGroupAttributeListSyntax? {
    get
  }
  public var isPrecedenceGroupRelation: Swift.Bool {
    get
  }
  public var asPrecedenceGroupRelation: SwiftSyntax.PrecedenceGroupRelationSyntax? {
    get
  }
  public var isPrecedenceGroupNameList: Swift.Bool {
    get
  }
  public var asPrecedenceGroupNameList: SwiftSyntax.PrecedenceGroupNameListSyntax? {
    get
  }
  public var isPrecedenceGroupNameElement: Swift.Bool {
    get
  }
  public var asPrecedenceGroupNameElement: SwiftSyntax.PrecedenceGroupNameElementSyntax? {
    get
  }
  public var isPrecedenceGroupAssignment: Swift.Bool {
    get
  }
  public var asPrecedenceGroupAssignment: SwiftSyntax.PrecedenceGroupAssignmentSyntax? {
    get
  }
  public var isPrecedenceGroupAssociativity: Swift.Bool {
    get
  }
  public var asPrecedenceGroupAssociativity: SwiftSyntax.PrecedenceGroupAssociativitySyntax? {
    get
  }
  public var isTokenList: Swift.Bool {
    get
  }
  public var asTokenList: SwiftSyntax.TokenListSyntax? {
    get
  }
  public var isNonEmptyTokenList: Swift.Bool {
    get
  }
  public var asNonEmptyTokenList: SwiftSyntax.NonEmptyTokenListSyntax? {
    get
  }
  public var isCustomAttribute: Swift.Bool {
    get
  }
  public var asCustomAttribute: SwiftSyntax.CustomAttributeSyntax? {
    get
  }
  public var isAttribute: Swift.Bool {
    get
  }
  public var asAttribute: SwiftSyntax.AttributeSyntax? {
    get
  }
  public var isAttributeList: Swift.Bool {
    get
  }
  public var asAttributeList: SwiftSyntax.AttributeListSyntax? {
    get
  }
  public var isSpecializeAttributeSpecList: Swift.Bool {
    get
  }
  public var asSpecializeAttributeSpecList: SwiftSyntax.SpecializeAttributeSpecListSyntax? {
    get
  }
  public var isLabeledSpecializeEntry: Swift.Bool {
    get
  }
  public var asLabeledSpecializeEntry: SwiftSyntax.LabeledSpecializeEntrySyntax? {
    get
  }
  public var isTargetFunctionEntry: Swift.Bool {
    get
  }
  public var asTargetFunctionEntry: SwiftSyntax.TargetFunctionEntrySyntax? {
    get
  }
  public var isNamedAttributeStringArgument: Swift.Bool {
    get
  }
  public var asNamedAttributeStringArgument: SwiftSyntax.NamedAttributeStringArgumentSyntax? {
    get
  }
  public var isDeclName: Swift.Bool {
    get
  }
  public var asDeclName: SwiftSyntax.DeclNameSyntax? {
    get
  }
  public var isImplementsAttributeArguments: Swift.Bool {
    get
  }
  public var asImplementsAttributeArguments: SwiftSyntax.ImplementsAttributeArgumentsSyntax? {
    get
  }
  public var isObjCSelectorPiece: Swift.Bool {
    get
  }
  public var asObjCSelectorPiece: SwiftSyntax.ObjCSelectorPieceSyntax? {
    get
  }
  public var isObjCSelector: Swift.Bool {
    get
  }
  public var asObjCSelector: SwiftSyntax.ObjCSelectorSyntax? {
    get
  }
  public var isDifferentiableAttributeArguments: Swift.Bool {
    get
  }
  public var asDifferentiableAttributeArguments: SwiftSyntax.DifferentiableAttributeArgumentsSyntax? {
    get
  }
  public var isDifferentiabilityParamsClause: Swift.Bool {
    get
  }
  public var asDifferentiabilityParamsClause: SwiftSyntax.DifferentiabilityParamsClauseSyntax? {
    get
  }
  public var isDifferentiabilityParams: Swift.Bool {
    get
  }
  public var asDifferentiabilityParams: SwiftSyntax.DifferentiabilityParamsSyntax? {
    get
  }
  public var isDifferentiabilityParamList: Swift.Bool {
    get
  }
  public var asDifferentiabilityParamList: SwiftSyntax.DifferentiabilityParamListSyntax? {
    get
  }
  public var isDifferentiabilityParam: Swift.Bool {
    get
  }
  public var asDifferentiabilityParam: SwiftSyntax.DifferentiabilityParamSyntax? {
    get
  }
  public var isDerivativeRegistrationAttributeArguments: Swift.Bool {
    get
  }
  public var asDerivativeRegistrationAttributeArguments: SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax? {
    get
  }
  public var isQualifiedDeclName: Swift.Bool {
    get
  }
  public var asQualifiedDeclName: SwiftSyntax.QualifiedDeclNameSyntax? {
    get
  }
  public var isFunctionDeclName: Swift.Bool {
    get
  }
  public var asFunctionDeclName: SwiftSyntax.FunctionDeclNameSyntax? {
    get
  }
  public var isContinueStmt: Swift.Bool {
    get
  }
  public var asContinueStmt: SwiftSyntax.ContinueStmtSyntax? {
    get
  }
  public var isWhileStmt: Swift.Bool {
    get
  }
  public var asWhileStmt: SwiftSyntax.WhileStmtSyntax? {
    get
  }
  public var isDeferStmt: Swift.Bool {
    get
  }
  public var asDeferStmt: SwiftSyntax.DeferStmtSyntax? {
    get
  }
  public var isExpressionStmt: Swift.Bool {
    get
  }
  public var asExpressionStmt: SwiftSyntax.ExpressionStmtSyntax? {
    get
  }
  public var isSwitchCaseList: Swift.Bool {
    get
  }
  public var asSwitchCaseList: SwiftSyntax.SwitchCaseListSyntax? {
    get
  }
  public var isRepeatWhileStmt: Swift.Bool {
    get
  }
  public var asRepeatWhileStmt: SwiftSyntax.RepeatWhileStmtSyntax? {
    get
  }
  public var isGuardStmt: Swift.Bool {
    get
  }
  public var asGuardStmt: SwiftSyntax.GuardStmtSyntax? {
    get
  }
  public var isWhereClause: Swift.Bool {
    get
  }
  public var asWhereClause: SwiftSyntax.WhereClauseSyntax? {
    get
  }
  public var isForInStmt: Swift.Bool {
    get
  }
  public var asForInStmt: SwiftSyntax.ForInStmtSyntax? {
    get
  }
  public var isSwitchStmt: Swift.Bool {
    get
  }
  public var asSwitchStmt: SwiftSyntax.SwitchStmtSyntax? {
    get
  }
  public var isCatchClauseList: Swift.Bool {
    get
  }
  public var asCatchClauseList: SwiftSyntax.CatchClauseListSyntax? {
    get
  }
  public var isDoStmt: Swift.Bool {
    get
  }
  public var asDoStmt: SwiftSyntax.DoStmtSyntax? {
    get
  }
  public var isReturnStmt: Swift.Bool {
    get
  }
  public var asReturnStmt: SwiftSyntax.ReturnStmtSyntax? {
    get
  }
  public var isYieldStmt: Swift.Bool {
    get
  }
  public var asYieldStmt: SwiftSyntax.YieldStmtSyntax? {
    get
  }
  public var isYieldList: Swift.Bool {
    get
  }
  public var asYieldList: SwiftSyntax.YieldListSyntax? {
    get
  }
  public var isFallthroughStmt: Swift.Bool {
    get
  }
  public var asFallthroughStmt: SwiftSyntax.FallthroughStmtSyntax? {
    get
  }
  public var isBreakStmt: Swift.Bool {
    get
  }
  public var asBreakStmt: SwiftSyntax.BreakStmtSyntax? {
    get
  }
  public var isCaseItemList: Swift.Bool {
    get
  }
  public var asCaseItemList: SwiftSyntax.CaseItemListSyntax? {
    get
  }
  public var isCatchItemList: Swift.Bool {
    get
  }
  public var asCatchItemList: SwiftSyntax.CatchItemListSyntax? {
    get
  }
  public var isConditionElement: Swift.Bool {
    get
  }
  public var asConditionElement: SwiftSyntax.ConditionElementSyntax? {
    get
  }
  public var isAvailabilityCondition: Swift.Bool {
    get
  }
  public var asAvailabilityCondition: SwiftSyntax.AvailabilityConditionSyntax? {
    get
  }
  public var isMatchingPatternCondition: Swift.Bool {
    get
  }
  public var asMatchingPatternCondition: SwiftSyntax.MatchingPatternConditionSyntax? {
    get
  }
  public var isOptionalBindingCondition: Swift.Bool {
    get
  }
  public var asOptionalBindingCondition: SwiftSyntax.OptionalBindingConditionSyntax? {
    get
  }
  public var isConditionElementList: Swift.Bool {
    get
  }
  public var asConditionElementList: SwiftSyntax.ConditionElementListSyntax? {
    get
  }
  public var isDeclarationStmt: Swift.Bool {
    get
  }
  public var asDeclarationStmt: SwiftSyntax.DeclarationStmtSyntax? {
    get
  }
  public var isThrowStmt: Swift.Bool {
    get
  }
  public var asThrowStmt: SwiftSyntax.ThrowStmtSyntax? {
    get
  }
  public var isIfStmt: Swift.Bool {
    get
  }
  public var asIfStmt: SwiftSyntax.IfStmtSyntax? {
    get
  }
  public var isElseIfContinuation: Swift.Bool {
    get
  }
  public var asElseIfContinuation: SwiftSyntax.ElseIfContinuationSyntax? {
    get
  }
  public var isElseBlock: Swift.Bool {
    get
  }
  public var asElseBlock: SwiftSyntax.ElseBlockSyntax? {
    get
  }
  public var isSwitchCase: Swift.Bool {
    get
  }
  public var asSwitchCase: SwiftSyntax.SwitchCaseSyntax? {
    get
  }
  public var isSwitchDefaultLabel: Swift.Bool {
    get
  }
  public var asSwitchDefaultLabel: SwiftSyntax.SwitchDefaultLabelSyntax? {
    get
  }
  public var isCaseItem: Swift.Bool {
    get
  }
  public var asCaseItem: SwiftSyntax.CaseItemSyntax? {
    get
  }
  public var isCatchItem: Swift.Bool {
    get
  }
  public var asCatchItem: SwiftSyntax.CatchItemSyntax? {
    get
  }
  public var isSwitchCaseLabel: Swift.Bool {
    get
  }
  public var asSwitchCaseLabel: SwiftSyntax.SwitchCaseLabelSyntax? {
    get
  }
  public var isCatchClause: Swift.Bool {
    get
  }
  public var asCatchClause: SwiftSyntax.CatchClauseSyntax? {
    get
  }
  public var isPoundAssertStmt: Swift.Bool {
    get
  }
  public var asPoundAssertStmt: SwiftSyntax.PoundAssertStmtSyntax? {
    get
  }
  public var isGenericWhereClause: Swift.Bool {
    get
  }
  public var asGenericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
  }
  public var isGenericRequirementList: Swift.Bool {
    get
  }
  public var asGenericRequirementList: SwiftSyntax.GenericRequirementListSyntax? {
    get
  }
  public var isGenericRequirement: Swift.Bool {
    get
  }
  public var asGenericRequirement: SwiftSyntax.GenericRequirementSyntax? {
    get
  }
  public var isSameTypeRequirement: Swift.Bool {
    get
  }
  public var asSameTypeRequirement: SwiftSyntax.SameTypeRequirementSyntax? {
    get
  }
  public var isGenericParameterList: Swift.Bool {
    get
  }
  public var asGenericParameterList: SwiftSyntax.GenericParameterListSyntax? {
    get
  }
  public var isGenericParameter: Swift.Bool {
    get
  }
  public var asGenericParameter: SwiftSyntax.GenericParameterSyntax? {
    get
  }
  public var isGenericParameterClause: Swift.Bool {
    get
  }
  public var asGenericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
  }
  public var isConformanceRequirement: Swift.Bool {
    get
  }
  public var asConformanceRequirement: SwiftSyntax.ConformanceRequirementSyntax? {
    get
  }
  public var isSimpleTypeIdentifier: Swift.Bool {
    get
  }
  public var asSimpleTypeIdentifier: SwiftSyntax.SimpleTypeIdentifierSyntax? {
    get
  }
  public var isMemberTypeIdentifier: Swift.Bool {
    get
  }
  public var asMemberTypeIdentifier: SwiftSyntax.MemberTypeIdentifierSyntax? {
    get
  }
  public var isClassRestrictionType: Swift.Bool {
    get
  }
  public var asClassRestrictionType: SwiftSyntax.ClassRestrictionTypeSyntax? {
    get
  }
  public var isArrayType: Swift.Bool {
    get
  }
  public var asArrayType: SwiftSyntax.ArrayTypeSyntax? {
    get
  }
  public var isDictionaryType: Swift.Bool {
    get
  }
  public var asDictionaryType: SwiftSyntax.DictionaryTypeSyntax? {
    get
  }
  public var isMetatypeType: Swift.Bool {
    get
  }
  public var asMetatypeType: SwiftSyntax.MetatypeTypeSyntax? {
    get
  }
  public var isOptionalType: Swift.Bool {
    get
  }
  public var asOptionalType: SwiftSyntax.OptionalTypeSyntax? {
    get
  }
  public var isSomeType: Swift.Bool {
    get
  }
  public var asSomeType: SwiftSyntax.SomeTypeSyntax? {
    get
  }
  public var isImplicitlyUnwrappedOptionalType: Swift.Bool {
    get
  }
  public var asImplicitlyUnwrappedOptionalType: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax? {
    get
  }
  public var isCompositionTypeElement: Swift.Bool {
    get
  }
  public var asCompositionTypeElement: SwiftSyntax.CompositionTypeElementSyntax? {
    get
  }
  public var isCompositionTypeElementList: Swift.Bool {
    get
  }
  public var asCompositionTypeElementList: SwiftSyntax.CompositionTypeElementListSyntax? {
    get
  }
  public var isCompositionType: Swift.Bool {
    get
  }
  public var asCompositionType: SwiftSyntax.CompositionTypeSyntax? {
    get
  }
  public var isTupleTypeElement: Swift.Bool {
    get
  }
  public var asTupleTypeElement: SwiftSyntax.TupleTypeElementSyntax? {
    get
  }
  public var isTupleTypeElementList: Swift.Bool {
    get
  }
  public var asTupleTypeElementList: SwiftSyntax.TupleTypeElementListSyntax? {
    get
  }
  public var isTupleType: Swift.Bool {
    get
  }
  public var asTupleType: SwiftSyntax.TupleTypeSyntax? {
    get
  }
  public var isFunctionType: Swift.Bool {
    get
  }
  public var asFunctionType: SwiftSyntax.FunctionTypeSyntax? {
    get
  }
  public var isAttributedType: Swift.Bool {
    get
  }
  public var asAttributedType: SwiftSyntax.AttributedTypeSyntax? {
    get
  }
  public var isGenericArgumentList: Swift.Bool {
    get
  }
  public var asGenericArgumentList: SwiftSyntax.GenericArgumentListSyntax? {
    get
  }
  public var isGenericArgument: Swift.Bool {
    get
  }
  public var asGenericArgument: SwiftSyntax.GenericArgumentSyntax? {
    get
  }
  public var isGenericArgumentClause: Swift.Bool {
    get
  }
  public var asGenericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
  }
  public var isTypeAnnotation: Swift.Bool {
    get
  }
  public var asTypeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
  }
  public var isEnumCasePattern: Swift.Bool {
    get
  }
  public var asEnumCasePattern: SwiftSyntax.EnumCasePatternSyntax? {
    get
  }
  public var isIsTypePattern: Swift.Bool {
    get
  }
  public var asIsTypePattern: SwiftSyntax.IsTypePatternSyntax? {
    get
  }
  public var isOptionalPattern: Swift.Bool {
    get
  }
  public var asOptionalPattern: SwiftSyntax.OptionalPatternSyntax? {
    get
  }
  public var isIdentifierPattern: Swift.Bool {
    get
  }
  public var asIdentifierPattern: SwiftSyntax.IdentifierPatternSyntax? {
    get
  }
  public var isAsTypePattern: Swift.Bool {
    get
  }
  public var asAsTypePattern: SwiftSyntax.AsTypePatternSyntax? {
    get
  }
  public var isTuplePattern: Swift.Bool {
    get
  }
  public var asTuplePattern: SwiftSyntax.TuplePatternSyntax? {
    get
  }
  public var isWildcardPattern: Swift.Bool {
    get
  }
  public var asWildcardPattern: SwiftSyntax.WildcardPatternSyntax? {
    get
  }
  public var isTuplePatternElement: Swift.Bool {
    get
  }
  public var asTuplePatternElement: SwiftSyntax.TuplePatternElementSyntax? {
    get
  }
  public var isExpressionPattern: Swift.Bool {
    get
  }
  public var asExpressionPattern: SwiftSyntax.ExpressionPatternSyntax? {
    get
  }
  public var isTuplePatternElementList: Swift.Bool {
    get
  }
  public var asTuplePatternElementList: SwiftSyntax.TuplePatternElementListSyntax? {
    get
  }
  public var isValueBindingPattern: Swift.Bool {
    get
  }
  public var asValueBindingPattern: SwiftSyntax.ValueBindingPatternSyntax? {
    get
  }
  public var isAvailabilitySpecList: Swift.Bool {
    get
  }
  public var asAvailabilitySpecList: SwiftSyntax.AvailabilitySpecListSyntax? {
    get
  }
  public var isAvailabilityArgument: Swift.Bool {
    get
  }
  public var asAvailabilityArgument: SwiftSyntax.AvailabilityArgumentSyntax? {
    get
  }
  public var isAvailabilityLabeledArgument: Swift.Bool {
    get
  }
  public var asAvailabilityLabeledArgument: SwiftSyntax.AvailabilityLabeledArgumentSyntax? {
    get
  }
  public var isAvailabilityVersionRestriction: Swift.Bool {
    get
  }
  public var asAvailabilityVersionRestriction: SwiftSyntax.AvailabilityVersionRestrictionSyntax? {
    get
  }
  public var isVersionTuple: Swift.Bool {
    get
  }
  public var asVersionTuple: SwiftSyntax.VersionTupleSyntax? {
    get
  }
}
extension SwiftSyntax.Syntax {
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: SwiftSyntax.SyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.SyntaxProtocol.Protocol) -> SwiftSyntax.SyntaxProtocol
}
public struct SourceLength : Swift.Comparable {
  public let utf8Length: Swift.Int
  public init(of text: Swift.String)
  public init(utf8Length: Swift.Int)
  public static let zero: SwiftSyntax.SourceLength
  public static func < (lhs: SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength) -> Swift.Bool
  public static func + (lhs: SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength) -> SwiftSyntax.SourceLength
  public static func += (lhs: inout SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength)
  public static func - (lhs: SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength) -> SwiftSyntax.SourceLength
  public static func -= (lhs: inout SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength)
  public static func == (a: SwiftSyntax.SourceLength, b: SwiftSyntax.SourceLength) -> Swift.Bool
}
extension SwiftSyntax.AbsolutePosition {
  public static func + (lhs: SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.SourceLength) -> SwiftSyntax.AbsolutePosition
  public static func += (lhs: inout SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.SourceLength)
  public static func - (lhs: SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.SourceLength) -> SwiftSyntax.AbsolutePosition
  public static func -= (lhs: inout SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.SourceLength)
}
public enum SyntaxFactory {
  public static func makeToken(_ kind: SwiftSyntax.TokenKind, presence: SwiftSyntax.SourcePresence, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeUnknownSyntax(tokens: [SwiftSyntax.TokenSyntax]) -> SwiftSyntax.UnknownSyntax
  public static func makeBlankUnknownDecl() -> SwiftSyntax.UnknownDeclSyntax
  public static func makeBlankUnknownExpr() -> SwiftSyntax.UnknownExprSyntax
  public static func makeBlankUnknownStmt() -> SwiftSyntax.UnknownStmtSyntax
  public static func makeBlankUnknownType() -> SwiftSyntax.UnknownTypeSyntax
  public static func makeBlankUnknownPattern() -> SwiftSyntax.UnknownPatternSyntax
  public static func makeCodeBlockItem(item: SwiftSyntax.Syntax, semicolon: SwiftSyntax.TokenSyntax?, errorTokens: SwiftSyntax.Syntax?) -> SwiftSyntax.CodeBlockItemSyntax
  public static func makeBlankCodeBlockItem() -> SwiftSyntax.CodeBlockItemSyntax
  public static func makeCodeBlockItemList(_ elements: [SwiftSyntax.CodeBlockItemSyntax]) -> SwiftSyntax.CodeBlockItemListSyntax
  public static func makeBlankCodeBlockItemList() -> SwiftSyntax.CodeBlockItemListSyntax
  public static func makeCodeBlock(leftBrace: SwiftSyntax.TokenSyntax, statements: SwiftSyntax.CodeBlockItemListSyntax, rightBrace: SwiftSyntax.TokenSyntax) -> SwiftSyntax.CodeBlockSyntax
  public static func makeBlankCodeBlock() -> SwiftSyntax.CodeBlockSyntax
  public static func makeInOutExpr(ampersand: SwiftSyntax.TokenSyntax, expression: SwiftSyntax.ExprSyntax) -> SwiftSyntax.InOutExprSyntax
  public static func makeBlankInOutExpr() -> SwiftSyntax.InOutExprSyntax
  public static func makePoundColumnExpr(poundColumn: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundColumnExprSyntax
  public static func makeBlankPoundColumnExpr() -> SwiftSyntax.PoundColumnExprSyntax
  public static func makeTupleExprElementList(_ elements: [SwiftSyntax.TupleExprElementSyntax]) -> SwiftSyntax.TupleExprElementListSyntax
  public static func makeBlankTupleExprElementList() -> SwiftSyntax.TupleExprElementListSyntax
  public static func makeArrayElementList(_ elements: [SwiftSyntax.ArrayElementSyntax]) -> SwiftSyntax.ArrayElementListSyntax
  public static func makeBlankArrayElementList() -> SwiftSyntax.ArrayElementListSyntax
  public static func makeDictionaryElementList(_ elements: [SwiftSyntax.DictionaryElementSyntax]) -> SwiftSyntax.DictionaryElementListSyntax
  public static func makeBlankDictionaryElementList() -> SwiftSyntax.DictionaryElementListSyntax
  public static func makeStringLiteralSegments(_ elements: [SwiftSyntax.Syntax]) -> SwiftSyntax.StringLiteralSegmentsSyntax
  public static func makeBlankStringLiteralSegments() -> SwiftSyntax.StringLiteralSegmentsSyntax
  public static func makeTryExpr(tryKeyword: SwiftSyntax.TokenSyntax, questionOrExclamationMark: SwiftSyntax.TokenSyntax?, expression: SwiftSyntax.ExprSyntax) -> SwiftSyntax.TryExprSyntax
  public static func makeBlankTryExpr() -> SwiftSyntax.TryExprSyntax
  public static func makeAwaitExpr(awaitKeyword: SwiftSyntax.TokenSyntax, expression: SwiftSyntax.ExprSyntax) -> SwiftSyntax.AwaitExprSyntax
  public static func makeBlankAwaitExpr() -> SwiftSyntax.AwaitExprSyntax
  public static func makeDeclNameArgument(name: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax) -> SwiftSyntax.DeclNameArgumentSyntax
  public static func makeBlankDeclNameArgument() -> SwiftSyntax.DeclNameArgumentSyntax
  public static func makeDeclNameArgumentList(_ elements: [SwiftSyntax.DeclNameArgumentSyntax]) -> SwiftSyntax.DeclNameArgumentListSyntax
  public static func makeBlankDeclNameArgumentList() -> SwiftSyntax.DeclNameArgumentListSyntax
  public static func makeDeclNameArguments(leftParen: SwiftSyntax.TokenSyntax, arguments: SwiftSyntax.DeclNameArgumentListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.DeclNameArgumentsSyntax
  public static func makeBlankDeclNameArguments() -> SwiftSyntax.DeclNameArgumentsSyntax
  public static func makeIdentifierExpr(identifier: SwiftSyntax.TokenSyntax, declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.IdentifierExprSyntax
  public static func makeBlankIdentifierExpr() -> SwiftSyntax.IdentifierExprSyntax
  public static func makeSuperRefExpr(superKeyword: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SuperRefExprSyntax
  public static func makeBlankSuperRefExpr() -> SwiftSyntax.SuperRefExprSyntax
  public static func makeNilLiteralExpr(nilKeyword: SwiftSyntax.TokenSyntax) -> SwiftSyntax.NilLiteralExprSyntax
  public static func makeBlankNilLiteralExpr() -> SwiftSyntax.NilLiteralExprSyntax
  public static func makeDiscardAssignmentExpr(wildcard: SwiftSyntax.TokenSyntax) -> SwiftSyntax.DiscardAssignmentExprSyntax
  public static func makeBlankDiscardAssignmentExpr() -> SwiftSyntax.DiscardAssignmentExprSyntax
  public static func makeAssignmentExpr(assignToken: SwiftSyntax.TokenSyntax) -> SwiftSyntax.AssignmentExprSyntax
  public static func makeBlankAssignmentExpr() -> SwiftSyntax.AssignmentExprSyntax
  public static func makeSequenceExpr(elements: SwiftSyntax.ExprListSyntax) -> SwiftSyntax.SequenceExprSyntax
  public static func makeBlankSequenceExpr() -> SwiftSyntax.SequenceExprSyntax
  public static func makeExprList(_ elements: [SwiftSyntax.ExprSyntax]) -> SwiftSyntax.ExprListSyntax
  public static func makeBlankExprList() -> SwiftSyntax.ExprListSyntax
  public static func makePoundLineExpr(poundLine: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundLineExprSyntax
  public static func makeBlankPoundLineExpr() -> SwiftSyntax.PoundLineExprSyntax
  public static func makePoundFileExpr(poundFile: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundFileExprSyntax
  public static func makeBlankPoundFileExpr() -> SwiftSyntax.PoundFileExprSyntax
  public static func makePoundFileIDExpr(poundFileID: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundFileIDExprSyntax
  public static func makeBlankPoundFileIDExpr() -> SwiftSyntax.PoundFileIDExprSyntax
  public static func makePoundFilePathExpr(poundFilePath: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundFilePathExprSyntax
  public static func makeBlankPoundFilePathExpr() -> SwiftSyntax.PoundFilePathExprSyntax
  public static func makePoundFunctionExpr(poundFunction: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundFunctionExprSyntax
  public static func makeBlankPoundFunctionExpr() -> SwiftSyntax.PoundFunctionExprSyntax
  public static func makePoundDsohandleExpr(poundDsohandle: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundDsohandleExprSyntax
  public static func makeBlankPoundDsohandleExpr() -> SwiftSyntax.PoundDsohandleExprSyntax
  public static func makeSymbolicReferenceExpr(identifier: SwiftSyntax.TokenSyntax, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax?) -> SwiftSyntax.SymbolicReferenceExprSyntax
  public static func makeBlankSymbolicReferenceExpr() -> SwiftSyntax.SymbolicReferenceExprSyntax
  public static func makePrefixOperatorExpr(operatorToken: SwiftSyntax.TokenSyntax?, postfixExpression: SwiftSyntax.ExprSyntax) -> SwiftSyntax.PrefixOperatorExprSyntax
  public static func makeBlankPrefixOperatorExpr() -> SwiftSyntax.PrefixOperatorExprSyntax
  public static func makeBinaryOperatorExpr(operatorToken: SwiftSyntax.TokenSyntax) -> SwiftSyntax.BinaryOperatorExprSyntax
  public static func makeBlankBinaryOperatorExpr() -> SwiftSyntax.BinaryOperatorExprSyntax
  public static func makeArrowExpr(asyncKeyword: SwiftSyntax.TokenSyntax?, throwsToken: SwiftSyntax.TokenSyntax?, arrowToken: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ArrowExprSyntax
  public static func makeBlankArrowExpr() -> SwiftSyntax.ArrowExprSyntax
  public static func makeFloatLiteralExpr(floatingDigits: SwiftSyntax.TokenSyntax) -> SwiftSyntax.FloatLiteralExprSyntax
  public static func makeBlankFloatLiteralExpr() -> SwiftSyntax.FloatLiteralExprSyntax
  public static func makeTupleExpr(leftParen: SwiftSyntax.TokenSyntax, elementList: SwiftSyntax.TupleExprElementListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TupleExprSyntax
  public static func makeBlankTupleExpr() -> SwiftSyntax.TupleExprSyntax
  public static func makeArrayExpr(leftSquare: SwiftSyntax.TokenSyntax, elements: SwiftSyntax.ArrayElementListSyntax, rightSquare: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ArrayExprSyntax
  public static func makeBlankArrayExpr() -> SwiftSyntax.ArrayExprSyntax
  public static func makeDictionaryExpr(leftSquare: SwiftSyntax.TokenSyntax, content: SwiftSyntax.Syntax, rightSquare: SwiftSyntax.TokenSyntax) -> SwiftSyntax.DictionaryExprSyntax
  public static func makeBlankDictionaryExpr() -> SwiftSyntax.DictionaryExprSyntax
  public static func makeTupleExprElement(label: SwiftSyntax.TokenSyntax?, colon: SwiftSyntax.TokenSyntax?, expression: SwiftSyntax.ExprSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleExprElementSyntax
  public static func makeBlankTupleExprElement() -> SwiftSyntax.TupleExprElementSyntax
  public static func makeArrayElement(expression: SwiftSyntax.ExprSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ArrayElementSyntax
  public static func makeBlankArrayElement() -> SwiftSyntax.ArrayElementSyntax
  public static func makeDictionaryElement(keyExpression: SwiftSyntax.ExprSyntax, colon: SwiftSyntax.TokenSyntax, valueExpression: SwiftSyntax.ExprSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DictionaryElementSyntax
  public static func makeBlankDictionaryElement() -> SwiftSyntax.DictionaryElementSyntax
  public static func makeIntegerLiteralExpr(digits: SwiftSyntax.TokenSyntax) -> SwiftSyntax.IntegerLiteralExprSyntax
  public static func makeBlankIntegerLiteralExpr() -> SwiftSyntax.IntegerLiteralExprSyntax
  public static func makeBooleanLiteralExpr(booleanLiteral: SwiftSyntax.TokenSyntax) -> SwiftSyntax.BooleanLiteralExprSyntax
  public static func makeBlankBooleanLiteralExpr() -> SwiftSyntax.BooleanLiteralExprSyntax
  public static func makeTernaryExpr(conditionExpression: SwiftSyntax.ExprSyntax, questionMark: SwiftSyntax.TokenSyntax, firstChoice: SwiftSyntax.ExprSyntax, colonMark: SwiftSyntax.TokenSyntax, secondChoice: SwiftSyntax.ExprSyntax) -> SwiftSyntax.TernaryExprSyntax
  public static func makeBlankTernaryExpr() -> SwiftSyntax.TernaryExprSyntax
  public static func makeMemberAccessExpr(base: SwiftSyntax.ExprSyntax?, dot: SwiftSyntax.TokenSyntax, name: SwiftSyntax.TokenSyntax, declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.MemberAccessExprSyntax
  public static func makeBlankMemberAccessExpr() -> SwiftSyntax.MemberAccessExprSyntax
  public static func makeIsExpr(isTok: SwiftSyntax.TokenSyntax, typeName: SwiftSyntax.TypeSyntax) -> SwiftSyntax.IsExprSyntax
  public static func makeBlankIsExpr() -> SwiftSyntax.IsExprSyntax
  public static func makeAsExpr(asTok: SwiftSyntax.TokenSyntax, questionOrExclamationMark: SwiftSyntax.TokenSyntax?, typeName: SwiftSyntax.TypeSyntax) -> SwiftSyntax.AsExprSyntax
  public static func makeBlankAsExpr() -> SwiftSyntax.AsExprSyntax
  public static func makeTypeExpr(type: SwiftSyntax.TypeSyntax) -> SwiftSyntax.TypeExprSyntax
  public static func makeBlankTypeExpr() -> SwiftSyntax.TypeExprSyntax
  public static func makeClosureCaptureItem(specifier: SwiftSyntax.TokenListSyntax?, name: SwiftSyntax.TokenSyntax?, assignToken: SwiftSyntax.TokenSyntax?, expression: SwiftSyntax.ExprSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureCaptureItemSyntax
  public static func makeBlankClosureCaptureItem() -> SwiftSyntax.ClosureCaptureItemSyntax
  public static func makeClosureCaptureItemList(_ elements: [SwiftSyntax.ClosureCaptureItemSyntax]) -> SwiftSyntax.ClosureCaptureItemListSyntax
  public static func makeBlankClosureCaptureItemList() -> SwiftSyntax.ClosureCaptureItemListSyntax
  public static func makeClosureCaptureSignature(leftSquare: SwiftSyntax.TokenSyntax, items: SwiftSyntax.ClosureCaptureItemListSyntax?, rightSquare: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ClosureCaptureSignatureSyntax
  public static func makeBlankClosureCaptureSignature() -> SwiftSyntax.ClosureCaptureSignatureSyntax
  public static func makeClosureParam(name: SwiftSyntax.TokenSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClosureParamSyntax
  public static func makeBlankClosureParam() -> SwiftSyntax.ClosureParamSyntax
  public static func makeClosureParamList(_ elements: [SwiftSyntax.ClosureParamSyntax]) -> SwiftSyntax.ClosureParamListSyntax
  public static func makeBlankClosureParamList() -> SwiftSyntax.ClosureParamListSyntax
  public static func makeClosureSignature(attributes: SwiftSyntax.AttributeListSyntax?, capture: SwiftSyntax.ClosureCaptureSignatureSyntax?, input: SwiftSyntax.Syntax?, asyncKeyword: SwiftSyntax.TokenSyntax?, throwsTok: SwiftSyntax.TokenSyntax?, output: SwiftSyntax.ReturnClauseSyntax?, inTok: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ClosureSignatureSyntax
  public static func makeBlankClosureSignature() -> SwiftSyntax.ClosureSignatureSyntax
  public static func makeClosureExpr(leftBrace: SwiftSyntax.TokenSyntax, signature: SwiftSyntax.ClosureSignatureSyntax?, statements: SwiftSyntax.CodeBlockItemListSyntax, rightBrace: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ClosureExprSyntax
  public static func makeBlankClosureExpr() -> SwiftSyntax.ClosureExprSyntax
  public static func makeUnresolvedPatternExpr(pattern: SwiftSyntax.PatternSyntax) -> SwiftSyntax.UnresolvedPatternExprSyntax
  public static func makeBlankUnresolvedPatternExpr() -> SwiftSyntax.UnresolvedPatternExprSyntax
  public static func makeMultipleTrailingClosureElement(label: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, closure: SwiftSyntax.ClosureExprSyntax) -> SwiftSyntax.MultipleTrailingClosureElementSyntax
  public static func makeBlankMultipleTrailingClosureElement() -> SwiftSyntax.MultipleTrailingClosureElementSyntax
  public static func makeMultipleTrailingClosureElementList(_ elements: [SwiftSyntax.MultipleTrailingClosureElementSyntax]) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public static func makeBlankMultipleTrailingClosureElementList() -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public static func makeFunctionCallExpr(calledExpression: SwiftSyntax.ExprSyntax, leftParen: SwiftSyntax.TokenSyntax?, argumentList: SwiftSyntax.TupleExprElementListSyntax, rightParen: SwiftSyntax.TokenSyntax?, trailingClosure: SwiftSyntax.ClosureExprSyntax?, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax?) -> SwiftSyntax.FunctionCallExprSyntax
  public static func makeBlankFunctionCallExpr() -> SwiftSyntax.FunctionCallExprSyntax
  public static func makeSubscriptExpr(calledExpression: SwiftSyntax.ExprSyntax, leftBracket: SwiftSyntax.TokenSyntax, argumentList: SwiftSyntax.TupleExprElementListSyntax, rightBracket: SwiftSyntax.TokenSyntax, trailingClosure: SwiftSyntax.ClosureExprSyntax?, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax?) -> SwiftSyntax.SubscriptExprSyntax
  public static func makeBlankSubscriptExpr() -> SwiftSyntax.SubscriptExprSyntax
  public static func makeOptionalChainingExpr(expression: SwiftSyntax.ExprSyntax, questionMark: SwiftSyntax.TokenSyntax) -> SwiftSyntax.OptionalChainingExprSyntax
  public static func makeBlankOptionalChainingExpr() -> SwiftSyntax.OptionalChainingExprSyntax
  public static func makeForcedValueExpr(expression: SwiftSyntax.ExprSyntax, exclamationMark: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ForcedValueExprSyntax
  public static func makeBlankForcedValueExpr() -> SwiftSyntax.ForcedValueExprSyntax
  public static func makePostfixUnaryExpr(expression: SwiftSyntax.ExprSyntax, operatorToken: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PostfixUnaryExprSyntax
  public static func makeBlankPostfixUnaryExpr() -> SwiftSyntax.PostfixUnaryExprSyntax
  public static func makeSpecializeExpr(expression: SwiftSyntax.ExprSyntax, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax) -> SwiftSyntax.SpecializeExprSyntax
  public static func makeBlankSpecializeExpr() -> SwiftSyntax.SpecializeExprSyntax
  public static func makeStringSegment(content: SwiftSyntax.TokenSyntax) -> SwiftSyntax.StringSegmentSyntax
  public static func makeBlankStringSegment() -> SwiftSyntax.StringSegmentSyntax
  public static func makeExpressionSegment(backslash: SwiftSyntax.TokenSyntax, delimiter: SwiftSyntax.TokenSyntax?, leftParen: SwiftSyntax.TokenSyntax, expressions: SwiftSyntax.TupleExprElementListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ExpressionSegmentSyntax
  public static func makeBlankExpressionSegment() -> SwiftSyntax.ExpressionSegmentSyntax
  public static func makeStringLiteralExpr(openDelimiter: SwiftSyntax.TokenSyntax?, openQuote: SwiftSyntax.TokenSyntax, segments: SwiftSyntax.StringLiteralSegmentsSyntax, closeQuote: SwiftSyntax.TokenSyntax, closeDelimiter: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.StringLiteralExprSyntax
  public static func makeBlankStringLiteralExpr() -> SwiftSyntax.StringLiteralExprSyntax
  public static func makeKeyPathExpr(backslash: SwiftSyntax.TokenSyntax, rootExpr: SwiftSyntax.ExprSyntax?, expression: SwiftSyntax.ExprSyntax) -> SwiftSyntax.KeyPathExprSyntax
  public static func makeBlankKeyPathExpr() -> SwiftSyntax.KeyPathExprSyntax
  public static func makeKeyPathBaseExpr(period: SwiftSyntax.TokenSyntax) -> SwiftSyntax.KeyPathBaseExprSyntax
  public static func makeBlankKeyPathBaseExpr() -> SwiftSyntax.KeyPathBaseExprSyntax
  public static func makeObjcNamePiece(name: SwiftSyntax.TokenSyntax, dot: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjcNamePieceSyntax
  public static func makeBlankObjcNamePiece() -> SwiftSyntax.ObjcNamePieceSyntax
  public static func makeObjcName(_ elements: [SwiftSyntax.ObjcNamePieceSyntax]) -> SwiftSyntax.ObjcNameSyntax
  public static func makeBlankObjcName() -> SwiftSyntax.ObjcNameSyntax
  public static func makeObjcKeyPathExpr(keyPath: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax, name: SwiftSyntax.ObjcNameSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ObjcKeyPathExprSyntax
  public static func makeBlankObjcKeyPathExpr() -> SwiftSyntax.ObjcKeyPathExprSyntax
  public static func makeObjcSelectorExpr(poundSelector: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax, kind: SwiftSyntax.TokenSyntax?, colon: SwiftSyntax.TokenSyntax?, name: SwiftSyntax.ExprSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ObjcSelectorExprSyntax
  public static func makeBlankObjcSelectorExpr() -> SwiftSyntax.ObjcSelectorExprSyntax
  public static func makePostfixIfConfigExpr(base: SwiftSyntax.ExprSyntax?, config: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.PostfixIfConfigExprSyntax
  public static func makeBlankPostfixIfConfigExpr() -> SwiftSyntax.PostfixIfConfigExprSyntax
  public static func makeEditorPlaceholderExpr(identifier: SwiftSyntax.TokenSyntax) -> SwiftSyntax.EditorPlaceholderExprSyntax
  public static func makeBlankEditorPlaceholderExpr() -> SwiftSyntax.EditorPlaceholderExprSyntax
  public static func makeObjectLiteralExpr(identifier: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax, arguments: SwiftSyntax.TupleExprElementListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ObjectLiteralExprSyntax
  public static func makeBlankObjectLiteralExpr() -> SwiftSyntax.ObjectLiteralExprSyntax
  public static func makeTypeInitializerClause(equal: SwiftSyntax.TokenSyntax, value: SwiftSyntax.TypeSyntax) -> SwiftSyntax.TypeInitializerClauseSyntax
  public static func makeBlankTypeInitializerClause() -> SwiftSyntax.TypeInitializerClauseSyntax
  public static func makeTypealiasDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, typealiasKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax?, initializer: SwiftSyntax.TypeInitializerClauseSyntax?, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.TypealiasDeclSyntax
  public static func makeBlankTypealiasDecl() -> SwiftSyntax.TypealiasDeclSyntax
  public static func makeAssociatedtypeDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, associatedtypeKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax?, initializer: SwiftSyntax.TypeInitializerClauseSyntax?, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public static func makeBlankAssociatedtypeDecl() -> SwiftSyntax.AssociatedtypeDeclSyntax
  public static func makeFunctionParameterList(_ elements: [SwiftSyntax.FunctionParameterSyntax]) -> SwiftSyntax.FunctionParameterListSyntax
  public static func makeBlankFunctionParameterList() -> SwiftSyntax.FunctionParameterListSyntax
  public static func makeParameterClause(leftParen: SwiftSyntax.TokenSyntax, parameterList: SwiftSyntax.FunctionParameterListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ParameterClauseSyntax
  public static func makeBlankParameterClause() -> SwiftSyntax.ParameterClauseSyntax
  public static func makeReturnClause(arrow: SwiftSyntax.TokenSyntax, returnType: SwiftSyntax.TypeSyntax) -> SwiftSyntax.ReturnClauseSyntax
  public static func makeBlankReturnClause() -> SwiftSyntax.ReturnClauseSyntax
  public static func makeFunctionSignature(input: SwiftSyntax.ParameterClauseSyntax, asyncOrReasyncKeyword: SwiftSyntax.TokenSyntax?, throwsOrRethrowsKeyword: SwiftSyntax.TokenSyntax?, output: SwiftSyntax.ReturnClauseSyntax?) -> SwiftSyntax.FunctionSignatureSyntax
  public static func makeBlankFunctionSignature() -> SwiftSyntax.FunctionSignatureSyntax
  public static func makeIfConfigClause(poundKeyword: SwiftSyntax.TokenSyntax, condition: SwiftSyntax.ExprSyntax?, elements: SwiftSyntax.Syntax) -> SwiftSyntax.IfConfigClauseSyntax
  public static func makeBlankIfConfigClause() -> SwiftSyntax.IfConfigClauseSyntax
  public static func makeIfConfigClauseList(_ elements: [SwiftSyntax.IfConfigClauseSyntax]) -> SwiftSyntax.IfConfigClauseListSyntax
  public static func makeBlankIfConfigClauseList() -> SwiftSyntax.IfConfigClauseListSyntax
  public static func makeIfConfigDecl(clauses: SwiftSyntax.IfConfigClauseListSyntax, poundEndif: SwiftSyntax.TokenSyntax) -> SwiftSyntax.IfConfigDeclSyntax
  public static func makeBlankIfConfigDecl() -> SwiftSyntax.IfConfigDeclSyntax
  public static func makePoundErrorDecl(poundError: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax, message: SwiftSyntax.StringLiteralExprSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundErrorDeclSyntax
  public static func makeBlankPoundErrorDecl() -> SwiftSyntax.PoundErrorDeclSyntax
  public static func makePoundWarningDecl(poundWarning: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax, message: SwiftSyntax.StringLiteralExprSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundWarningDeclSyntax
  public static func makeBlankPoundWarningDecl() -> SwiftSyntax.PoundWarningDeclSyntax
  public static func makePoundSourceLocation(poundSourceLocation: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax, args: SwiftSyntax.PoundSourceLocationArgsSyntax?, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundSourceLocationSyntax
  public static func makeBlankPoundSourceLocation() -> SwiftSyntax.PoundSourceLocationSyntax
  public static func makePoundSourceLocationArgs(fileArgLabel: SwiftSyntax.TokenSyntax, fileArgColon: SwiftSyntax.TokenSyntax, fileName: SwiftSyntax.TokenSyntax, comma: SwiftSyntax.TokenSyntax, lineArgLabel: SwiftSyntax.TokenSyntax, lineArgColon: SwiftSyntax.TokenSyntax, lineNumber: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public static func makeBlankPoundSourceLocationArgs() -> SwiftSyntax.PoundSourceLocationArgsSyntax
  public static func makeDeclModifier(name: SwiftSyntax.TokenSyntax, detailLeftParen: SwiftSyntax.TokenSyntax?, detail: SwiftSyntax.TokenSyntax?, detailRightParen: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeclModifierSyntax
  public static func makeBlankDeclModifier() -> SwiftSyntax.DeclModifierSyntax
  public static func makeInheritedType(typeName: SwiftSyntax.TypeSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.InheritedTypeSyntax
  public static func makeBlankInheritedType() -> SwiftSyntax.InheritedTypeSyntax
  public static func makeInheritedTypeList(_ elements: [SwiftSyntax.InheritedTypeSyntax]) -> SwiftSyntax.InheritedTypeListSyntax
  public static func makeBlankInheritedTypeList() -> SwiftSyntax.InheritedTypeListSyntax
  public static func makeTypeInheritanceClause(colon: SwiftSyntax.TokenSyntax, inheritedTypeCollection: SwiftSyntax.InheritedTypeListSyntax) -> SwiftSyntax.TypeInheritanceClauseSyntax
  public static func makeBlankTypeInheritanceClause() -> SwiftSyntax.TypeInheritanceClauseSyntax
  public static func makeClassDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, classOrActorKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax?, inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax?, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?, members: SwiftSyntax.MemberDeclBlockSyntax) -> SwiftSyntax.ClassDeclSyntax
  public static func makeBlankClassDecl() -> SwiftSyntax.ClassDeclSyntax
  public static func makeStructDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, structKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax?, inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax?, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?, members: SwiftSyntax.MemberDeclBlockSyntax) -> SwiftSyntax.StructDeclSyntax
  public static func makeBlankStructDecl() -> SwiftSyntax.StructDeclSyntax
  public static func makeProtocolDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, protocolKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax?, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?, members: SwiftSyntax.MemberDeclBlockSyntax) -> SwiftSyntax.ProtocolDeclSyntax
  public static func makeBlankProtocolDecl() -> SwiftSyntax.ProtocolDeclSyntax
  public static func makeExtensionDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, extensionKeyword: SwiftSyntax.TokenSyntax, extendedType: SwiftSyntax.TypeSyntax, inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax?, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?, members: SwiftSyntax.MemberDeclBlockSyntax) -> SwiftSyntax.ExtensionDeclSyntax
  public static func makeBlankExtensionDecl() -> SwiftSyntax.ExtensionDeclSyntax
  public static func makeMemberDeclBlock(leftBrace: SwiftSyntax.TokenSyntax, members: SwiftSyntax.MemberDeclListSyntax, rightBrace: SwiftSyntax.TokenSyntax) -> SwiftSyntax.MemberDeclBlockSyntax
  public static func makeBlankMemberDeclBlock() -> SwiftSyntax.MemberDeclBlockSyntax
  public static func makeMemberDeclList(_ elements: [SwiftSyntax.MemberDeclListItemSyntax]) -> SwiftSyntax.MemberDeclListSyntax
  public static func makeBlankMemberDeclList() -> SwiftSyntax.MemberDeclListSyntax
  public static func makeMemberDeclListItem(decl: SwiftSyntax.DeclSyntax, semicolon: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.MemberDeclListItemSyntax
  public static func makeBlankMemberDeclListItem() -> SwiftSyntax.MemberDeclListItemSyntax
  public static func makeSourceFile(statements: SwiftSyntax.CodeBlockItemListSyntax, eofToken: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SourceFileSyntax
  public static func makeBlankSourceFile() -> SwiftSyntax.SourceFileSyntax
  public static func makeInitializerClause(equal: SwiftSyntax.TokenSyntax, value: SwiftSyntax.ExprSyntax) -> SwiftSyntax.InitializerClauseSyntax
  public static func makeBlankInitializerClause() -> SwiftSyntax.InitializerClauseSyntax
  public static func makeFunctionParameter(attributes: SwiftSyntax.AttributeListSyntax?, firstName: SwiftSyntax.TokenSyntax?, secondName: SwiftSyntax.TokenSyntax?, colon: SwiftSyntax.TokenSyntax?, type: SwiftSyntax.TypeSyntax?, ellipsis: SwiftSyntax.TokenSyntax?, defaultArgument: SwiftSyntax.InitializerClauseSyntax?, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionParameterSyntax
  public static func makeBlankFunctionParameter() -> SwiftSyntax.FunctionParameterSyntax
  public static func makeModifierList(_ elements: [SwiftSyntax.DeclModifierSyntax]) -> SwiftSyntax.ModifierListSyntax
  public static func makeBlankModifierList() -> SwiftSyntax.ModifierListSyntax
  public static func makeFunctionDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, funcKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax?, signature: SwiftSyntax.FunctionSignatureSyntax, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?, body: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public static func makeBlankFunctionDecl() -> SwiftSyntax.FunctionDeclSyntax
  public static func makeInitializerDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, initKeyword: SwiftSyntax.TokenSyntax, optionalMark: SwiftSyntax.TokenSyntax?, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax?, parameters: SwiftSyntax.ParameterClauseSyntax, throwsOrRethrowsKeyword: SwiftSyntax.TokenSyntax?, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?, body: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public static func makeBlankInitializerDecl() -> SwiftSyntax.InitializerDeclSyntax
  public static func makeDeinitializerDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, deinitKeyword: SwiftSyntax.TokenSyntax, body: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.DeinitializerDeclSyntax
  public static func makeBlankDeinitializerDecl() -> SwiftSyntax.DeinitializerDeclSyntax
  public static func makeSubscriptDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, subscriptKeyword: SwiftSyntax.TokenSyntax, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax?, indices: SwiftSyntax.ParameterClauseSyntax, result: SwiftSyntax.ReturnClauseSyntax, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?, accessor: SwiftSyntax.Syntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public static func makeBlankSubscriptDecl() -> SwiftSyntax.SubscriptDeclSyntax
  public static func makeAccessLevelModifier(name: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax?, modifier: SwiftSyntax.TokenSyntax?, rightParen: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessLevelModifierSyntax
  public static func makeBlankAccessLevelModifier() -> SwiftSyntax.AccessLevelModifierSyntax
  public static func makeAccessPathComponent(name: SwiftSyntax.TokenSyntax, trailingDot: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessPathComponentSyntax
  public static func makeBlankAccessPathComponent() -> SwiftSyntax.AccessPathComponentSyntax
  public static func makeAccessPath(_ elements: [SwiftSyntax.AccessPathComponentSyntax]) -> SwiftSyntax.AccessPathSyntax
  public static func makeBlankAccessPath() -> SwiftSyntax.AccessPathSyntax
  public static func makeImportDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, importTok: SwiftSyntax.TokenSyntax, importKind: SwiftSyntax.TokenSyntax?, path: SwiftSyntax.AccessPathSyntax) -> SwiftSyntax.ImportDeclSyntax
  public static func makeBlankImportDecl() -> SwiftSyntax.ImportDeclSyntax
  public static func makeAccessorParameter(leftParen: SwiftSyntax.TokenSyntax, name: SwiftSyntax.TokenSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.AccessorParameterSyntax
  public static func makeBlankAccessorParameter() -> SwiftSyntax.AccessorParameterSyntax
  public static func makeAccessorDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifier: SwiftSyntax.DeclModifierSyntax?, accessorKind: SwiftSyntax.TokenSyntax, parameter: SwiftSyntax.AccessorParameterSyntax?, asyncKeyword: SwiftSyntax.TokenSyntax?, throwsKeyword: SwiftSyntax.TokenSyntax?, body: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.AccessorDeclSyntax
  public static func makeBlankAccessorDecl() -> SwiftSyntax.AccessorDeclSyntax
  public static func makeAccessorList(_ elements: [SwiftSyntax.AccessorDeclSyntax]) -> SwiftSyntax.AccessorListSyntax
  public static func makeBlankAccessorList() -> SwiftSyntax.AccessorListSyntax
  public static func makeAccessorBlock(leftBrace: SwiftSyntax.TokenSyntax, accessors: SwiftSyntax.AccessorListSyntax, rightBrace: SwiftSyntax.TokenSyntax) -> SwiftSyntax.AccessorBlockSyntax
  public static func makeBlankAccessorBlock() -> SwiftSyntax.AccessorBlockSyntax
  public static func makePatternBinding(pattern: SwiftSyntax.PatternSyntax, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax?, initializer: SwiftSyntax.InitializerClauseSyntax?, accessor: SwiftSyntax.Syntax?, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PatternBindingSyntax
  public static func makeBlankPatternBinding() -> SwiftSyntax.PatternBindingSyntax
  public static func makePatternBindingList(_ elements: [SwiftSyntax.PatternBindingSyntax]) -> SwiftSyntax.PatternBindingListSyntax
  public static func makeBlankPatternBindingList() -> SwiftSyntax.PatternBindingListSyntax
  public static func makeVariableDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, letOrVarKeyword: SwiftSyntax.TokenSyntax, bindings: SwiftSyntax.PatternBindingListSyntax) -> SwiftSyntax.VariableDeclSyntax
  public static func makeBlankVariableDecl() -> SwiftSyntax.VariableDeclSyntax
  public static func makeEnumCaseElement(identifier: SwiftSyntax.TokenSyntax, associatedValue: SwiftSyntax.ParameterClauseSyntax?, rawValue: SwiftSyntax.InitializerClauseSyntax?, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EnumCaseElementSyntax
  public static func makeBlankEnumCaseElement() -> SwiftSyntax.EnumCaseElementSyntax
  public static func makeEnumCaseElementList(_ elements: [SwiftSyntax.EnumCaseElementSyntax]) -> SwiftSyntax.EnumCaseElementListSyntax
  public static func makeBlankEnumCaseElementList() -> SwiftSyntax.EnumCaseElementListSyntax
  public static func makeEnumCaseDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, caseKeyword: SwiftSyntax.TokenSyntax, elements: SwiftSyntax.EnumCaseElementListSyntax) -> SwiftSyntax.EnumCaseDeclSyntax
  public static func makeBlankEnumCaseDecl() -> SwiftSyntax.EnumCaseDeclSyntax
  public static func makeEnumDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, enumKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, genericParameters: SwiftSyntax.GenericParameterClauseSyntax?, inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax?, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax?, members: SwiftSyntax.MemberDeclBlockSyntax) -> SwiftSyntax.EnumDeclSyntax
  public static func makeBlankEnumDecl() -> SwiftSyntax.EnumDeclSyntax
  public static func makeOperatorDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, operatorKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, operatorPrecedenceAndTypes: SwiftSyntax.OperatorPrecedenceAndTypesSyntax?) -> SwiftSyntax.OperatorDeclSyntax
  public static func makeBlankOperatorDecl() -> SwiftSyntax.OperatorDeclSyntax
  public static func makeIdentifierList(_ elements: [SwiftSyntax.TokenSyntax]) -> SwiftSyntax.IdentifierListSyntax
  public static func makeBlankIdentifierList() -> SwiftSyntax.IdentifierListSyntax
  public static func makeOperatorPrecedenceAndTypes(colon: SwiftSyntax.TokenSyntax, precedenceGroupAndDesignatedTypes: SwiftSyntax.IdentifierListSyntax) -> SwiftSyntax.OperatorPrecedenceAndTypesSyntax
  public static func makeBlankOperatorPrecedenceAndTypes() -> SwiftSyntax.OperatorPrecedenceAndTypesSyntax
  public static func makePrecedenceGroupDecl(attributes: SwiftSyntax.AttributeListSyntax?, modifiers: SwiftSyntax.ModifierListSyntax?, precedencegroupKeyword: SwiftSyntax.TokenSyntax, identifier: SwiftSyntax.TokenSyntax, leftBrace: SwiftSyntax.TokenSyntax, groupAttributes: SwiftSyntax.PrecedenceGroupAttributeListSyntax, rightBrace: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public static func makeBlankPrecedenceGroupDecl() -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public static func makePrecedenceGroupAttributeList(_ elements: [SwiftSyntax.Syntax]) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public static func makeBlankPrecedenceGroupAttributeList() -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public static func makePrecedenceGroupRelation(higherThanOrLowerThan: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, otherNames: SwiftSyntax.PrecedenceGroupNameListSyntax) -> SwiftSyntax.PrecedenceGroupRelationSyntax
  public static func makeBlankPrecedenceGroupRelation() -> SwiftSyntax.PrecedenceGroupRelationSyntax
  public static func makePrecedenceGroupNameList(_ elements: [SwiftSyntax.PrecedenceGroupNameElementSyntax]) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public static func makeBlankPrecedenceGroupNameList() -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public static func makePrecedenceGroupNameElement(name: SwiftSyntax.TokenSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupNameElementSyntax
  public static func makeBlankPrecedenceGroupNameElement() -> SwiftSyntax.PrecedenceGroupNameElementSyntax
  public static func makePrecedenceGroupAssignment(assignmentKeyword: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, flag: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PrecedenceGroupAssignmentSyntax
  public static func makeBlankPrecedenceGroupAssignment() -> SwiftSyntax.PrecedenceGroupAssignmentSyntax
  public static func makePrecedenceGroupAssociativity(associativityKeyword: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, value: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PrecedenceGroupAssociativitySyntax
  public static func makeBlankPrecedenceGroupAssociativity() -> SwiftSyntax.PrecedenceGroupAssociativitySyntax
  public static func makeTokenList(_ elements: [SwiftSyntax.TokenSyntax]) -> SwiftSyntax.TokenListSyntax
  public static func makeBlankTokenList() -> SwiftSyntax.TokenListSyntax
  public static func makeNonEmptyTokenList(_ elements: [SwiftSyntax.TokenSyntax]) -> SwiftSyntax.NonEmptyTokenListSyntax
  public static func makeBlankNonEmptyTokenList() -> SwiftSyntax.NonEmptyTokenListSyntax
  public static func makeCustomAttribute(atSignToken: SwiftSyntax.TokenSyntax, attributeName: SwiftSyntax.TypeSyntax, leftParen: SwiftSyntax.TokenSyntax?, argumentList: SwiftSyntax.TupleExprElementListSyntax?, rightParen: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CustomAttributeSyntax
  public static func makeBlankCustomAttribute() -> SwiftSyntax.CustomAttributeSyntax
  public static func makeAttribute(atSignToken: SwiftSyntax.TokenSyntax, attributeName: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax?, argument: SwiftSyntax.Syntax?, rightParen: SwiftSyntax.TokenSyntax?, tokenList: SwiftSyntax.TokenListSyntax?) -> SwiftSyntax.AttributeSyntax
  public static func makeBlankAttribute() -> SwiftSyntax.AttributeSyntax
  public static func makeAttributeList(_ elements: [SwiftSyntax.Syntax]) -> SwiftSyntax.AttributeListSyntax
  public static func makeBlankAttributeList() -> SwiftSyntax.AttributeListSyntax
  public static func makeSpecializeAttributeSpecList(_ elements: [SwiftSyntax.Syntax]) -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public static func makeBlankSpecializeAttributeSpecList() -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public static func makeLabeledSpecializeEntry(label: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, value: SwiftSyntax.TokenSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.LabeledSpecializeEntrySyntax
  public static func makeBlankLabeledSpecializeEntry() -> SwiftSyntax.LabeledSpecializeEntrySyntax
  public static func makeTargetFunctionEntry(label: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, delcname: SwiftSyntax.DeclNameSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TargetFunctionEntrySyntax
  public static func makeBlankTargetFunctionEntry() -> SwiftSyntax.TargetFunctionEntrySyntax
  public static func makeNamedAttributeStringArgument(nameTok: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, stringOrDeclname: SwiftSyntax.Syntax) -> SwiftSyntax.NamedAttributeStringArgumentSyntax
  public static func makeBlankNamedAttributeStringArgument() -> SwiftSyntax.NamedAttributeStringArgumentSyntax
  public static func makeDeclName(declBaseName: SwiftSyntax.Syntax, declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.DeclNameSyntax
  public static func makeBlankDeclName() -> SwiftSyntax.DeclNameSyntax
  public static func makeImplementsAttributeArguments(type: SwiftSyntax.SimpleTypeIdentifierSyntax, comma: SwiftSyntax.TokenSyntax, declBaseName: SwiftSyntax.Syntax, declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.ImplementsAttributeArgumentsSyntax
  public static func makeBlankImplementsAttributeArguments() -> SwiftSyntax.ImplementsAttributeArgumentsSyntax
  public static func makeObjCSelectorPiece(name: SwiftSyntax.TokenSyntax?, colon: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ObjCSelectorPieceSyntax
  public static func makeBlankObjCSelectorPiece() -> SwiftSyntax.ObjCSelectorPieceSyntax
  public static func makeObjCSelector(_ elements: [SwiftSyntax.ObjCSelectorPieceSyntax]) -> SwiftSyntax.ObjCSelectorSyntax
  public static func makeBlankObjCSelector() -> SwiftSyntax.ObjCSelectorSyntax
  public static func makeDifferentiableAttributeArguments(diffKind: SwiftSyntax.TokenSyntax?, diffKindComma: SwiftSyntax.TokenSyntax?, diffParams: SwiftSyntax.DifferentiabilityParamsClauseSyntax?, diffParamsComma: SwiftSyntax.TokenSyntax?, whereClause: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.DifferentiableAttributeArgumentsSyntax
  public static func makeBlankDifferentiableAttributeArguments() -> SwiftSyntax.DifferentiableAttributeArgumentsSyntax
  public static func makeDifferentiabilityParamsClause(wrtLabel: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, parameters: SwiftSyntax.Syntax) -> SwiftSyntax.DifferentiabilityParamsClauseSyntax
  public static func makeBlankDifferentiabilityParamsClause() -> SwiftSyntax.DifferentiabilityParamsClauseSyntax
  public static func makeDifferentiabilityParams(leftParen: SwiftSyntax.TokenSyntax, diffParams: SwiftSyntax.DifferentiabilityParamListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.DifferentiabilityParamsSyntax
  public static func makeBlankDifferentiabilityParams() -> SwiftSyntax.DifferentiabilityParamsSyntax
  public static func makeDifferentiabilityParamList(_ elements: [SwiftSyntax.DifferentiabilityParamSyntax]) -> SwiftSyntax.DifferentiabilityParamListSyntax
  public static func makeBlankDifferentiabilityParamList() -> SwiftSyntax.DifferentiabilityParamListSyntax
  public static func makeDifferentiabilityParam(parameter: SwiftSyntax.Syntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DifferentiabilityParamSyntax
  public static func makeBlankDifferentiabilityParam() -> SwiftSyntax.DifferentiabilityParamSyntax
  public static func makeDerivativeRegistrationAttributeArguments(ofLabel: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, originalDeclName: SwiftSyntax.QualifiedDeclNameSyntax, period: SwiftSyntax.TokenSyntax?, accessorKind: SwiftSyntax.TokenSyntax?, comma: SwiftSyntax.TokenSyntax?, diffParams: SwiftSyntax.DifferentiabilityParamsClauseSyntax?) -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public static func makeBlankDerivativeRegistrationAttributeArguments() -> SwiftSyntax.DerivativeRegistrationAttributeArgumentsSyntax
  public static func makeQualifiedDeclName(baseType: SwiftSyntax.TypeSyntax?, dot: SwiftSyntax.TokenSyntax?, name: SwiftSyntax.TokenSyntax, arguments: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.QualifiedDeclNameSyntax
  public static func makeBlankQualifiedDeclName() -> SwiftSyntax.QualifiedDeclNameSyntax
  public static func makeFunctionDeclName(name: SwiftSyntax.Syntax, arguments: SwiftSyntax.DeclNameArgumentsSyntax?) -> SwiftSyntax.FunctionDeclNameSyntax
  public static func makeBlankFunctionDeclName() -> SwiftSyntax.FunctionDeclNameSyntax
  public static func makeContinueStmt(continueKeyword: SwiftSyntax.TokenSyntax, label: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ContinueStmtSyntax
  public static func makeBlankContinueStmt() -> SwiftSyntax.ContinueStmtSyntax
  public static func makeWhileStmt(labelName: SwiftSyntax.TokenSyntax?, labelColon: SwiftSyntax.TokenSyntax?, whileKeyword: SwiftSyntax.TokenSyntax, conditions: SwiftSyntax.ConditionElementListSyntax, body: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.WhileStmtSyntax
  public static func makeBlankWhileStmt() -> SwiftSyntax.WhileStmtSyntax
  public static func makeDeferStmt(deferKeyword: SwiftSyntax.TokenSyntax, body: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.DeferStmtSyntax
  public static func makeBlankDeferStmt() -> SwiftSyntax.DeferStmtSyntax
  public static func makeExpressionStmt(expression: SwiftSyntax.ExprSyntax) -> SwiftSyntax.ExpressionStmtSyntax
  public static func makeBlankExpressionStmt() -> SwiftSyntax.ExpressionStmtSyntax
  public static func makeSwitchCaseList(_ elements: [SwiftSyntax.Syntax]) -> SwiftSyntax.SwitchCaseListSyntax
  public static func makeBlankSwitchCaseList() -> SwiftSyntax.SwitchCaseListSyntax
  public static func makeRepeatWhileStmt(labelName: SwiftSyntax.TokenSyntax?, labelColon: SwiftSyntax.TokenSyntax?, repeatKeyword: SwiftSyntax.TokenSyntax, body: SwiftSyntax.CodeBlockSyntax, whileKeyword: SwiftSyntax.TokenSyntax, condition: SwiftSyntax.ExprSyntax) -> SwiftSyntax.RepeatWhileStmtSyntax
  public static func makeBlankRepeatWhileStmt() -> SwiftSyntax.RepeatWhileStmtSyntax
  public static func makeGuardStmt(guardKeyword: SwiftSyntax.TokenSyntax, conditions: SwiftSyntax.ConditionElementListSyntax, elseKeyword: SwiftSyntax.TokenSyntax, body: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.GuardStmtSyntax
  public static func makeBlankGuardStmt() -> SwiftSyntax.GuardStmtSyntax
  public static func makeWhereClause(whereKeyword: SwiftSyntax.TokenSyntax, guardResult: SwiftSyntax.ExprSyntax) -> SwiftSyntax.WhereClauseSyntax
  public static func makeBlankWhereClause() -> SwiftSyntax.WhereClauseSyntax
  public static func makeForInStmt(labelName: SwiftSyntax.TokenSyntax?, labelColon: SwiftSyntax.TokenSyntax?, forKeyword: SwiftSyntax.TokenSyntax, tryKeyword: SwiftSyntax.TokenSyntax?, awaitKeyword: SwiftSyntax.TokenSyntax?, caseKeyword: SwiftSyntax.TokenSyntax?, pattern: SwiftSyntax.PatternSyntax, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax?, inKeyword: SwiftSyntax.TokenSyntax, sequenceExpr: SwiftSyntax.ExprSyntax, whereClause: SwiftSyntax.WhereClauseSyntax?, body: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.ForInStmtSyntax
  public static func makeBlankForInStmt() -> SwiftSyntax.ForInStmtSyntax
  public static func makeSwitchStmt(labelName: SwiftSyntax.TokenSyntax?, labelColon: SwiftSyntax.TokenSyntax?, switchKeyword: SwiftSyntax.TokenSyntax, expression: SwiftSyntax.ExprSyntax, leftBrace: SwiftSyntax.TokenSyntax, cases: SwiftSyntax.SwitchCaseListSyntax, rightBrace: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SwitchStmtSyntax
  public static func makeBlankSwitchStmt() -> SwiftSyntax.SwitchStmtSyntax
  public static func makeCatchClauseList(_ elements: [SwiftSyntax.CatchClauseSyntax]) -> SwiftSyntax.CatchClauseListSyntax
  public static func makeBlankCatchClauseList() -> SwiftSyntax.CatchClauseListSyntax
  public static func makeDoStmt(labelName: SwiftSyntax.TokenSyntax?, labelColon: SwiftSyntax.TokenSyntax?, doKeyword: SwiftSyntax.TokenSyntax, body: SwiftSyntax.CodeBlockSyntax, catchClauses: SwiftSyntax.CatchClauseListSyntax?) -> SwiftSyntax.DoStmtSyntax
  public static func makeBlankDoStmt() -> SwiftSyntax.DoStmtSyntax
  public static func makeReturnStmt(returnKeyword: SwiftSyntax.TokenSyntax, expression: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ReturnStmtSyntax
  public static func makeBlankReturnStmt() -> SwiftSyntax.ReturnStmtSyntax
  public static func makeYieldStmt(yieldKeyword: SwiftSyntax.TokenSyntax, yields: SwiftSyntax.Syntax) -> SwiftSyntax.YieldStmtSyntax
  public static func makeBlankYieldStmt() -> SwiftSyntax.YieldStmtSyntax
  public static func makeYieldList(leftParen: SwiftSyntax.TokenSyntax, elementList: SwiftSyntax.ExprListSyntax, trailingComma: SwiftSyntax.TokenSyntax?, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.YieldListSyntax
  public static func makeBlankYieldList() -> SwiftSyntax.YieldListSyntax
  public static func makeFallthroughStmt(fallthroughKeyword: SwiftSyntax.TokenSyntax) -> SwiftSyntax.FallthroughStmtSyntax
  public static func makeBlankFallthroughStmt() -> SwiftSyntax.FallthroughStmtSyntax
  public static func makeBreakStmt(breakKeyword: SwiftSyntax.TokenSyntax, label: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.BreakStmtSyntax
  public static func makeBlankBreakStmt() -> SwiftSyntax.BreakStmtSyntax
  public static func makeCaseItemList(_ elements: [SwiftSyntax.CaseItemSyntax]) -> SwiftSyntax.CaseItemListSyntax
  public static func makeBlankCaseItemList() -> SwiftSyntax.CaseItemListSyntax
  public static func makeCatchItemList(_ elements: [SwiftSyntax.CatchItemSyntax]) -> SwiftSyntax.CatchItemListSyntax
  public static func makeBlankCatchItemList() -> SwiftSyntax.CatchItemListSyntax
  public static func makeConditionElement(condition: SwiftSyntax.Syntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ConditionElementSyntax
  public static func makeBlankConditionElement() -> SwiftSyntax.ConditionElementSyntax
  public static func makeAvailabilityCondition(poundAvailableKeyword: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax, availabilitySpec: SwiftSyntax.AvailabilitySpecListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.AvailabilityConditionSyntax
  public static func makeBlankAvailabilityCondition() -> SwiftSyntax.AvailabilityConditionSyntax
  public static func makeMatchingPatternCondition(caseKeyword: SwiftSyntax.TokenSyntax, pattern: SwiftSyntax.PatternSyntax, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax?, initializer: SwiftSyntax.InitializerClauseSyntax) -> SwiftSyntax.MatchingPatternConditionSyntax
  public static func makeBlankMatchingPatternCondition() -> SwiftSyntax.MatchingPatternConditionSyntax
  public static func makeOptionalBindingCondition(letOrVarKeyword: SwiftSyntax.TokenSyntax, pattern: SwiftSyntax.PatternSyntax, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax?, initializer: SwiftSyntax.InitializerClauseSyntax) -> SwiftSyntax.OptionalBindingConditionSyntax
  public static func makeBlankOptionalBindingCondition() -> SwiftSyntax.OptionalBindingConditionSyntax
  public static func makeConditionElementList(_ elements: [SwiftSyntax.ConditionElementSyntax]) -> SwiftSyntax.ConditionElementListSyntax
  public static func makeBlankConditionElementList() -> SwiftSyntax.ConditionElementListSyntax
  public static func makeDeclarationStmt(declaration: SwiftSyntax.DeclSyntax) -> SwiftSyntax.DeclarationStmtSyntax
  public static func makeBlankDeclarationStmt() -> SwiftSyntax.DeclarationStmtSyntax
  public static func makeThrowStmt(throwKeyword: SwiftSyntax.TokenSyntax, expression: SwiftSyntax.ExprSyntax) -> SwiftSyntax.ThrowStmtSyntax
  public static func makeBlankThrowStmt() -> SwiftSyntax.ThrowStmtSyntax
  public static func makeIfStmt(labelName: SwiftSyntax.TokenSyntax?, labelColon: SwiftSyntax.TokenSyntax?, ifKeyword: SwiftSyntax.TokenSyntax, conditions: SwiftSyntax.ConditionElementListSyntax, body: SwiftSyntax.CodeBlockSyntax, elseKeyword: SwiftSyntax.TokenSyntax?, elseBody: SwiftSyntax.Syntax?) -> SwiftSyntax.IfStmtSyntax
  public static func makeBlankIfStmt() -> SwiftSyntax.IfStmtSyntax
  public static func makeElseIfContinuation(ifStatement: SwiftSyntax.IfStmtSyntax) -> SwiftSyntax.ElseIfContinuationSyntax
  public static func makeBlankElseIfContinuation() -> SwiftSyntax.ElseIfContinuationSyntax
  public static func makeElseBlock(elseKeyword: SwiftSyntax.TokenSyntax, body: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.ElseBlockSyntax
  public static func makeBlankElseBlock() -> SwiftSyntax.ElseBlockSyntax
  public static func makeSwitchCase(unknownAttr: SwiftSyntax.AttributeSyntax?, label: SwiftSyntax.Syntax, statements: SwiftSyntax.CodeBlockItemListSyntax) -> SwiftSyntax.SwitchCaseSyntax
  public static func makeBlankSwitchCase() -> SwiftSyntax.SwitchCaseSyntax
  public static func makeSwitchDefaultLabel(defaultKeyword: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SwitchDefaultLabelSyntax
  public static func makeBlankSwitchDefaultLabel() -> SwiftSyntax.SwitchDefaultLabelSyntax
  public static func makeCaseItem(pattern: SwiftSyntax.PatternSyntax, whereClause: SwiftSyntax.WhereClauseSyntax?, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CaseItemSyntax
  public static func makeBlankCaseItem() -> SwiftSyntax.CaseItemSyntax
  public static func makeCatchItem(pattern: SwiftSyntax.PatternSyntax?, whereClause: SwiftSyntax.WhereClauseSyntax?, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CatchItemSyntax
  public static func makeBlankCatchItem() -> SwiftSyntax.CatchItemSyntax
  public static func makeSwitchCaseLabel(caseKeyword: SwiftSyntax.TokenSyntax, caseItems: SwiftSyntax.CaseItemListSyntax, colon: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SwitchCaseLabelSyntax
  public static func makeBlankSwitchCaseLabel() -> SwiftSyntax.SwitchCaseLabelSyntax
  public static func makeCatchClause(catchKeyword: SwiftSyntax.TokenSyntax, catchItems: SwiftSyntax.CatchItemListSyntax?, body: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.CatchClauseSyntax
  public static func makeBlankCatchClause() -> SwiftSyntax.CatchClauseSyntax
  public static func makePoundAssertStmt(poundAssert: SwiftSyntax.TokenSyntax, leftParen: SwiftSyntax.TokenSyntax, condition: SwiftSyntax.ExprSyntax, comma: SwiftSyntax.TokenSyntax?, message: SwiftSyntax.TokenSyntax?, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.PoundAssertStmtSyntax
  public static func makeBlankPoundAssertStmt() -> SwiftSyntax.PoundAssertStmtSyntax
  public static func makeGenericWhereClause(whereKeyword: SwiftSyntax.TokenSyntax, requirementList: SwiftSyntax.GenericRequirementListSyntax) -> SwiftSyntax.GenericWhereClauseSyntax
  public static func makeBlankGenericWhereClause() -> SwiftSyntax.GenericWhereClauseSyntax
  public static func makeGenericRequirementList(_ elements: [SwiftSyntax.GenericRequirementSyntax]) -> SwiftSyntax.GenericRequirementListSyntax
  public static func makeBlankGenericRequirementList() -> SwiftSyntax.GenericRequirementListSyntax
  public static func makeGenericRequirement(body: SwiftSyntax.Syntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericRequirementSyntax
  public static func makeBlankGenericRequirement() -> SwiftSyntax.GenericRequirementSyntax
  public static func makeSameTypeRequirement(leftTypeIdentifier: SwiftSyntax.TypeSyntax, equalityToken: SwiftSyntax.TokenSyntax, rightTypeIdentifier: SwiftSyntax.TypeSyntax) -> SwiftSyntax.SameTypeRequirementSyntax
  public static func makeBlankSameTypeRequirement() -> SwiftSyntax.SameTypeRequirementSyntax
  public static func makeGenericParameterList(_ elements: [SwiftSyntax.GenericParameterSyntax]) -> SwiftSyntax.GenericParameterListSyntax
  public static func makeBlankGenericParameterList() -> SwiftSyntax.GenericParameterListSyntax
  public static func makeGenericParameter(attributes: SwiftSyntax.AttributeListSyntax?, name: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax?, inheritedType: SwiftSyntax.TypeSyntax?, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericParameterSyntax
  public static func makeBlankGenericParameter() -> SwiftSyntax.GenericParameterSyntax
  public static func makeGenericParameterClause(leftAngleBracket: SwiftSyntax.TokenSyntax, genericParameterList: SwiftSyntax.GenericParameterListSyntax, rightAngleBracket: SwiftSyntax.TokenSyntax) -> SwiftSyntax.GenericParameterClauseSyntax
  public static func makeBlankGenericParameterClause() -> SwiftSyntax.GenericParameterClauseSyntax
  public static func makeConformanceRequirement(leftTypeIdentifier: SwiftSyntax.TypeSyntax, colon: SwiftSyntax.TokenSyntax, rightTypeIdentifier: SwiftSyntax.TypeSyntax) -> SwiftSyntax.ConformanceRequirementSyntax
  public static func makeBlankConformanceRequirement() -> SwiftSyntax.ConformanceRequirementSyntax
  public static func makeSimpleTypeIdentifier(name: SwiftSyntax.TokenSyntax, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax?) -> SwiftSyntax.SimpleTypeIdentifierSyntax
  public static func makeBlankSimpleTypeIdentifier() -> SwiftSyntax.SimpleTypeIdentifierSyntax
  public static func makeMemberTypeIdentifier(baseType: SwiftSyntax.TypeSyntax, period: SwiftSyntax.TokenSyntax, name: SwiftSyntax.TokenSyntax, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax?) -> SwiftSyntax.MemberTypeIdentifierSyntax
  public static func makeBlankMemberTypeIdentifier() -> SwiftSyntax.MemberTypeIdentifierSyntax
  public static func makeClassRestrictionType(classKeyword: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ClassRestrictionTypeSyntax
  public static func makeBlankClassRestrictionType() -> SwiftSyntax.ClassRestrictionTypeSyntax
  public static func makeArrayType(leftSquareBracket: SwiftSyntax.TokenSyntax, elementType: SwiftSyntax.TypeSyntax, rightSquareBracket: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ArrayTypeSyntax
  public static func makeBlankArrayType() -> SwiftSyntax.ArrayTypeSyntax
  public static func makeDictionaryType(leftSquareBracket: SwiftSyntax.TokenSyntax, keyType: SwiftSyntax.TypeSyntax, colon: SwiftSyntax.TokenSyntax, valueType: SwiftSyntax.TypeSyntax, rightSquareBracket: SwiftSyntax.TokenSyntax) -> SwiftSyntax.DictionaryTypeSyntax
  public static func makeBlankDictionaryType() -> SwiftSyntax.DictionaryTypeSyntax
  public static func makeMetatypeType(baseType: SwiftSyntax.TypeSyntax, period: SwiftSyntax.TokenSyntax, typeOrProtocol: SwiftSyntax.TokenSyntax) -> SwiftSyntax.MetatypeTypeSyntax
  public static func makeBlankMetatypeType() -> SwiftSyntax.MetatypeTypeSyntax
  public static func makeOptionalType(wrappedType: SwiftSyntax.TypeSyntax, questionMark: SwiftSyntax.TokenSyntax) -> SwiftSyntax.OptionalTypeSyntax
  public static func makeBlankOptionalType() -> SwiftSyntax.OptionalTypeSyntax
  public static func makeSomeType(someSpecifier: SwiftSyntax.TokenSyntax, baseType: SwiftSyntax.TypeSyntax) -> SwiftSyntax.SomeTypeSyntax
  public static func makeBlankSomeType() -> SwiftSyntax.SomeTypeSyntax
  public static func makeImplicitlyUnwrappedOptionalType(wrappedType: SwiftSyntax.TypeSyntax, exclamationMark: SwiftSyntax.TokenSyntax) -> SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax
  public static func makeBlankImplicitlyUnwrappedOptionalType() -> SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax
  public static func makeCompositionTypeElement(type: SwiftSyntax.TypeSyntax, ampersand: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.CompositionTypeElementSyntax
  public static func makeBlankCompositionTypeElement() -> SwiftSyntax.CompositionTypeElementSyntax
  public static func makeCompositionTypeElementList(_ elements: [SwiftSyntax.CompositionTypeElementSyntax]) -> SwiftSyntax.CompositionTypeElementListSyntax
  public static func makeBlankCompositionTypeElementList() -> SwiftSyntax.CompositionTypeElementListSyntax
  public static func makeCompositionType(elements: SwiftSyntax.CompositionTypeElementListSyntax) -> SwiftSyntax.CompositionTypeSyntax
  public static func makeBlankCompositionType() -> SwiftSyntax.CompositionTypeSyntax
  public static func makeTupleTypeElement(inOut: SwiftSyntax.TokenSyntax?, name: SwiftSyntax.TokenSyntax?, secondName: SwiftSyntax.TokenSyntax?, colon: SwiftSyntax.TokenSyntax?, type: SwiftSyntax.TypeSyntax, ellipsis: SwiftSyntax.TokenSyntax?, initializer: SwiftSyntax.InitializerClauseSyntax?, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public static func makeBlankTupleTypeElement() -> SwiftSyntax.TupleTypeElementSyntax
  public static func makeTupleTypeElementList(_ elements: [SwiftSyntax.TupleTypeElementSyntax]) -> SwiftSyntax.TupleTypeElementListSyntax
  public static func makeBlankTupleTypeElementList() -> SwiftSyntax.TupleTypeElementListSyntax
  public static func makeTupleType(leftParen: SwiftSyntax.TokenSyntax, elements: SwiftSyntax.TupleTypeElementListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TupleTypeSyntax
  public static func makeBlankTupleType() -> SwiftSyntax.TupleTypeSyntax
  public static func makeFunctionType(leftParen: SwiftSyntax.TokenSyntax, arguments: SwiftSyntax.TupleTypeElementListSyntax, rightParen: SwiftSyntax.TokenSyntax, asyncKeyword: SwiftSyntax.TokenSyntax?, throwsOrRethrowsKeyword: SwiftSyntax.TokenSyntax?, arrow: SwiftSyntax.TokenSyntax, returnType: SwiftSyntax.TypeSyntax) -> SwiftSyntax.FunctionTypeSyntax
  public static func makeBlankFunctionType() -> SwiftSyntax.FunctionTypeSyntax
  public static func makeAttributedType(specifier: SwiftSyntax.TokenSyntax?, attributes: SwiftSyntax.AttributeListSyntax?, baseType: SwiftSyntax.TypeSyntax) -> SwiftSyntax.AttributedTypeSyntax
  public static func makeBlankAttributedType() -> SwiftSyntax.AttributedTypeSyntax
  public static func makeGenericArgumentList(_ elements: [SwiftSyntax.GenericArgumentSyntax]) -> SwiftSyntax.GenericArgumentListSyntax
  public static func makeBlankGenericArgumentList() -> SwiftSyntax.GenericArgumentListSyntax
  public static func makeGenericArgument(argumentType: SwiftSyntax.TypeSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.GenericArgumentSyntax
  public static func makeBlankGenericArgument() -> SwiftSyntax.GenericArgumentSyntax
  public static func makeGenericArgumentClause(leftAngleBracket: SwiftSyntax.TokenSyntax, arguments: SwiftSyntax.GenericArgumentListSyntax, rightAngleBracket: SwiftSyntax.TokenSyntax) -> SwiftSyntax.GenericArgumentClauseSyntax
  public static func makeBlankGenericArgumentClause() -> SwiftSyntax.GenericArgumentClauseSyntax
  public static func makeTypeAnnotation(colon: SwiftSyntax.TokenSyntax, type: SwiftSyntax.TypeSyntax) -> SwiftSyntax.TypeAnnotationSyntax
  public static func makeBlankTypeAnnotation() -> SwiftSyntax.TypeAnnotationSyntax
  public static func makeEnumCasePattern(type: SwiftSyntax.TypeSyntax?, period: SwiftSyntax.TokenSyntax, caseName: SwiftSyntax.TokenSyntax, associatedTuple: SwiftSyntax.TuplePatternSyntax?) -> SwiftSyntax.EnumCasePatternSyntax
  public static func makeBlankEnumCasePattern() -> SwiftSyntax.EnumCasePatternSyntax
  public static func makeIsTypePattern(isKeyword: SwiftSyntax.TokenSyntax, type: SwiftSyntax.TypeSyntax) -> SwiftSyntax.IsTypePatternSyntax
  public static func makeBlankIsTypePattern() -> SwiftSyntax.IsTypePatternSyntax
  public static func makeOptionalPattern(subPattern: SwiftSyntax.PatternSyntax, questionMark: SwiftSyntax.TokenSyntax) -> SwiftSyntax.OptionalPatternSyntax
  public static func makeBlankOptionalPattern() -> SwiftSyntax.OptionalPatternSyntax
  public static func makeIdentifierPattern(identifier: SwiftSyntax.TokenSyntax) -> SwiftSyntax.IdentifierPatternSyntax
  public static func makeBlankIdentifierPattern() -> SwiftSyntax.IdentifierPatternSyntax
  public static func makeAsTypePattern(pattern: SwiftSyntax.PatternSyntax, asKeyword: SwiftSyntax.TokenSyntax, type: SwiftSyntax.TypeSyntax) -> SwiftSyntax.AsTypePatternSyntax
  public static func makeBlankAsTypePattern() -> SwiftSyntax.AsTypePatternSyntax
  public static func makeTuplePattern(leftParen: SwiftSyntax.TokenSyntax, elements: SwiftSyntax.TuplePatternElementListSyntax, rightParen: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TuplePatternSyntax
  public static func makeBlankTuplePattern() -> SwiftSyntax.TuplePatternSyntax
  public static func makeWildcardPattern(wildcard: SwiftSyntax.TokenSyntax, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax?) -> SwiftSyntax.WildcardPatternSyntax
  public static func makeBlankWildcardPattern() -> SwiftSyntax.WildcardPatternSyntax
  public static func makeTuplePatternElement(labelName: SwiftSyntax.TokenSyntax?, labelColon: SwiftSyntax.TokenSyntax?, pattern: SwiftSyntax.PatternSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TuplePatternElementSyntax
  public static func makeBlankTuplePatternElement() -> SwiftSyntax.TuplePatternElementSyntax
  public static func makeExpressionPattern(expression: SwiftSyntax.ExprSyntax) -> SwiftSyntax.ExpressionPatternSyntax
  public static func makeBlankExpressionPattern() -> SwiftSyntax.ExpressionPatternSyntax
  public static func makeTuplePatternElementList(_ elements: [SwiftSyntax.TuplePatternElementSyntax]) -> SwiftSyntax.TuplePatternElementListSyntax
  public static func makeBlankTuplePatternElementList() -> SwiftSyntax.TuplePatternElementListSyntax
  public static func makeValueBindingPattern(letOrVarKeyword: SwiftSyntax.TokenSyntax, valuePattern: SwiftSyntax.PatternSyntax) -> SwiftSyntax.ValueBindingPatternSyntax
  public static func makeBlankValueBindingPattern() -> SwiftSyntax.ValueBindingPatternSyntax
  public static func makeAvailabilitySpecList(_ elements: [SwiftSyntax.AvailabilityArgumentSyntax]) -> SwiftSyntax.AvailabilitySpecListSyntax
  public static func makeBlankAvailabilitySpecList() -> SwiftSyntax.AvailabilitySpecListSyntax
  public static func makeAvailabilityArgument(entry: SwiftSyntax.Syntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AvailabilityArgumentSyntax
  public static func makeBlankAvailabilityArgument() -> SwiftSyntax.AvailabilityArgumentSyntax
  public static func makeAvailabilityLabeledArgument(label: SwiftSyntax.TokenSyntax, colon: SwiftSyntax.TokenSyntax, value: SwiftSyntax.Syntax) -> SwiftSyntax.AvailabilityLabeledArgumentSyntax
  public static func makeBlankAvailabilityLabeledArgument() -> SwiftSyntax.AvailabilityLabeledArgumentSyntax
  public static func makeAvailabilityVersionRestriction(platform: SwiftSyntax.TokenSyntax, version: SwiftSyntax.VersionTupleSyntax?) -> SwiftSyntax.AvailabilityVersionRestrictionSyntax
  public static func makeBlankAvailabilityVersionRestriction() -> SwiftSyntax.AvailabilityVersionRestrictionSyntax
  public static func makeVersionTuple(majorMinor: SwiftSyntax.Syntax, patchPeriod: SwiftSyntax.TokenSyntax?, patchVersion: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.VersionTupleSyntax
  public static func makeBlankVersionTuple() -> SwiftSyntax.VersionTupleSyntax
  public static func makeAssociatedtypeKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeClassKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeDeinitKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeEnumKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeExtensionKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeFuncKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeImportKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeInitKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeInoutKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeLetKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeOperatorKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePrecedencegroupKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeProtocolKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeStructKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeSubscriptKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeTypealiasKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeVarKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeFileprivateKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeInternalKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePrivateKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePublicKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeStaticKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeDeferKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeIfKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeGuardKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeDoKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeRepeatKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeElseKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeForKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeInKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeWhileKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeReturnKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeBreakKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeContinueKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeFallthroughKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeSwitchKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeCaseKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeDefaultKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeWhereKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeCatchKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeThrowKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeAsKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeAnyKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeFalseKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeIsKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeNilKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeRethrowsKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeSuperKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeSelfKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeCapitalSelfKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeTrueKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeTryKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeThrowsKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func make__FILE__Keyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func make__LINE__Keyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func make__COLUMN__Keyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func make__FUNCTION__Keyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func make__DSO_HANDLE__Keyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeWildcardKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeLeftParenToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeRightParenToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeLeftBraceToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeRightBraceToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeLeftSquareBracketToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeRightSquareBracketToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeLeftAngleToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeRightAngleToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePeriodToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePrefixPeriodToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeCommaToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeEllipsisToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeColonToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeSemicolonToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeEqualToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeAtSignToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePrefixAmpersandToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeArrowToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeBacktickToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeBackslashToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeExclamationMarkToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePostfixQuestionMarkToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeInfixQuestionMarkToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeStringQuoteToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeSingleQuoteToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeMultilineStringQuoteToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundKeyPathKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundLineKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundSelectorKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundFileKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundFileIDKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundFilePathKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundColumnKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundFunctionKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundDsohandleKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundAssertKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundSourceLocationKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundWarningKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundErrorKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundIfKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundElseKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundElseifKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundEndifKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundAvailableKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundFileLiteralKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundImageLiteralKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePoundColorLiteralKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeIntegerLiteral(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeFloatingLiteral(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeStringLiteral(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeUnknown(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeIdentifier(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeUnspacedBinaryOperator(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeSpacedBinaryOperator(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePostfixOperator(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makePrefixOperator(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeDollarIdentifier(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeContextualKeyword(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeRawStringDelimiter(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeStringSegment(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeStringInterpolationAnchorToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeYieldToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeVoidTupleType() -> SwiftSyntax.TupleTypeSyntax
  public static func makeTupleTypeElement(name: SwiftSyntax.TokenSyntax?, colon: SwiftSyntax.TokenSyntax?, type: SwiftSyntax.TypeSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public static func makeTupleTypeElement(type: SwiftSyntax.TypeSyntax, trailingComma: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TupleTypeElementSyntax
  public static func makeGenericParameter(name: SwiftSyntax.TokenSyntax, trailingComma: SwiftSyntax.TokenSyntax) -> SwiftSyntax.GenericParameterSyntax
  public static func makeTypeIdentifier(_ name: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TypeSyntax
  public static func makeAnyTypeIdentifier(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TypeSyntax
  public static func makeSelfTypeIdentifier(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TypeSyntax
  public static func makeTypeToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeProtocolToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeBinaryOperator(_ name: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.TokenSyntax
  public static func makeStringLiteralExpr(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.StringLiteralExprSyntax
  public static func makeVariableExpr(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = []) -> SwiftSyntax.IdentifierExprSyntax
}
public protocol DeclSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: SwiftSyntax.DeclSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.DeclSyntaxProtocol.Protocol) -> SwiftSyntax.DeclSyntaxProtocol?
}
public struct DeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init<S>(_ syntax: S) where S : SwiftSyntax.DeclSyntaxProtocol
  public init?<S>(_ syntax: S?) where S : SwiftSyntax.DeclSyntaxProtocol
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.DeclSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.DeclSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: SwiftSyntax.DeclSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.DeclSyntaxProtocol.Protocol) -> SwiftSyntax.DeclSyntaxProtocol
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public protocol ExprSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: SwiftSyntax.ExprSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.ExprSyntaxProtocol.Protocol) -> SwiftSyntax.ExprSyntaxProtocol?
}
public struct ExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init<S>(_ syntax: S) where S : SwiftSyntax.ExprSyntaxProtocol
  public init?<S>(_ syntax: S?) where S : SwiftSyntax.ExprSyntaxProtocol
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.ExprSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.ExprSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: SwiftSyntax.ExprSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.ExprSyntaxProtocol.Protocol) -> SwiftSyntax.ExprSyntaxProtocol
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ExprSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public protocol StmtSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: SwiftSyntax.StmtSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.StmtSyntaxProtocol.Protocol) -> SwiftSyntax.StmtSyntaxProtocol?
}
public struct StmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init<S>(_ syntax: S) where S : SwiftSyntax.StmtSyntaxProtocol
  public init?<S>(_ syntax: S?) where S : SwiftSyntax.StmtSyntaxProtocol
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.StmtSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.StmtSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: SwiftSyntax.StmtSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.StmtSyntaxProtocol.Protocol) -> SwiftSyntax.StmtSyntaxProtocol
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.StmtSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public protocol TypeSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: SwiftSyntax.TypeSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.TypeSyntaxProtocol.Protocol) -> SwiftSyntax.TypeSyntaxProtocol?
}
public struct TypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init<S>(_ syntax: S) where S : SwiftSyntax.TypeSyntaxProtocol
  public init?<S>(_ syntax: S?) where S : SwiftSyntax.TypeSyntaxProtocol
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.TypeSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.TypeSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: SwiftSyntax.TypeSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.TypeSyntaxProtocol.Protocol) -> SwiftSyntax.TypeSyntaxProtocol
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TypeSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public protocol PatternSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: SwiftSyntax.PatternSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.PatternSyntaxProtocol.Protocol) -> SwiftSyntax.PatternSyntaxProtocol?
}
public struct PatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init<S>(_ syntax: S) where S : SwiftSyntax.PatternSyntaxProtocol
  public init?<S>(_ syntax: S?) where S : SwiftSyntax.PatternSyntaxProtocol
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.PatternSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.PatternSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: SwiftSyntax.PatternSyntaxProtocol.Protocol) -> Swift.Bool
  public func asProtocol(_: SwiftSyntax.PatternSyntaxProtocol.Protocol) -> SwiftSyntax.PatternSyntaxProtocol
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public protocol SyntaxCollection : Swift.Sequence, SwiftSyntax.SyntaxProtocol {
  var count: Swift.Int { get }
}
public struct CodeBlockItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.CodeBlockItemListSyntax
  public func prepending(_ syntax: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.CodeBlockItemListSyntax
  public func inserting(_ syntax: SwiftSyntax.CodeBlockItemSyntax, at index: Swift.Int) -> SwiftSyntax.CodeBlockItemListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.CodeBlockItemListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.CodeBlockItemListSyntax
  public func removingFirst() -> SwiftSyntax.CodeBlockItemListSyntax
  public func removingLast() -> SwiftSyntax.CodeBlockItemListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CodeBlockItemListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CodeBlockItemListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.CodeBlockItemListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.CodeBlockItemListSyntax
  public func withoutTrivia() -> SwiftSyntax.CodeBlockItemListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CodeBlockItemListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.CodeBlockItemSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.CodeBlockItemSyntax?
    public typealias Element = SwiftSyntax.CodeBlockItemSyntax
  }
  public func makeIterator() -> SwiftSyntax.CodeBlockItemListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.CodeBlockItemSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CodeBlockItemListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CodeBlockItemListSyntax>
}
public struct TupleExprElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.TupleExprElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.TupleExprElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.TupleExprElementSyntax, at index: Swift.Int) -> SwiftSyntax.TupleExprElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.TupleExprElementSyntax) -> SwiftSyntax.TupleExprElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.TupleExprElementListSyntax
  public func removingFirst() -> SwiftSyntax.TupleExprElementListSyntax
  public func removingLast() -> SwiftSyntax.TupleExprElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TupleExprElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TupleExprElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.TupleExprElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.TupleExprElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.TupleExprElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TupleExprElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.TupleExprElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TupleExprElementSyntax?
    public typealias Element = SwiftSyntax.TupleExprElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.TupleExprElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.TupleExprElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.TupleExprElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.TupleExprElementListSyntax>
}
public struct ArrayElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.ArrayElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.ArrayElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.ArrayElementSyntax, at index: Swift.Int) -> SwiftSyntax.ArrayElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.ArrayElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.ArrayElementListSyntax
  public func removingFirst() -> SwiftSyntax.ArrayElementListSyntax
  public func removingLast() -> SwiftSyntax.ArrayElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ArrayElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ArrayElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.ArrayElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.ArrayElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.ArrayElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ArrayElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.ArrayElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.ArrayElementSyntax?
    public typealias Element = SwiftSyntax.ArrayElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.ArrayElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.ArrayElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ArrayElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ArrayElementListSyntax>
}
public struct DictionaryElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.DictionaryElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.DictionaryElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.DictionaryElementSyntax, at index: Swift.Int) -> SwiftSyntax.DictionaryElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.DictionaryElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.DictionaryElementListSyntax
  public func removingFirst() -> SwiftSyntax.DictionaryElementListSyntax
  public func removingLast() -> SwiftSyntax.DictionaryElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.DictionaryElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.DictionaryElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.DictionaryElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.DictionaryElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.DictionaryElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DictionaryElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.DictionaryElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.DictionaryElementSyntax?
    public typealias Element = SwiftSyntax.DictionaryElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.DictionaryElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.DictionaryElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DictionaryElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DictionaryElementListSyntax>
}
public struct StringLiteralSegmentsSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func prepending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func inserting(_ syntax: SwiftSyntax.Syntax, at index: Swift.Int) -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.Syntax) -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func removingFirst() -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func removingLast() -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.StringLiteralSegmentsSyntax
  public func withoutTrivia() -> SwiftSyntax.StringLiteralSegmentsSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.StringLiteralSegmentsSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.Syntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.Syntax?
    public typealias Element = SwiftSyntax.Syntax
  }
  public func makeIterator() -> SwiftSyntax.StringLiteralSegmentsSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.Syntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.StringLiteralSegmentsSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.StringLiteralSegmentsSyntax>
}
public struct DeclNameArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.DeclNameArgumentListSyntax
  public func prepending(_ syntax: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.DeclNameArgumentListSyntax
  public func inserting(_ syntax: SwiftSyntax.DeclNameArgumentSyntax, at index: Swift.Int) -> SwiftSyntax.DeclNameArgumentListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.DeclNameArgumentListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.DeclNameArgumentListSyntax
  public func removingFirst() -> SwiftSyntax.DeclNameArgumentListSyntax
  public func removingLast() -> SwiftSyntax.DeclNameArgumentListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.DeclNameArgumentListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.DeclNameArgumentListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.DeclNameArgumentListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.DeclNameArgumentListSyntax
  public func withoutTrivia() -> SwiftSyntax.DeclNameArgumentListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeclNameArgumentListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.DeclNameArgumentSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.DeclNameArgumentSyntax?
    public typealias Element = SwiftSyntax.DeclNameArgumentSyntax
  }
  public func makeIterator() -> SwiftSyntax.DeclNameArgumentListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.DeclNameArgumentSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DeclNameArgumentListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DeclNameArgumentListSyntax>
}
public struct ExprListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.ExprSyntax) -> SwiftSyntax.ExprListSyntax
  public func prepending(_ syntax: SwiftSyntax.ExprSyntax) -> SwiftSyntax.ExprListSyntax
  public func inserting(_ syntax: SwiftSyntax.ExprSyntax, at index: Swift.Int) -> SwiftSyntax.ExprListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.ExprSyntax) -> SwiftSyntax.ExprListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.ExprListSyntax
  public func removingFirst() -> SwiftSyntax.ExprListSyntax
  public func removingLast() -> SwiftSyntax.ExprListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ExprListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ExprListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.ExprListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.ExprListSyntax
  public func withoutTrivia() -> SwiftSyntax.ExprListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ExprListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.ExprSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.ExprSyntax?
    public typealias Element = SwiftSyntax.ExprSyntax
  }
  public func makeIterator() -> SwiftSyntax.ExprListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.ExprSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ExprListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ExprListSyntax>
}
public struct ClosureCaptureItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.ClosureCaptureItemSyntax) -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func prepending(_ syntax: SwiftSyntax.ClosureCaptureItemSyntax) -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func inserting(_ syntax: SwiftSyntax.ClosureCaptureItemSyntax, at index: Swift.Int) -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.ClosureCaptureItemSyntax) -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func removingFirst() -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func removingLast() -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.ClosureCaptureItemListSyntax
  public func withoutTrivia() -> SwiftSyntax.ClosureCaptureItemListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClosureCaptureItemListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.ClosureCaptureItemSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.ClosureCaptureItemSyntax?
    public typealias Element = SwiftSyntax.ClosureCaptureItemSyntax
  }
  public func makeIterator() -> SwiftSyntax.ClosureCaptureItemListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.ClosureCaptureItemSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ClosureCaptureItemListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ClosureCaptureItemListSyntax>
}
public struct ClosureParamListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.ClosureParamSyntax) -> SwiftSyntax.ClosureParamListSyntax
  public func prepending(_ syntax: SwiftSyntax.ClosureParamSyntax) -> SwiftSyntax.ClosureParamListSyntax
  public func inserting(_ syntax: SwiftSyntax.ClosureParamSyntax, at index: Swift.Int) -> SwiftSyntax.ClosureParamListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.ClosureParamSyntax) -> SwiftSyntax.ClosureParamListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.ClosureParamListSyntax
  public func removingFirst() -> SwiftSyntax.ClosureParamListSyntax
  public func removingLast() -> SwiftSyntax.ClosureParamListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ClosureParamListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ClosureParamListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.ClosureParamListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.ClosureParamListSyntax
  public func withoutTrivia() -> SwiftSyntax.ClosureParamListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClosureParamListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.ClosureParamSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.ClosureParamSyntax?
    public typealias Element = SwiftSyntax.ClosureParamSyntax
  }
  public func makeIterator() -> SwiftSyntax.ClosureParamListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.ClosureParamSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ClosureParamListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ClosureParamListSyntax>
}
public struct MultipleTrailingClosureElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.MultipleTrailingClosureElementSyntax, at index: Swift.Int) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func removingFirst() -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func removingLast() -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MultipleTrailingClosureElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.MultipleTrailingClosureElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.MultipleTrailingClosureElementSyntax?
    public typealias Element = SwiftSyntax.MultipleTrailingClosureElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.MultipleTrailingClosureElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.MultipleTrailingClosureElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.MultipleTrailingClosureElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.MultipleTrailingClosureElementListSyntax>
}
public struct ObjcNameSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.ObjcNamePieceSyntax) -> SwiftSyntax.ObjcNameSyntax
  public func prepending(_ syntax: SwiftSyntax.ObjcNamePieceSyntax) -> SwiftSyntax.ObjcNameSyntax
  public func inserting(_ syntax: SwiftSyntax.ObjcNamePieceSyntax, at index: Swift.Int) -> SwiftSyntax.ObjcNameSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.ObjcNamePieceSyntax) -> SwiftSyntax.ObjcNameSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.ObjcNameSyntax
  public func removingFirst() -> SwiftSyntax.ObjcNameSyntax
  public func removingLast() -> SwiftSyntax.ObjcNameSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ObjcNameSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ObjcNameSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.ObjcNameSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.ObjcNameSyntax
  public func withoutTrivia() -> SwiftSyntax.ObjcNameSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ObjcNameSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.ObjcNamePieceSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.ObjcNamePieceSyntax?
    public typealias Element = SwiftSyntax.ObjcNamePieceSyntax
  }
  public func makeIterator() -> SwiftSyntax.ObjcNameSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.ObjcNamePieceSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ObjcNameSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ObjcNameSyntax>
}
public struct FunctionParameterListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.FunctionParameterListSyntax
  public func prepending(_ syntax: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.FunctionParameterListSyntax
  public func inserting(_ syntax: SwiftSyntax.FunctionParameterSyntax, at index: Swift.Int) -> SwiftSyntax.FunctionParameterListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.FunctionParameterListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.FunctionParameterListSyntax
  public func removingFirst() -> SwiftSyntax.FunctionParameterListSyntax
  public func removingLast() -> SwiftSyntax.FunctionParameterListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.FunctionParameterListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.FunctionParameterListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.FunctionParameterListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.FunctionParameterListSyntax
  public func withoutTrivia() -> SwiftSyntax.FunctionParameterListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FunctionParameterListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.FunctionParameterSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.FunctionParameterSyntax?
    public typealias Element = SwiftSyntax.FunctionParameterSyntax
  }
  public func makeIterator() -> SwiftSyntax.FunctionParameterListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.FunctionParameterSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.FunctionParameterListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.FunctionParameterListSyntax>
}
public struct IfConfigClauseListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.IfConfigClauseListSyntax
  public func prepending(_ syntax: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.IfConfigClauseListSyntax
  public func inserting(_ syntax: SwiftSyntax.IfConfigClauseSyntax, at index: Swift.Int) -> SwiftSyntax.IfConfigClauseListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.IfConfigClauseListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.IfConfigClauseListSyntax
  public func removingFirst() -> SwiftSyntax.IfConfigClauseListSyntax
  public func removingLast() -> SwiftSyntax.IfConfigClauseListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.IfConfigClauseListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.IfConfigClauseListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.IfConfigClauseListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.IfConfigClauseListSyntax
  public func withoutTrivia() -> SwiftSyntax.IfConfigClauseListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IfConfigClauseListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.IfConfigClauseSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.IfConfigClauseSyntax?
    public typealias Element = SwiftSyntax.IfConfigClauseSyntax
  }
  public func makeIterator() -> SwiftSyntax.IfConfigClauseListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.IfConfigClauseSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.IfConfigClauseListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.IfConfigClauseListSyntax>
}
public struct InheritedTypeListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.InheritedTypeListSyntax
  public func prepending(_ syntax: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.InheritedTypeListSyntax
  public func inserting(_ syntax: SwiftSyntax.InheritedTypeSyntax, at index: Swift.Int) -> SwiftSyntax.InheritedTypeListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.InheritedTypeListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.InheritedTypeListSyntax
  public func removingFirst() -> SwiftSyntax.InheritedTypeListSyntax
  public func removingLast() -> SwiftSyntax.InheritedTypeListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.InheritedTypeListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.InheritedTypeListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.InheritedTypeListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.InheritedTypeListSyntax
  public func withoutTrivia() -> SwiftSyntax.InheritedTypeListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.InheritedTypeListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.InheritedTypeSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.InheritedTypeSyntax?
    public typealias Element = SwiftSyntax.InheritedTypeSyntax
  }
  public func makeIterator() -> SwiftSyntax.InheritedTypeListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.InheritedTypeSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.InheritedTypeListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.InheritedTypeListSyntax>
}
public struct MemberDeclListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.MemberDeclListItemSyntax) -> SwiftSyntax.MemberDeclListSyntax
  public func prepending(_ syntax: SwiftSyntax.MemberDeclListItemSyntax) -> SwiftSyntax.MemberDeclListSyntax
  public func inserting(_ syntax: SwiftSyntax.MemberDeclListItemSyntax, at index: Swift.Int) -> SwiftSyntax.MemberDeclListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.MemberDeclListItemSyntax) -> SwiftSyntax.MemberDeclListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.MemberDeclListSyntax
  public func removingFirst() -> SwiftSyntax.MemberDeclListSyntax
  public func removingLast() -> SwiftSyntax.MemberDeclListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.MemberDeclListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.MemberDeclListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.MemberDeclListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.MemberDeclListSyntax
  public func withoutTrivia() -> SwiftSyntax.MemberDeclListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.MemberDeclListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.MemberDeclListItemSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.MemberDeclListItemSyntax?
    public typealias Element = SwiftSyntax.MemberDeclListItemSyntax
  }
  public func makeIterator() -> SwiftSyntax.MemberDeclListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.MemberDeclListItemSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.MemberDeclListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.MemberDeclListSyntax>
}
public struct ModifierListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ModifierListSyntax
  public func prepending(_ syntax: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ModifierListSyntax
  public func inserting(_ syntax: SwiftSyntax.DeclModifierSyntax, at index: Swift.Int) -> SwiftSyntax.ModifierListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ModifierListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.ModifierListSyntax
  public func removingFirst() -> SwiftSyntax.ModifierListSyntax
  public func removingLast() -> SwiftSyntax.ModifierListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ModifierListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ModifierListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.ModifierListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.ModifierListSyntax
  public func withoutTrivia() -> SwiftSyntax.ModifierListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ModifierListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.DeclModifierSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.DeclModifierSyntax?
    public typealias Element = SwiftSyntax.DeclModifierSyntax
  }
  public func makeIterator() -> SwiftSyntax.ModifierListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.DeclModifierSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ModifierListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ModifierListSyntax>
}
public struct AccessPathSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.AccessPathComponentSyntax) -> SwiftSyntax.AccessPathSyntax
  public func prepending(_ syntax: SwiftSyntax.AccessPathComponentSyntax) -> SwiftSyntax.AccessPathSyntax
  public func inserting(_ syntax: SwiftSyntax.AccessPathComponentSyntax, at index: Swift.Int) -> SwiftSyntax.AccessPathSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.AccessPathComponentSyntax) -> SwiftSyntax.AccessPathSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.AccessPathSyntax
  public func removingFirst() -> SwiftSyntax.AccessPathSyntax
  public func removingLast() -> SwiftSyntax.AccessPathSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.AccessPathSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.AccessPathSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.AccessPathSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.AccessPathSyntax
  public func withoutTrivia() -> SwiftSyntax.AccessPathSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AccessPathSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.AccessPathComponentSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.AccessPathComponentSyntax?
    public typealias Element = SwiftSyntax.AccessPathComponentSyntax
  }
  public func makeIterator() -> SwiftSyntax.AccessPathSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.AccessPathComponentSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.AccessPathSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.AccessPathSyntax>
}
public struct AccessorListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.AccessorListSyntax
  public func prepending(_ syntax: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.AccessorListSyntax
  public func inserting(_ syntax: SwiftSyntax.AccessorDeclSyntax, at index: Swift.Int) -> SwiftSyntax.AccessorListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.AccessorListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.AccessorListSyntax
  public func removingFirst() -> SwiftSyntax.AccessorListSyntax
  public func removingLast() -> SwiftSyntax.AccessorListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.AccessorListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.AccessorListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.AccessorListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.AccessorListSyntax
  public func withoutTrivia() -> SwiftSyntax.AccessorListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AccessorListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.AccessorDeclSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.AccessorDeclSyntax?
    public typealias Element = SwiftSyntax.AccessorDeclSyntax
  }
  public func makeIterator() -> SwiftSyntax.AccessorListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.AccessorDeclSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.AccessorListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.AccessorListSyntax>
}
public struct PatternBindingListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.PatternBindingListSyntax
  public func prepending(_ syntax: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.PatternBindingListSyntax
  public func inserting(_ syntax: SwiftSyntax.PatternBindingSyntax, at index: Swift.Int) -> SwiftSyntax.PatternBindingListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.PatternBindingListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.PatternBindingListSyntax
  public func removingFirst() -> SwiftSyntax.PatternBindingListSyntax
  public func removingLast() -> SwiftSyntax.PatternBindingListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.PatternBindingListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.PatternBindingListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.PatternBindingListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.PatternBindingListSyntax
  public func withoutTrivia() -> SwiftSyntax.PatternBindingListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PatternBindingListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.PatternBindingSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.PatternBindingSyntax?
    public typealias Element = SwiftSyntax.PatternBindingSyntax
  }
  public func makeIterator() -> SwiftSyntax.PatternBindingListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.PatternBindingSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.PatternBindingListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.PatternBindingListSyntax>
}
public struct EnumCaseElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.EnumCaseElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.EnumCaseElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.EnumCaseElementSyntax, at index: Swift.Int) -> SwiftSyntax.EnumCaseElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.EnumCaseElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.EnumCaseElementListSyntax
  public func removingFirst() -> SwiftSyntax.EnumCaseElementListSyntax
  public func removingLast() -> SwiftSyntax.EnumCaseElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.EnumCaseElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.EnumCaseElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.EnumCaseElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.EnumCaseElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.EnumCaseElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.EnumCaseElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.EnumCaseElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.EnumCaseElementSyntax?
    public typealias Element = SwiftSyntax.EnumCaseElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.EnumCaseElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.EnumCaseElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.EnumCaseElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.EnumCaseElementListSyntax>
}
public struct IdentifierListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.IdentifierListSyntax
  public func prepending(_ syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.IdentifierListSyntax
  public func inserting(_ syntax: SwiftSyntax.TokenSyntax, at index: Swift.Int) -> SwiftSyntax.IdentifierListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.IdentifierListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.IdentifierListSyntax
  public func removingFirst() -> SwiftSyntax.IdentifierListSyntax
  public func removingLast() -> SwiftSyntax.IdentifierListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.IdentifierListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.IdentifierListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.IdentifierListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.IdentifierListSyntax
  public func withoutTrivia() -> SwiftSyntax.IdentifierListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IdentifierListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.TokenSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TokenSyntax?
    public typealias Element = SwiftSyntax.TokenSyntax
  }
  public func makeIterator() -> SwiftSyntax.IdentifierListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.TokenSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.IdentifierListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.IdentifierListSyntax>
}
public struct PrecedenceGroupAttributeListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func prepending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func inserting(_ syntax: SwiftSyntax.Syntax, at index: Swift.Int) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.Syntax) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func removingFirst() -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func removingLast() -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public func withoutTrivia() -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupAttributeListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.Syntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.Syntax?
    public typealias Element = SwiftSyntax.Syntax
  }
  public func makeIterator() -> SwiftSyntax.PrecedenceGroupAttributeListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.Syntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.PrecedenceGroupAttributeListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.PrecedenceGroupAttributeListSyntax>
}
public struct PrecedenceGroupNameListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.PrecedenceGroupNameElementSyntax) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func prepending(_ syntax: SwiftSyntax.PrecedenceGroupNameElementSyntax) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func inserting(_ syntax: SwiftSyntax.PrecedenceGroupNameElementSyntax, at index: Swift.Int) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.PrecedenceGroupNameElementSyntax) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func removingFirst() -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func removingLast() -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public func withoutTrivia() -> SwiftSyntax.PrecedenceGroupNameListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupNameListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.PrecedenceGroupNameElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.PrecedenceGroupNameElementSyntax?
    public typealias Element = SwiftSyntax.PrecedenceGroupNameElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.PrecedenceGroupNameListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.PrecedenceGroupNameElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.PrecedenceGroupNameListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.PrecedenceGroupNameListSyntax>
}
public struct TokenListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TokenListSyntax
  public func prepending(_ syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TokenListSyntax
  public func inserting(_ syntax: SwiftSyntax.TokenSyntax, at index: Swift.Int) -> SwiftSyntax.TokenListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TokenListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.TokenListSyntax
  public func removingFirst() -> SwiftSyntax.TokenListSyntax
  public func removingLast() -> SwiftSyntax.TokenListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TokenListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TokenListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.TokenListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.TokenListSyntax
  public func withoutTrivia() -> SwiftSyntax.TokenListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TokenListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.TokenSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TokenSyntax?
    public typealias Element = SwiftSyntax.TokenSyntax
  }
  public func makeIterator() -> SwiftSyntax.TokenListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.TokenSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.TokenListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.TokenListSyntax>
}
public struct NonEmptyTokenListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.NonEmptyTokenListSyntax
  public func prepending(_ syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.NonEmptyTokenListSyntax
  public func inserting(_ syntax: SwiftSyntax.TokenSyntax, at index: Swift.Int) -> SwiftSyntax.NonEmptyTokenListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.TokenSyntax) -> SwiftSyntax.NonEmptyTokenListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.NonEmptyTokenListSyntax
  public func removingFirst() -> SwiftSyntax.NonEmptyTokenListSyntax
  public func removingLast() -> SwiftSyntax.NonEmptyTokenListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.NonEmptyTokenListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.NonEmptyTokenListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.NonEmptyTokenListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.NonEmptyTokenListSyntax
  public func withoutTrivia() -> SwiftSyntax.NonEmptyTokenListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.NonEmptyTokenListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.TokenSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TokenSyntax?
    public typealias Element = SwiftSyntax.TokenSyntax
  }
  public func makeIterator() -> SwiftSyntax.NonEmptyTokenListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.TokenSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.NonEmptyTokenListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.NonEmptyTokenListSyntax>
}
public struct AttributeListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.AttributeListSyntax
  public func prepending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.AttributeListSyntax
  public func inserting(_ syntax: SwiftSyntax.Syntax, at index: Swift.Int) -> SwiftSyntax.AttributeListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.Syntax) -> SwiftSyntax.AttributeListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.AttributeListSyntax
  public func removingFirst() -> SwiftSyntax.AttributeListSyntax
  public func removingLast() -> SwiftSyntax.AttributeListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.AttributeListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.AttributeListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.AttributeListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.AttributeListSyntax
  public func withoutTrivia() -> SwiftSyntax.AttributeListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AttributeListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.Syntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.Syntax?
    public typealias Element = SwiftSyntax.Syntax
  }
  public func makeIterator() -> SwiftSyntax.AttributeListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.Syntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.AttributeListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.AttributeListSyntax>
}
public struct SpecializeAttributeSpecListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func prepending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func inserting(_ syntax: SwiftSyntax.Syntax, at index: Swift.Int) -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.Syntax) -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func removingFirst() -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func removingLast() -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public func withoutTrivia() -> SwiftSyntax.SpecializeAttributeSpecListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SpecializeAttributeSpecListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.Syntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.Syntax?
    public typealias Element = SwiftSyntax.Syntax
  }
  public func makeIterator() -> SwiftSyntax.SpecializeAttributeSpecListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.Syntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.SpecializeAttributeSpecListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.SpecializeAttributeSpecListSyntax>
}
public struct ObjCSelectorSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.ObjCSelectorSyntax
  public func prepending(_ syntax: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.ObjCSelectorSyntax
  public func inserting(_ syntax: SwiftSyntax.ObjCSelectorPieceSyntax, at index: Swift.Int) -> SwiftSyntax.ObjCSelectorSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.ObjCSelectorSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.ObjCSelectorSyntax
  public func removingFirst() -> SwiftSyntax.ObjCSelectorSyntax
  public func removingLast() -> SwiftSyntax.ObjCSelectorSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ObjCSelectorSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ObjCSelectorSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.ObjCSelectorSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.ObjCSelectorSyntax
  public func withoutTrivia() -> SwiftSyntax.ObjCSelectorSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ObjCSelectorSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.ObjCSelectorPieceSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.ObjCSelectorPieceSyntax?
    public typealias Element = SwiftSyntax.ObjCSelectorPieceSyntax
  }
  public func makeIterator() -> SwiftSyntax.ObjCSelectorSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.ObjCSelectorPieceSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ObjCSelectorSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ObjCSelectorSyntax>
}
public struct DifferentiabilityParamListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.DifferentiabilityParamSyntax) -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func prepending(_ syntax: SwiftSyntax.DifferentiabilityParamSyntax) -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func inserting(_ syntax: SwiftSyntax.DifferentiabilityParamSyntax, at index: Swift.Int) -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.DifferentiabilityParamSyntax) -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func removingFirst() -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func removingLast() -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.DifferentiabilityParamListSyntax
  public func withoutTrivia() -> SwiftSyntax.DifferentiabilityParamListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DifferentiabilityParamListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.DifferentiabilityParamSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.DifferentiabilityParamSyntax?
    public typealias Element = SwiftSyntax.DifferentiabilityParamSyntax
  }
  public func makeIterator() -> SwiftSyntax.DifferentiabilityParamListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.DifferentiabilityParamSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DifferentiabilityParamListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DifferentiabilityParamListSyntax>
}
public struct SwitchCaseListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.SwitchCaseListSyntax
  public func prepending(_ syntax: SwiftSyntax.Syntax) -> SwiftSyntax.SwitchCaseListSyntax
  public func inserting(_ syntax: SwiftSyntax.Syntax, at index: Swift.Int) -> SwiftSyntax.SwitchCaseListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.Syntax) -> SwiftSyntax.SwitchCaseListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.SwitchCaseListSyntax
  public func removingFirst() -> SwiftSyntax.SwitchCaseListSyntax
  public func removingLast() -> SwiftSyntax.SwitchCaseListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.SwitchCaseListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.SwitchCaseListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.SwitchCaseListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.SwitchCaseListSyntax
  public func withoutTrivia() -> SwiftSyntax.SwitchCaseListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SwitchCaseListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.Syntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.Syntax?
    public typealias Element = SwiftSyntax.Syntax
  }
  public func makeIterator() -> SwiftSyntax.SwitchCaseListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.Syntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.SwitchCaseListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.SwitchCaseListSyntax>
}
public struct CatchClauseListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.CatchClauseListSyntax
  public func prepending(_ syntax: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.CatchClauseListSyntax
  public func inserting(_ syntax: SwiftSyntax.CatchClauseSyntax, at index: Swift.Int) -> SwiftSyntax.CatchClauseListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.CatchClauseListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.CatchClauseListSyntax
  public func removingFirst() -> SwiftSyntax.CatchClauseListSyntax
  public func removingLast() -> SwiftSyntax.CatchClauseListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CatchClauseListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CatchClauseListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.CatchClauseListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.CatchClauseListSyntax
  public func withoutTrivia() -> SwiftSyntax.CatchClauseListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CatchClauseListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.CatchClauseSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.CatchClauseSyntax?
    public typealias Element = SwiftSyntax.CatchClauseSyntax
  }
  public func makeIterator() -> SwiftSyntax.CatchClauseListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.CatchClauseSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CatchClauseListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CatchClauseListSyntax>
}
public struct CaseItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.CaseItemSyntax) -> SwiftSyntax.CaseItemListSyntax
  public func prepending(_ syntax: SwiftSyntax.CaseItemSyntax) -> SwiftSyntax.CaseItemListSyntax
  public func inserting(_ syntax: SwiftSyntax.CaseItemSyntax, at index: Swift.Int) -> SwiftSyntax.CaseItemListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.CaseItemSyntax) -> SwiftSyntax.CaseItemListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.CaseItemListSyntax
  public func removingFirst() -> SwiftSyntax.CaseItemListSyntax
  public func removingLast() -> SwiftSyntax.CaseItemListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CaseItemListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CaseItemListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.CaseItemListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.CaseItemListSyntax
  public func withoutTrivia() -> SwiftSyntax.CaseItemListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CaseItemListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.CaseItemSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.CaseItemSyntax?
    public typealias Element = SwiftSyntax.CaseItemSyntax
  }
  public func makeIterator() -> SwiftSyntax.CaseItemListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.CaseItemSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CaseItemListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CaseItemListSyntax>
}
public struct CatchItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.CatchItemListSyntax
  public func prepending(_ syntax: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.CatchItemListSyntax
  public func inserting(_ syntax: SwiftSyntax.CatchItemSyntax, at index: Swift.Int) -> SwiftSyntax.CatchItemListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.CatchItemListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.CatchItemListSyntax
  public func removingFirst() -> SwiftSyntax.CatchItemListSyntax
  public func removingLast() -> SwiftSyntax.CatchItemListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CatchItemListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CatchItemListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.CatchItemListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.CatchItemListSyntax
  public func withoutTrivia() -> SwiftSyntax.CatchItemListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CatchItemListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.CatchItemSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.CatchItemSyntax?
    public typealias Element = SwiftSyntax.CatchItemSyntax
  }
  public func makeIterator() -> SwiftSyntax.CatchItemListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.CatchItemSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CatchItemListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CatchItemListSyntax>
}
public struct ConditionElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.ConditionElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.ConditionElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.ConditionElementSyntax, at index: Swift.Int) -> SwiftSyntax.ConditionElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.ConditionElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.ConditionElementListSyntax
  public func removingFirst() -> SwiftSyntax.ConditionElementListSyntax
  public func removingLast() -> SwiftSyntax.ConditionElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ConditionElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.ConditionElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.ConditionElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.ConditionElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.ConditionElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ConditionElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.ConditionElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.ConditionElementSyntax?
    public typealias Element = SwiftSyntax.ConditionElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.ConditionElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.ConditionElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ConditionElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ConditionElementListSyntax>
}
public struct GenericRequirementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.GenericRequirementListSyntax
  public func prepending(_ syntax: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.GenericRequirementListSyntax
  public func inserting(_ syntax: SwiftSyntax.GenericRequirementSyntax, at index: Swift.Int) -> SwiftSyntax.GenericRequirementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.GenericRequirementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.GenericRequirementListSyntax
  public func removingFirst() -> SwiftSyntax.GenericRequirementListSyntax
  public func removingLast() -> SwiftSyntax.GenericRequirementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.GenericRequirementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.GenericRequirementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.GenericRequirementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.GenericRequirementListSyntax
  public func withoutTrivia() -> SwiftSyntax.GenericRequirementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericRequirementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.GenericRequirementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.GenericRequirementSyntax?
    public typealias Element = SwiftSyntax.GenericRequirementSyntax
  }
  public func makeIterator() -> SwiftSyntax.GenericRequirementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.GenericRequirementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.GenericRequirementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.GenericRequirementListSyntax>
}
public struct GenericParameterListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.GenericParameterListSyntax
  public func prepending(_ syntax: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.GenericParameterListSyntax
  public func inserting(_ syntax: SwiftSyntax.GenericParameterSyntax, at index: Swift.Int) -> SwiftSyntax.GenericParameterListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.GenericParameterListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.GenericParameterListSyntax
  public func removingFirst() -> SwiftSyntax.GenericParameterListSyntax
  public func removingLast() -> SwiftSyntax.GenericParameterListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.GenericParameterListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.GenericParameterListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.GenericParameterListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.GenericParameterListSyntax
  public func withoutTrivia() -> SwiftSyntax.GenericParameterListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericParameterListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.GenericParameterSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.GenericParameterSyntax?
    public typealias Element = SwiftSyntax.GenericParameterSyntax
  }
  public func makeIterator() -> SwiftSyntax.GenericParameterListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.GenericParameterSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.GenericParameterListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.GenericParameterListSyntax>
}
public struct CompositionTypeElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.CompositionTypeElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.CompositionTypeElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.CompositionTypeElementSyntax, at index: Swift.Int) -> SwiftSyntax.CompositionTypeElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.CompositionTypeElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.CompositionTypeElementListSyntax
  public func removingFirst() -> SwiftSyntax.CompositionTypeElementListSyntax
  public func removingLast() -> SwiftSyntax.CompositionTypeElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CompositionTypeElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.CompositionTypeElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.CompositionTypeElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.CompositionTypeElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.CompositionTypeElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.CompositionTypeElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.CompositionTypeElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.CompositionTypeElementSyntax?
    public typealias Element = SwiftSyntax.CompositionTypeElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.CompositionTypeElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.CompositionTypeElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CompositionTypeElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CompositionTypeElementListSyntax>
}
public struct TupleTypeElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.TupleTypeElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.TupleTypeElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.TupleTypeElementSyntax, at index: Swift.Int) -> SwiftSyntax.TupleTypeElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.TupleTypeElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.TupleTypeElementListSyntax
  public func removingFirst() -> SwiftSyntax.TupleTypeElementListSyntax
  public func removingLast() -> SwiftSyntax.TupleTypeElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TupleTypeElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TupleTypeElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.TupleTypeElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.TupleTypeElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.TupleTypeElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TupleTypeElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.TupleTypeElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TupleTypeElementSyntax?
    public typealias Element = SwiftSyntax.TupleTypeElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.TupleTypeElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.TupleTypeElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.TupleTypeElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.TupleTypeElementListSyntax>
}
public struct GenericArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.GenericArgumentListSyntax
  public func prepending(_ syntax: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.GenericArgumentListSyntax
  public func inserting(_ syntax: SwiftSyntax.GenericArgumentSyntax, at index: Swift.Int) -> SwiftSyntax.GenericArgumentListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.GenericArgumentListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.GenericArgumentListSyntax
  public func removingFirst() -> SwiftSyntax.GenericArgumentListSyntax
  public func removingLast() -> SwiftSyntax.GenericArgumentListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.GenericArgumentListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.GenericArgumentListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.GenericArgumentListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.GenericArgumentListSyntax
  public func withoutTrivia() -> SwiftSyntax.GenericArgumentListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.GenericArgumentListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.GenericArgumentSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.GenericArgumentSyntax?
    public typealias Element = SwiftSyntax.GenericArgumentSyntax
  }
  public func makeIterator() -> SwiftSyntax.GenericArgumentListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.GenericArgumentSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.GenericArgumentListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.GenericArgumentListSyntax>
}
public struct TuplePatternElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.TuplePatternElementListSyntax
  public func prepending(_ syntax: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.TuplePatternElementListSyntax
  public func inserting(_ syntax: SwiftSyntax.TuplePatternElementSyntax, at index: Swift.Int) -> SwiftSyntax.TuplePatternElementListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.TuplePatternElementListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.TuplePatternElementListSyntax
  public func removingFirst() -> SwiftSyntax.TuplePatternElementListSyntax
  public func removingLast() -> SwiftSyntax.TuplePatternElementListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TuplePatternElementListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.TuplePatternElementListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.TuplePatternElementListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.TuplePatternElementListSyntax
  public func withoutTrivia() -> SwiftSyntax.TuplePatternElementListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TuplePatternElementListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.TuplePatternElementSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TuplePatternElementSyntax?
    public typealias Element = SwiftSyntax.TuplePatternElementSyntax
  }
  public func makeIterator() -> SwiftSyntax.TuplePatternElementListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.TuplePatternElementSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.TuplePatternElementListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.TuplePatternElementListSyntax>
}
public struct AvailabilitySpecListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func appending(_ syntax: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.AvailabilitySpecListSyntax
  public func prepending(_ syntax: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.AvailabilitySpecListSyntax
  public func inserting(_ syntax: SwiftSyntax.AvailabilityArgumentSyntax, at index: Swift.Int) -> SwiftSyntax.AvailabilitySpecListSyntax
  public func replacing(childAt index: Swift.Int, with syntax: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.AvailabilitySpecListSyntax
  public func removing(childAt index: Swift.Int) -> SwiftSyntax.AvailabilitySpecListSyntax
  public func removingFirst() -> SwiftSyntax.AvailabilitySpecListSyntax
  public func removingLast() -> SwiftSyntax.AvailabilitySpecListSyntax
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.AvailabilitySpecListSyntax
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> SwiftSyntax.AvailabilitySpecListSyntax
  public func withoutLeadingTrivia() -> SwiftSyntax.AvailabilitySpecListSyntax
  public func withoutTrailingTrivia() -> SwiftSyntax.AvailabilitySpecListSyntax
  public func withoutTrivia() -> SwiftSyntax.AvailabilitySpecListSyntax
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AvailabilitySpecListSyntax : Swift.BidirectionalCollection {
  public typealias Element = SwiftSyntax.AvailabilityArgumentSyntax
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.AvailabilityArgumentSyntax?
    public typealias Element = SwiftSyntax.AvailabilityArgumentSyntax
  }
  public func makeIterator() -> SwiftSyntax.AvailabilitySpecListSyntax.Iterator
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.AvailabilityArgumentSyntax {
    get
  }
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.AvailabilitySpecListSyntax>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.AvailabilitySpecListSyntax>
}
extension SwiftSyntax.CodeBlockItemListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.TupleExprElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.ArrayElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.DictionaryElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.StringLiteralSegmentsSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.DeclNameArgumentListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.ExprListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.ClosureCaptureItemListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.ClosureParamListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.MultipleTrailingClosureElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.ObjcNameSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.FunctionParameterListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.IfConfigClauseListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.InheritedTypeListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.MemberDeclListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.ModifierListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.AccessPathSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.AccessorListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.PatternBindingListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.EnumCaseElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.IdentifierListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupAttributeListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupNameListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.TokenListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.NonEmptyTokenListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.AttributeListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.SpecializeAttributeSpecListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.ObjCSelectorSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.DifferentiabilityParamListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.SwitchCaseListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.CatchClauseListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.CaseItemListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.CatchItemListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.ConditionElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.GenericRequirementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.GenericParameterListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.CompositionTypeElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.TupleTypeElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.GenericArgumentListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.TuplePatternElementListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SwiftSyntax.AvailabilitySpecListSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public enum TriviaPiece {
  case spaces(Swift.Int)
  case tabs(Swift.Int)
  case verticalTabs(Swift.Int)
  case formfeeds(Swift.Int)
  case newlines(Swift.Int)
  case carriageReturns(Swift.Int)
  case carriageReturnLineFeeds(Swift.Int)
  case lineComment(Swift.String)
  case blockComment(Swift.String)
  case docLineComment(Swift.String)
  case docBlockComment(Swift.String)
  case garbageText(Swift.String)
}
extension SwiftSyntax.TriviaPiece : Swift.TextOutputStreamable {
  public func write<Target>(to target: inout Target) where Target : Swift.TextOutputStream
}
extension SwiftSyntax.TriviaPiece : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct Trivia {
  public init(pieces: [SwiftSyntax.TriviaPiece])
  public static var zero: SwiftSyntax.Trivia {
    get
  }
  public func appending(_ piece: SwiftSyntax.TriviaPiece) -> SwiftSyntax.Trivia
  public var sourceLength: SwiftSyntax.SourceLength {
    get
  }
  public var byteSize: Swift.Int {
    get
  }
  public static func spaces(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static func tabs(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static func verticalTabs(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static func formfeeds(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static func newlines(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static func carriageReturns(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static func carriageReturnLineFeeds(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static func lineComment(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func blockComment(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func docLineComment(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func docBlockComment(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func garbageText(_ text: Swift.String) -> SwiftSyntax.Trivia
}
extension SwiftSyntax.Trivia : Swift.Equatable {
  public static func == (a: SwiftSyntax.Trivia, b: SwiftSyntax.Trivia) -> Swift.Bool
}
extension SwiftSyntax.Trivia : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public subscript(index: Swift.Int) -> SwiftSyntax.TriviaPiece {
    get
  }
  public typealias Element = SwiftSyntax.TriviaPiece
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.Trivia>
  public typealias Iterator = Swift.IndexingIterator<SwiftSyntax.Trivia>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.Trivia>
}
extension SwiftSyntax.Trivia : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: SwiftSyntax.TriviaPiece...)
  public typealias ArrayLiteralElement = SwiftSyntax.TriviaPiece
}
public func + (lhs: SwiftSyntax.Trivia, rhs: SwiftSyntax.Trivia) -> SwiftSyntax.Trivia
extension SwiftSyntax.TriviaPiece : Swift.Equatable {
  public static func == (a: SwiftSyntax.TriviaPiece, b: SwiftSyntax.TriviaPiece) -> Swift.Bool
}
extension SwiftSyntax.TriviaPiece {
  public var sourceLength: SwiftSyntax.SourceLength {
    get
  }
}
public class DiagnosticEngine {
  public init()
  public var diagnostics: [SwiftSyntax.Diagnostic] {
    get
  }
  public func addConsumer(_ consumer: SwiftSyntax.DiagnosticConsumer)
  public func diagnose(_ message: SwiftSyntax.Diagnostic.Message, location: SwiftSyntax.SourceLocation? = nil, actions: ((inout SwiftSyntax.Diagnostic.Builder) -> Swift.Void)? = nil)
  public var hasErrors: Swift.Bool {
    get
  }
  @objc deinit
}
final public class JSONDiagnosticConsumer : SwiftSyntax.DiagnosticConsumer {
  public init(outputURL: Foundation.URL)
  public init()
  final public func handle(_ diagnostic: SwiftSyntax.Diagnostic)
  final public func finalize()
  @objc deinit
}
extension SwiftSyntax.TokenSyntax {
  public var tokenClassification: SwiftSyntax.SyntaxClassifiedRange {
    get
  }
}
public struct SyntaxClassifiedRange : Swift.Equatable {
  public var kind: SwiftSyntax.SyntaxClassification
  public var range: SwiftSyntax.ByteSourceRange
  public var offset: Swift.Int {
    get
  }
  public var length: Swift.Int {
    get
  }
  public var endOffset: Swift.Int {
    get
  }
  public static func == (a: SwiftSyntax.SyntaxClassifiedRange, b: SwiftSyntax.SyntaxClassifiedRange) -> Swift.Bool
}
public struct SyntaxClassifications : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.SyntaxClassifiedRange?
    public typealias Element = SwiftSyntax.SyntaxClassifiedRange
  }
  public init(_ node: SwiftSyntax.Syntax, in relRange: SwiftSyntax.ByteSourceRange)
  public func makeIterator() -> SwiftSyntax.SyntaxClassifications.Iterator
  public typealias Element = SwiftSyntax.SyntaxClassifiedRange
}
public struct AbsolutePosition : Swift.Comparable {
  public let utf8Offset: Swift.Int
  public init(utf8Offset: Swift.Int)
  public static func < (lhs: SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.AbsolutePosition) -> Swift.Bool
  public static func == (a: SwiftSyntax.AbsolutePosition, b: SwiftSyntax.AbsolutePosition) -> Swift.Bool
}
public enum SourcePresence : Swift.String {
  case present
  case missing
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UnknownDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.UnknownDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TypealiasDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.TypealiasDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.TypealiasDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.TypealiasDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.TypealiasDeclSyntax
  public var typealiasKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withTypealiasKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TypealiasDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TypealiasDeclSyntax
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public func withGenericParameterClause(_ newChild: SwiftSyntax.GenericParameterClauseSyntax?) -> SwiftSyntax.TypealiasDeclSyntax
  public var initializer: SwiftSyntax.TypeInitializerClauseSyntax? {
    get
    set(value)
  }
  public func withInitializer(_ newChild: SwiftSyntax.TypeInitializerClauseSyntax?) -> SwiftSyntax.TypealiasDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.TypealiasDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TypealiasDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AssociatedtypeDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public var associatedtypeKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAssociatedtypeKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public var inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax? {
    get
    set(value)
  }
  public func withInheritanceClause(_ newChild: SwiftSyntax.TypeInheritanceClauseSyntax?) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public var initializer: SwiftSyntax.TypeInitializerClauseSyntax? {
    get
    set(value)
  }
  public func withInitializer(_ newChild: SwiftSyntax.TypeInitializerClauseSyntax?) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.AssociatedtypeDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AssociatedtypeDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct IfConfigDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var clauses: SwiftSyntax.IfConfigClauseListSyntax {
    get
    set(value)
  }
  public func addClause(_ element: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.IfConfigDeclSyntax
  public func withClauses(_ newChild: SwiftSyntax.IfConfigClauseListSyntax?) -> SwiftSyntax.IfConfigDeclSyntax
  public var poundEndif: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundEndif(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IfConfigDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IfConfigDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundErrorDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundError: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundError(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundErrorDeclSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundErrorDeclSyntax
  public var message: SwiftSyntax.StringLiteralExprSyntax {
    get
    set(value)
  }
  public func withMessage(_ newChild: SwiftSyntax.StringLiteralExprSyntax?) -> SwiftSyntax.PoundErrorDeclSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundErrorDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundErrorDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundWarningDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundWarning: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundWarning(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundWarningDeclSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundWarningDeclSyntax
  public var message: SwiftSyntax.StringLiteralExprSyntax {
    get
    set(value)
  }
  public func withMessage(_ newChild: SwiftSyntax.StringLiteralExprSyntax?) -> SwiftSyntax.PoundWarningDeclSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundWarningDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundWarningDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PoundSourceLocationSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var poundSourceLocation: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPoundSourceLocation(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationSyntax
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationSyntax
  public var args: SwiftSyntax.PoundSourceLocationArgsSyntax? {
    get
    set(value)
  }
  public func withArgs(_ newChild: SwiftSyntax.PoundSourceLocationArgsSyntax?) -> SwiftSyntax.PoundSourceLocationSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PoundSourceLocationSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PoundSourceLocationSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ClassDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ClassDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.ClassDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ClassDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.ClassDeclSyntax
  public var classOrActorKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withClassOrActorKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClassDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ClassDeclSyntax
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public func withGenericParameterClause(_ newChild: SwiftSyntax.GenericParameterClauseSyntax?) -> SwiftSyntax.ClassDeclSyntax
  public var inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax? {
    get
    set(value)
  }
  public func withInheritanceClause(_ newChild: SwiftSyntax.TypeInheritanceClauseSyntax?) -> SwiftSyntax.ClassDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.ClassDeclSyntax
  public var members: SwiftSyntax.MemberDeclBlockSyntax {
    get
    set(value)
  }
  public func withMembers(_ newChild: SwiftSyntax.MemberDeclBlockSyntax?) -> SwiftSyntax.ClassDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ClassDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct StructDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.StructDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.StructDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.StructDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.StructDeclSyntax
  public var structKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withStructKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.StructDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.StructDeclSyntax
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public func withGenericParameterClause(_ newChild: SwiftSyntax.GenericParameterClauseSyntax?) -> SwiftSyntax.StructDeclSyntax
  public var inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax? {
    get
    set(value)
  }
  public func withInheritanceClause(_ newChild: SwiftSyntax.TypeInheritanceClauseSyntax?) -> SwiftSyntax.StructDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.StructDeclSyntax
  public var members: SwiftSyntax.MemberDeclBlockSyntax {
    get
    set(value)
  }
  public func withMembers(_ newChild: SwiftSyntax.MemberDeclBlockSyntax?) -> SwiftSyntax.StructDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.StructDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ProtocolDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ProtocolDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.ProtocolDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ProtocolDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.ProtocolDeclSyntax
  public var protocolKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withProtocolKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ProtocolDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ProtocolDeclSyntax
  public var inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax? {
    get
    set(value)
  }
  public func withInheritanceClause(_ newChild: SwiftSyntax.TypeInheritanceClauseSyntax?) -> SwiftSyntax.ProtocolDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.ProtocolDeclSyntax
  public var members: SwiftSyntax.MemberDeclBlockSyntax {
    get
    set(value)
  }
  public func withMembers(_ newChild: SwiftSyntax.MemberDeclBlockSyntax?) -> SwiftSyntax.ProtocolDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ProtocolDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ExtensionDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ExtensionDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.ExtensionDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ExtensionDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.ExtensionDeclSyntax
  public var extensionKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withExtensionKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ExtensionDeclSyntax
  public var extendedType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withExtendedType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.ExtensionDeclSyntax
  public var inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax? {
    get
    set(value)
  }
  public func withInheritanceClause(_ newChild: SwiftSyntax.TypeInheritanceClauseSyntax?) -> SwiftSyntax.ExtensionDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.ExtensionDeclSyntax
  public var members: SwiftSyntax.MemberDeclBlockSyntax {
    get
    set(value)
  }
  public func withMembers(_ newChild: SwiftSyntax.MemberDeclBlockSyntax?) -> SwiftSyntax.ExtensionDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ExtensionDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct FunctionDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.FunctionDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.FunctionDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public var funcKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withFuncKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public func withGenericParameterClause(_ newChild: SwiftSyntax.GenericParameterClauseSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public var signature: SwiftSyntax.FunctionSignatureSyntax {
    get
    set(value)
  }
  public func withSignature(_ newChild: SwiftSyntax.FunctionSignatureSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public var body: SwiftSyntax.CodeBlockSyntax? {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.FunctionDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.FunctionDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct InitializerDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.InitializerDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.InitializerDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public var initKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withInitKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public var optionalMark: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withOptionalMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public func withGenericParameterClause(_ newChild: SwiftSyntax.GenericParameterClauseSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public var parameters: SwiftSyntax.ParameterClauseSyntax {
    get
    set(value)
  }
  public func withParameters(_ newChild: SwiftSyntax.ParameterClauseSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public var throwsOrRethrowsKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withThrowsOrRethrowsKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public var body: SwiftSyntax.CodeBlockSyntax? {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.InitializerDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.InitializerDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct DeinitializerDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.DeinitializerDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.DeinitializerDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.DeinitializerDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.DeinitializerDeclSyntax
  public var deinitKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withDeinitKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.DeinitializerDeclSyntax
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.DeinitializerDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.DeinitializerDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SubscriptDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.SubscriptDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.SubscriptDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public var subscriptKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withSubscriptKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public func withGenericParameterClause(_ newChild: SwiftSyntax.GenericParameterClauseSyntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public var indices: SwiftSyntax.ParameterClauseSyntax {
    get
    set(value)
  }
  public func withIndices(_ newChild: SwiftSyntax.ParameterClauseSyntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public var result: SwiftSyntax.ReturnClauseSyntax {
    get
    set(value)
  }
  public func withResult(_ newChild: SwiftSyntax.ReturnClauseSyntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public var accessor: SwiftSyntax.Syntax? {
    get
    set(value)
  }
  public func withAccessor(_ newChild: SwiftSyntax.Syntax?) -> SwiftSyntax.SubscriptDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SubscriptDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ImportDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ImportDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.ImportDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ImportDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.ImportDeclSyntax
  public var importTok: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withImportTok(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ImportDeclSyntax
  public var importKind: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withImportKind(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ImportDeclSyntax
  public var path: SwiftSyntax.AccessPathSyntax {
    get
    set(value)
  }
  public func addPathComponent(_ element: SwiftSyntax.AccessPathComponentSyntax) -> SwiftSyntax.ImportDeclSyntax
  public func withPath(_ newChild: SwiftSyntax.AccessPathSyntax?) -> SwiftSyntax.ImportDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ImportDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AccessorDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.AccessorDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.AccessorDeclSyntax
  public var modifier: SwiftSyntax.DeclModifierSyntax? {
    get
    set(value)
  }
  public func withModifier(_ newChild: SwiftSyntax.DeclModifierSyntax?) -> SwiftSyntax.AccessorDeclSyntax
  public var accessorKind: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAccessorKind(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessorDeclSyntax
  public var parameter: SwiftSyntax.AccessorParameterSyntax? {
    get
    set(value)
  }
  public func withParameter(_ newChild: SwiftSyntax.AccessorParameterSyntax?) -> SwiftSyntax.AccessorDeclSyntax
  public var asyncKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withAsyncKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessorDeclSyntax
  public var throwsKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public func withThrowsKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AccessorDeclSyntax
  public var body: SwiftSyntax.CodeBlockSyntax? {
    get
    set(value)
  }
  public func withBody(_ newChild: SwiftSyntax.CodeBlockSyntax?) -> SwiftSyntax.AccessorDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AccessorDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct VariableDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.VariableDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.VariableDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.VariableDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.VariableDeclSyntax
  public var letOrVarKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLetOrVarKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.VariableDeclSyntax
  public var bindings: SwiftSyntax.PatternBindingListSyntax {
    get
    set(value)
  }
  public func addBinding(_ element: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.VariableDeclSyntax
  public func withBindings(_ newChild: SwiftSyntax.PatternBindingListSyntax?) -> SwiftSyntax.VariableDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.VariableDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct EnumCaseDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.EnumCaseDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.EnumCaseDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.EnumCaseDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.EnumCaseDeclSyntax
  public var caseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withCaseKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EnumCaseDeclSyntax
  public var elements: SwiftSyntax.EnumCaseElementListSyntax {
    get
    set(value)
  }
  public func addElement(_ element: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.EnumCaseDeclSyntax
  public func withElements(_ newChild: SwiftSyntax.EnumCaseElementListSyntax?) -> SwiftSyntax.EnumCaseDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.EnumCaseDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct EnumDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.EnumDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.EnumDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.EnumDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.EnumDeclSyntax
  public var enumKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withEnumKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EnumDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EnumDeclSyntax
  public var genericParameters: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public func withGenericParameters(_ newChild: SwiftSyntax.GenericParameterClauseSyntax?) -> SwiftSyntax.EnumDeclSyntax
  public var inheritanceClause: SwiftSyntax.TypeInheritanceClauseSyntax? {
    get
    set(value)
  }
  public func withInheritanceClause(_ newChild: SwiftSyntax.TypeInheritanceClauseSyntax?) -> SwiftSyntax.EnumDeclSyntax
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public func withGenericWhereClause(_ newChild: SwiftSyntax.GenericWhereClauseSyntax?) -> SwiftSyntax.EnumDeclSyntax
  public var members: SwiftSyntax.MemberDeclBlockSyntax {
    get
    set(value)
  }
  public func withMembers(_ newChild: SwiftSyntax.MemberDeclBlockSyntax?) -> SwiftSyntax.EnumDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.EnumDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct OperatorDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.OperatorDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.OperatorDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.OperatorDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.OperatorDeclSyntax
  public var operatorKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withOperatorKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.OperatorDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.OperatorDeclSyntax
  public var operatorPrecedenceAndTypes: SwiftSyntax.OperatorPrecedenceAndTypesSyntax? {
    get
    set(value)
  }
  public func withOperatorPrecedenceAndTypes(_ newChild: SwiftSyntax.OperatorPrecedenceAndTypesSyntax?) -> SwiftSyntax.OperatorDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.OperatorDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct PrecedenceGroupDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var attributes: SwiftSyntax.AttributeListSyntax? {
    get
    set(value)
  }
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public func withAttributes(_ newChild: SwiftSyntax.AttributeListSyntax?) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var modifiers: SwiftSyntax.ModifierListSyntax? {
    get
    set(value)
  }
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public func withModifiers(_ newChild: SwiftSyntax.ModifierListSyntax?) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var precedencegroupKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPrecedencegroupKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var groupAttributes: SwiftSyntax.PrecedenceGroupAttributeListSyntax {
    get
    set(value)
  }
  public func addGroupAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public func withGroupAttributes(_ newChild: SwiftSyntax.PrecedenceGroupAttributeListSyntax?) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightBrace(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.PrecedenceGroupDeclSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct Syntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public var _syntaxNode: SwiftSyntax.Syntax {
    get
  }
  public func _validateLayout()
  public init<S>(_ syntax: S) where S : SwiftSyntax.SyntaxProtocol
  public init?<S>(_ syntax: S?) where S : SwiftSyntax.SyntaxProtocol
  public init(fromProtocol syntax: SwiftSyntax.SyntaxProtocol)
  public init?(fromProtocol syntax: SwiftSyntax.SyntaxProtocol?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftSyntax.Syntax, rhs: SwiftSyntax.Syntax) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.Syntax {
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.SyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.SyntaxProtocol
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
}
extension SwiftSyntax.Syntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public protocol SyntaxHashable : Swift.Hashable {
  var _syntaxNode: SwiftSyntax.Syntax { get }
}
extension SwiftSyntax.SyntaxHashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
public protocol SyntaxProtocol : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible, Swift.TextOutputStreamable {
  var _syntaxNode: SwiftSyntax.Syntax { get }
  init?(_ syntaxNode: SwiftSyntax.Syntax)
  func _validateLayout()
  var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type { get }
}
extension SwiftSyntax.SyntaxProtocol {
  public var children: SwiftSyntax.SyntaxChildren {
    get
  }
  public var index: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var isPresent: Swift.Bool {
    get
  }
  public var isMissing: Swift.Bool {
    get
  }
  public var isToken: Swift.Bool {
    get
  }
  public var isCollection: Swift.Bool {
    get
  }
  public var isUnknown: Swift.Bool {
    get
  }
  public var parent: SwiftSyntax.Syntax? {
    get
  }
  public var indexInParent: Swift.Int {
    get
  }
  public var hasParent: Swift.Bool {
    get
  }
  public var previousToken: SwiftSyntax.TokenSyntax? {
    get
  }
  public var nextToken: SwiftSyntax.TokenSyntax? {
    get
  }
  public var firstToken: SwiftSyntax.TokenSyntax? {
    get
  }
  public var lastToken: SwiftSyntax.TokenSyntax? {
    get
  }
  public var position: SwiftSyntax.AbsolutePosition {
    get
  }
  public var positionAfterSkippingLeadingTrivia: SwiftSyntax.AbsolutePosition {
    get
  }
  public var endPositionBeforeTrailingTrivia: SwiftSyntax.AbsolutePosition {
    get
  }
  public var endPosition: SwiftSyntax.AbsolutePosition {
    get
  }
  public var byteSize: Swift.Int {
    get
  }
  public var byteRange: SwiftSyntax.ByteSourceRange {
    get
  }
  public var contentLength: SwiftSyntax.SourceLength {
    get
  }
  public var leadingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia? {
    get
    set
  }
  public var leadingTriviaLength: SwiftSyntax.SourceLength {
    get
  }
  public var trailingTriviaLength: SwiftSyntax.SourceLength {
    get
  }
  public func withLeadingTrivia(_ leadingTrivia: SwiftSyntax.Trivia) -> Self
  public func withTrailingTrivia(_ trailingTrivia: SwiftSyntax.Trivia) -> Self
  public func withoutLeadingTrivia() -> Self
  public func withoutTrailingTrivia() -> Self
  public func withoutTrivia() -> Self
  public var totalLength: SwiftSyntax.SourceLength {
    get
  }
  public var isImplicit: Swift.Bool {
    get
  }
  public var byteSizeAfterTrimmingTrivia: Swift.Int {
    get
  }
  public var root: SwiftSyntax.Syntax {
    get
  }
  public var tokens: SwiftSyntax.TokenSequence {
    get
  }
  public var classifications: SwiftSyntax.SyntaxClassifications {
    get
  }
  public func classifications(in range: SwiftSyntax.ByteSourceRange) -> SwiftSyntax.SyntaxClassifications
  public func classification(at offset: Swift.Int) -> SwiftSyntax.SyntaxClassifiedRange?
  public func classification(at position: SwiftSyntax.AbsolutePosition) -> SwiftSyntax.SyntaxClassifiedRange?
  public var id: SwiftSyntax.SyntaxIdentifier {
    get
  }
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public func write<Target>(to target: inout Target) where Target : Swift.TextOutputStream
}
public struct TokenSequence : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TokenSyntax?
    public typealias Element = SwiftSyntax.TokenSyntax
  }
  public init(_ node: SwiftSyntax.Syntax)
  public func makeIterator() -> SwiftSyntax.TokenSequence.Iterator
  public func reversed() -> SwiftSyntax.ReversedTokenSequence
  public typealias Element = SwiftSyntax.TokenSyntax
}
extension SwiftSyntax.TokenSequence : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ReversedTokenSequence : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TokenSyntax?
    public typealias Element = SwiftSyntax.TokenSyntax
  }
  public init(_ node: SwiftSyntax.Syntax)
  public func makeIterator() -> SwiftSyntax.ReversedTokenSequence.Iterator
  public func reversed() -> SwiftSyntax.TokenSequence
  public typealias Element = SwiftSyntax.TokenSyntax
}
extension SwiftSyntax.ReversedTokenSequence : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct SyntaxNode {
  public var asSyntax: SwiftSyntax.Syntax {
    get
  }
  public var parent: SwiftSyntax.SyntaxNode? {
    get
  }
  public var position: SwiftSyntax.AbsolutePosition {
    get
  }
  public var endPosition: SwiftSyntax.AbsolutePosition {
    get
  }
  public var byteSize: Swift.Int {
    get
  }
  public var byteRange: SwiftSyntax.ByteSourceRange {
    get
  }
  public var totalLength: SwiftSyntax.SourceLength {
    get
  }
  public var id: SwiftSyntax.SyntaxIdentifier {
    get
  }
}
extension SwiftSyntax.SyntaxNode : Swift.CustomStringConvertible, Swift.TextOutputStreamable {
  public var description: Swift.String {
    get
  }
  public func write<Target>(to target: inout Target) where Target : Swift.TextOutputStream
}
public struct UnknownPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.UnknownPatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct EnumCasePatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var type: SwiftSyntax.TypeSyntax? {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.EnumCasePatternSyntax
  public var period: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withPeriod(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EnumCasePatternSyntax
  public var caseName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withCaseName(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.EnumCasePatternSyntax
  public var associatedTuple: SwiftSyntax.TuplePatternSyntax? {
    get
    set(value)
  }
  public func withAssociatedTuple(_ newChild: SwiftSyntax.TuplePatternSyntax?) -> SwiftSyntax.EnumCasePatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.EnumCasePatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct IsTypePatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var isKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIsKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IsTypePatternSyntax
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.IsTypePatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IsTypePatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct OptionalPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var subPattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withSubPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.OptionalPatternSyntax
  public var questionMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withQuestionMark(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.OptionalPatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.OptionalPatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct IdentifierPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withIdentifier(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.IdentifierPatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IdentifierPatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct AsTypePatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withPattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.AsTypePatternSyntax
  public var asKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withAsKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.AsTypePatternSyntax
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public func withType(_ newChild: SwiftSyntax.TypeSyntax?) -> SwiftSyntax.AsTypePatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AsTypePatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct TuplePatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLeftParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TuplePatternSyntax
  public var elements: SwiftSyntax.TuplePatternElementListSyntax {
    get
    set(value)
  }
  public func addElement(_ element: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.TuplePatternSyntax
  public func withElements(_ newChild: SwiftSyntax.TuplePatternElementListSyntax?) -> SwiftSyntax.TuplePatternSyntax
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withRightParen(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.TuplePatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TuplePatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct WildcardPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var wildcard: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withWildcard(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.WildcardPatternSyntax
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public func withTypeAnnotation(_ newChild: SwiftSyntax.TypeAnnotationSyntax?) -> SwiftSyntax.WildcardPatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.WildcardPatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ExpressionPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public func withExpression(_ newChild: SwiftSyntax.ExprSyntax?) -> SwiftSyntax.ExpressionPatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ExpressionPatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ValueBindingPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ syntax: SwiftSyntax.Syntax)
  public var syntaxNodeType: SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public var letOrVarKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public func withLetOrVarKeyword(_ newChild: SwiftSyntax.TokenSyntax?) -> SwiftSyntax.ValueBindingPatternSyntax
  public var valuePattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public func withValuePattern(_ newChild: SwiftSyntax.PatternSyntax?) -> SwiftSyntax.ValueBindingPatternSyntax
  public func _validateLayout()
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.ValueBindingPatternSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public class PrintingDiagnosticConsumer : SwiftSyntax.DiagnosticConsumer {
  public init()
  public func handle(_ diagnostic: SwiftSyntax.Diagnostic)
  public func write(_ diagnostic: SwiftSyntax.Diagnostic)
  public func finalize()
  @objc deinit
}
public enum ParserError : Swift.Error, Swift.CustomStringConvertible {
  case invalidSyntaxData
  case parserCompatibilityCheckFailed
  public var description: Swift.String {
    get
  }
  public static func == (a: SwiftSyntax.ParserError, b: SwiftSyntax.ParserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SyntaxParser {
  public static func parse(source: Swift.String, parseTransition: SwiftSyntax.IncrementalParseTransition? = nil, filenameForDiagnostics: Swift.String = "", diagnosticEngine: SwiftSyntax.DiagnosticEngine? = nil) throws -> SwiftSyntax.SourceFileSyntax
  public static func parse(_ url: Foundation.URL, diagnosticEngine: SwiftSyntax.DiagnosticEngine? = nil) throws -> SwiftSyntax.SourceFileSyntax
}
extension SwiftSyntax.SyntaxVisitorContinueKind : Swift.Equatable {}
extension SwiftSyntax.SyntaxVisitorContinueKind : Swift.Hashable {}
extension SwiftSyntax.Diagnostic.Severity : Swift.Equatable {}
extension SwiftSyntax.Diagnostic.Severity : Swift.Hashable {}
extension SwiftSyntax.Diagnostic.Severity : Swift.RawRepresentable {}
extension SwiftSyntax.SyntaxClassification : Swift.Equatable {}
extension SwiftSyntax.SyntaxClassification : Swift.Hashable {}
extension SwiftSyntax.SourcePresence : Swift.Equatable {}
extension SwiftSyntax.SourcePresence : Swift.Hashable {}
extension SwiftSyntax.SourcePresence : Swift.RawRepresentable {}
extension SwiftSyntax.ParserError : Swift.Equatable {}
extension SwiftSyntax.ParserError : Swift.Hashable {}
